
KPL_STM32F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000052b4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005454  08005454  00006454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080054bc  080054bc  00007028  2**0
                  CONTENTS
  4 .ARM          00000008  080054bc  080054bc  000064bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080054c4  080054c4  00007028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080054c4  080054c4  000064c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080054c8  080054c8  000064c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  080054cc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a28  20000028  080054f4  00007028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004a50  080054f4  00007a50  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007028  2**0
                  CONTENTS, READONLY
 12 .debug_info   000149cf  00000000  00000000  00007058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003098  00000000  00000000  0001ba27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001380  00000000  00000000  0001eac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000f12  00000000  00000000  0001fe40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000351d  00000000  00000000  00020d52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014a91  00000000  00000000  0002426f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097d00  00000000  00000000  00038d00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d0a00  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005250  00000000  00000000  000d0a44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000046  00000000  00000000  000d5c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000028 	.word	0x20000028
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800543c 	.word	0x0800543c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000002c 	.word	0x2000002c
 80001dc:	0800543c 	.word	0x0800543c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <ShiftOut_SPI>:

uint8_t displayBuffer[2][5];  // Double buffer
volatile uint8_t currentBufferIndex = 0;

void ShiftOut_SPI(uint8_t *data, size_t size)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_RESET); // Pull STCP (Latch) low
 80004da:	2200      	movs	r2, #0
 80004dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004e0:	4823      	ldr	r0, [pc, #140]	@ (8000570 <ShiftOut_SPI+0xa0>)
 80004e2:	f000 fff3 	bl	80014cc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_SET);
 80004e6:	2201      	movs	r2, #1
 80004e8:	2180      	movs	r1, #128	@ 0x80
 80004ea:	4822      	ldr	r0, [pc, #136]	@ (8000574 <ShiftOut_SPI+0xa4>)
 80004ec:	f000 ffee 	bl	80014cc <HAL_GPIO_WritePin>
	 for (volatile int i = 0; i < 1000; i++) __NOP();
 80004f0:	2300      	movs	r3, #0
 80004f2:	60fb      	str	r3, [r7, #12]
 80004f4:	e003      	b.n	80004fe <ShiftOut_SPI+0x2e>
 80004f6:	bf00      	nop
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	3301      	adds	r3, #1
 80004fc:	60fb      	str	r3, [r7, #12]
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000504:	dbf7      	blt.n	80004f6 <ShiftOut_SPI+0x26>
	while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000506:	bf00      	nop
 8000508:	481b      	ldr	r0, [pc, #108]	@ (8000578 <ShiftOut_SPI+0xa8>)
 800050a:	f001 fe3b 	bl	8002184 <HAL_SPI_GetState>
 800050e:	4603      	mov	r3, r0
 8000510:	2b01      	cmp	r3, #1
 8000512:	d1f9      	bne.n	8000508 <ShiftOut_SPI+0x38>
    if (HAL_SPI_Transmit(&hspi1, data, size, HAL_MAX_DELAY) != HAL_OK)
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	b29a      	uxth	r2, r3
 8000518:	f04f 33ff 	mov.w	r3, #4294967295
 800051c:	6879      	ldr	r1, [r7, #4]
 800051e:	4816      	ldr	r0, [pc, #88]	@ (8000578 <ShiftOut_SPI+0xa8>)
 8000520:	f001 fced 	bl	8001efe <HAL_SPI_Transmit>
 8000524:	4603      	mov	r3, r0
 8000526:	2b00      	cmp	r3, #0
 8000528:	d001      	beq.n	800052e <ShiftOut_SPI+0x5e>
    {
    	Error_Handler();
 800052a:	f000 fbce 	bl	8000cca <Error_Handler>
    }
//    osDelay(10);
    for (volatile int i = 0; i < 1000; i++) __NOP();
 800052e:	2300      	movs	r3, #0
 8000530:	60bb      	str	r3, [r7, #8]
 8000532:	e003      	b.n	800053c <ShiftOut_SPI+0x6c>
 8000534:	bf00      	nop
 8000536:	68bb      	ldr	r3, [r7, #8]
 8000538:	3301      	adds	r3, #1
 800053a:	60bb      	str	r3, [r7, #8]
 800053c:	68bb      	ldr	r3, [r7, #8]
 800053e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000542:	dbf7      	blt.n	8000534 <ShiftOut_SPI+0x64>
    while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000544:	bf00      	nop
 8000546:	480c      	ldr	r0, [pc, #48]	@ (8000578 <ShiftOut_SPI+0xa8>)
 8000548:	f001 fe1c 	bl	8002184 <HAL_SPI_GetState>
 800054c:	4603      	mov	r3, r0
 800054e:	2b01      	cmp	r3, #1
 8000550:	d1f9      	bne.n	8000546 <ShiftOut_SPI+0x76>
    HAL_GPIO_WritePin(Latch_SPI1_GPIO_Port, Latch_SPI1_Pin, GPIO_PIN_SET); // Pull STCP (Latch) high
 8000552:	2201      	movs	r2, #1
 8000554:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000558:	4805      	ldr	r0, [pc, #20]	@ (8000570 <ShiftOut_SPI+0xa0>)
 800055a:	f000 ffb7 	bl	80014cc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 800055e:	2200      	movs	r2, #0
 8000560:	2180      	movs	r1, #128	@ 0x80
 8000562:	4804      	ldr	r0, [pc, #16]	@ (8000574 <ShiftOut_SPI+0xa4>)
 8000564:	f000 ffb2 	bl	80014cc <HAL_GPIO_WritePin>
}
 8000568:	bf00      	nop
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	40020400 	.word	0x40020400
 8000574:	40020800 	.word	0x40020800
 8000578:	20000044 	.word	0x20000044

0800057c <SevenSegLEDsHandler>:
uint8_t* SevenSegLEDsHandler(uint32_t* buffer, uint8_t scan_state) {
 800057c:	b480      	push	{r7}
 800057e:	b083      	sub	sp, #12
 8000580:	af00      	add	r7, sp, #0
 8000582:	6078      	str	r0, [r7, #4]
 8000584:	460b      	mov	r3, r1
 8000586:	70fb      	strb	r3, [r7, #3]
    static uint8_t output[3];
    switch (scan_state) {
 8000588:	78fb      	ldrb	r3, [r7, #3]
 800058a:	2b05      	cmp	r3, #5
 800058c:	f200 815d 	bhi.w	800084a <SevenSegLEDsHandler+0x2ce>
 8000590:	a201      	add	r2, pc, #4	@ (adr r2, 8000598 <SevenSegLEDsHandler+0x1c>)
 8000592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000596:	bf00      	nop
 8000598:	080005b1 	.word	0x080005b1
 800059c:	0800060b 	.word	0x0800060b
 80005a0:	0800067d 	.word	0x0800067d
 80005a4:	080006ef 	.word	0x080006ef
 80005a8:	08000761 	.word	0x08000761
 80005ac:	080007d3 	.word	0x080007d3
        case 0:
            output[0] = buffer[0] % 10;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	6819      	ldr	r1, [r3, #0]
 80005b4:	4ba8      	ldr	r3, [pc, #672]	@ (8000858 <SevenSegLEDsHandler+0x2dc>)
 80005b6:	fba3 2301 	umull	r2, r3, r3, r1
 80005ba:	08da      	lsrs	r2, r3, #3
 80005bc:	4613      	mov	r3, r2
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	4413      	add	r3, r2
 80005c2:	005b      	lsls	r3, r3, #1
 80005c4:	1aca      	subs	r2, r1, r3
 80005c6:	b2d2      	uxtb	r2, r2
 80005c8:	4ba4      	ldr	r3, [pc, #656]	@ (800085c <SevenSegLEDsHandler+0x2e0>)
 80005ca:	701a      	strb	r2, [r3, #0]
            output[1] = buffer[1] % 10;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	3304      	adds	r3, #4
 80005d0:	6819      	ldr	r1, [r3, #0]
 80005d2:	4ba1      	ldr	r3, [pc, #644]	@ (8000858 <SevenSegLEDsHandler+0x2dc>)
 80005d4:	fba3 2301 	umull	r2, r3, r3, r1
 80005d8:	08da      	lsrs	r2, r3, #3
 80005da:	4613      	mov	r3, r2
 80005dc:	009b      	lsls	r3, r3, #2
 80005de:	4413      	add	r3, r2
 80005e0:	005b      	lsls	r3, r3, #1
 80005e2:	1aca      	subs	r2, r1, r3
 80005e4:	b2d2      	uxtb	r2, r2
 80005e6:	4b9d      	ldr	r3, [pc, #628]	@ (800085c <SevenSegLEDsHandler+0x2e0>)
 80005e8:	705a      	strb	r2, [r3, #1]
            output[2] = buffer[2] % 10;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	3308      	adds	r3, #8
 80005ee:	6819      	ldr	r1, [r3, #0]
 80005f0:	4b99      	ldr	r3, [pc, #612]	@ (8000858 <SevenSegLEDsHandler+0x2dc>)
 80005f2:	fba3 2301 	umull	r2, r3, r3, r1
 80005f6:	08da      	lsrs	r2, r3, #3
 80005f8:	4613      	mov	r3, r2
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	4413      	add	r3, r2
 80005fe:	005b      	lsls	r3, r3, #1
 8000600:	1aca      	subs	r2, r1, r3
 8000602:	b2d2      	uxtb	r2, r2
 8000604:	4b95      	ldr	r3, [pc, #596]	@ (800085c <SevenSegLEDsHandler+0x2e0>)
 8000606:	709a      	strb	r2, [r3, #2]
            break;
 8000608:	e11f      	b.n	800084a <SevenSegLEDsHandler+0x2ce>
        case 1:
            output[0] = (buffer[0] / 10) % 10;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a92      	ldr	r2, [pc, #584]	@ (8000858 <SevenSegLEDsHandler+0x2dc>)
 8000610:	fba2 2303 	umull	r2, r3, r2, r3
 8000614:	08d9      	lsrs	r1, r3, #3
 8000616:	4b90      	ldr	r3, [pc, #576]	@ (8000858 <SevenSegLEDsHandler+0x2dc>)
 8000618:	fba3 2301 	umull	r2, r3, r3, r1
 800061c:	08da      	lsrs	r2, r3, #3
 800061e:	4613      	mov	r3, r2
 8000620:	009b      	lsls	r3, r3, #2
 8000622:	4413      	add	r3, r2
 8000624:	005b      	lsls	r3, r3, #1
 8000626:	1aca      	subs	r2, r1, r3
 8000628:	b2d2      	uxtb	r2, r2
 800062a:	4b8c      	ldr	r3, [pc, #560]	@ (800085c <SevenSegLEDsHandler+0x2e0>)
 800062c:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 10) % 10;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	3304      	adds	r3, #4
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a88      	ldr	r2, [pc, #544]	@ (8000858 <SevenSegLEDsHandler+0x2dc>)
 8000636:	fba2 2303 	umull	r2, r3, r2, r3
 800063a:	08d9      	lsrs	r1, r3, #3
 800063c:	4b86      	ldr	r3, [pc, #536]	@ (8000858 <SevenSegLEDsHandler+0x2dc>)
 800063e:	fba3 2301 	umull	r2, r3, r3, r1
 8000642:	08da      	lsrs	r2, r3, #3
 8000644:	4613      	mov	r3, r2
 8000646:	009b      	lsls	r3, r3, #2
 8000648:	4413      	add	r3, r2
 800064a:	005b      	lsls	r3, r3, #1
 800064c:	1aca      	subs	r2, r1, r3
 800064e:	b2d2      	uxtb	r2, r2
 8000650:	4b82      	ldr	r3, [pc, #520]	@ (800085c <SevenSegLEDsHandler+0x2e0>)
 8000652:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 10) % 10;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	3308      	adds	r3, #8
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	4a7f      	ldr	r2, [pc, #508]	@ (8000858 <SevenSegLEDsHandler+0x2dc>)
 800065c:	fba2 2303 	umull	r2, r3, r2, r3
 8000660:	08d9      	lsrs	r1, r3, #3
 8000662:	4b7d      	ldr	r3, [pc, #500]	@ (8000858 <SevenSegLEDsHandler+0x2dc>)
 8000664:	fba3 2301 	umull	r2, r3, r3, r1
 8000668:	08da      	lsrs	r2, r3, #3
 800066a:	4613      	mov	r3, r2
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	4413      	add	r3, r2
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	1aca      	subs	r2, r1, r3
 8000674:	b2d2      	uxtb	r2, r2
 8000676:	4b79      	ldr	r3, [pc, #484]	@ (800085c <SevenSegLEDsHandler+0x2e0>)
 8000678:	709a      	strb	r2, [r3, #2]
            break;
 800067a:	e0e6      	b.n	800084a <SevenSegLEDsHandler+0x2ce>
        case 2:
            output[0] = (buffer[0] / 100) % 10;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	4a77      	ldr	r2, [pc, #476]	@ (8000860 <SevenSegLEDsHandler+0x2e4>)
 8000682:	fba2 2303 	umull	r2, r3, r2, r3
 8000686:	0959      	lsrs	r1, r3, #5
 8000688:	4b73      	ldr	r3, [pc, #460]	@ (8000858 <SevenSegLEDsHandler+0x2dc>)
 800068a:	fba3 2301 	umull	r2, r3, r3, r1
 800068e:	08da      	lsrs	r2, r3, #3
 8000690:	4613      	mov	r3, r2
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	4413      	add	r3, r2
 8000696:	005b      	lsls	r3, r3, #1
 8000698:	1aca      	subs	r2, r1, r3
 800069a:	b2d2      	uxtb	r2, r2
 800069c:	4b6f      	ldr	r3, [pc, #444]	@ (800085c <SevenSegLEDsHandler+0x2e0>)
 800069e:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 100) % 10;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	3304      	adds	r3, #4
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a6e      	ldr	r2, [pc, #440]	@ (8000860 <SevenSegLEDsHandler+0x2e4>)
 80006a8:	fba2 2303 	umull	r2, r3, r2, r3
 80006ac:	0959      	lsrs	r1, r3, #5
 80006ae:	4b6a      	ldr	r3, [pc, #424]	@ (8000858 <SevenSegLEDsHandler+0x2dc>)
 80006b0:	fba3 2301 	umull	r2, r3, r3, r1
 80006b4:	08da      	lsrs	r2, r3, #3
 80006b6:	4613      	mov	r3, r2
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	4413      	add	r3, r2
 80006bc:	005b      	lsls	r3, r3, #1
 80006be:	1aca      	subs	r2, r1, r3
 80006c0:	b2d2      	uxtb	r2, r2
 80006c2:	4b66      	ldr	r3, [pc, #408]	@ (800085c <SevenSegLEDsHandler+0x2e0>)
 80006c4:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 100) % 10;
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	3308      	adds	r3, #8
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a64      	ldr	r2, [pc, #400]	@ (8000860 <SevenSegLEDsHandler+0x2e4>)
 80006ce:	fba2 2303 	umull	r2, r3, r2, r3
 80006d2:	0959      	lsrs	r1, r3, #5
 80006d4:	4b60      	ldr	r3, [pc, #384]	@ (8000858 <SevenSegLEDsHandler+0x2dc>)
 80006d6:	fba3 2301 	umull	r2, r3, r3, r1
 80006da:	08da      	lsrs	r2, r3, #3
 80006dc:	4613      	mov	r3, r2
 80006de:	009b      	lsls	r3, r3, #2
 80006e0:	4413      	add	r3, r2
 80006e2:	005b      	lsls	r3, r3, #1
 80006e4:	1aca      	subs	r2, r1, r3
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	4b5c      	ldr	r3, [pc, #368]	@ (800085c <SevenSegLEDsHandler+0x2e0>)
 80006ea:	709a      	strb	r2, [r3, #2]
            break;
 80006ec:	e0ad      	b.n	800084a <SevenSegLEDsHandler+0x2ce>
        case 3:
            output[0] = (buffer[0] / 1000) % 10;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4a5c      	ldr	r2, [pc, #368]	@ (8000864 <SevenSegLEDsHandler+0x2e8>)
 80006f4:	fba2 2303 	umull	r2, r3, r2, r3
 80006f8:	0999      	lsrs	r1, r3, #6
 80006fa:	4b57      	ldr	r3, [pc, #348]	@ (8000858 <SevenSegLEDsHandler+0x2dc>)
 80006fc:	fba3 2301 	umull	r2, r3, r3, r1
 8000700:	08da      	lsrs	r2, r3, #3
 8000702:	4613      	mov	r3, r2
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	4413      	add	r3, r2
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	1aca      	subs	r2, r1, r3
 800070c:	b2d2      	uxtb	r2, r2
 800070e:	4b53      	ldr	r3, [pc, #332]	@ (800085c <SevenSegLEDsHandler+0x2e0>)
 8000710:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 1000) % 10;
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	3304      	adds	r3, #4
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	4a52      	ldr	r2, [pc, #328]	@ (8000864 <SevenSegLEDsHandler+0x2e8>)
 800071a:	fba2 2303 	umull	r2, r3, r2, r3
 800071e:	0999      	lsrs	r1, r3, #6
 8000720:	4b4d      	ldr	r3, [pc, #308]	@ (8000858 <SevenSegLEDsHandler+0x2dc>)
 8000722:	fba3 2301 	umull	r2, r3, r3, r1
 8000726:	08da      	lsrs	r2, r3, #3
 8000728:	4613      	mov	r3, r2
 800072a:	009b      	lsls	r3, r3, #2
 800072c:	4413      	add	r3, r2
 800072e:	005b      	lsls	r3, r3, #1
 8000730:	1aca      	subs	r2, r1, r3
 8000732:	b2d2      	uxtb	r2, r2
 8000734:	4b49      	ldr	r3, [pc, #292]	@ (800085c <SevenSegLEDsHandler+0x2e0>)
 8000736:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 1000) % 10;
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	3308      	adds	r3, #8
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	4a49      	ldr	r2, [pc, #292]	@ (8000864 <SevenSegLEDsHandler+0x2e8>)
 8000740:	fba2 2303 	umull	r2, r3, r2, r3
 8000744:	0999      	lsrs	r1, r3, #6
 8000746:	4b44      	ldr	r3, [pc, #272]	@ (8000858 <SevenSegLEDsHandler+0x2dc>)
 8000748:	fba3 2301 	umull	r2, r3, r3, r1
 800074c:	08da      	lsrs	r2, r3, #3
 800074e:	4613      	mov	r3, r2
 8000750:	009b      	lsls	r3, r3, #2
 8000752:	4413      	add	r3, r2
 8000754:	005b      	lsls	r3, r3, #1
 8000756:	1aca      	subs	r2, r1, r3
 8000758:	b2d2      	uxtb	r2, r2
 800075a:	4b40      	ldr	r3, [pc, #256]	@ (800085c <SevenSegLEDsHandler+0x2e0>)
 800075c:	709a      	strb	r2, [r3, #2]
            break;
 800075e:	e074      	b.n	800084a <SevenSegLEDsHandler+0x2ce>
        case 4:
            output[0] = (buffer[0] / 10000) % 10;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	681b      	ldr	r3, [r3, #0]
 8000764:	4a40      	ldr	r2, [pc, #256]	@ (8000868 <SevenSegLEDsHandler+0x2ec>)
 8000766:	fba2 2303 	umull	r2, r3, r2, r3
 800076a:	0b59      	lsrs	r1, r3, #13
 800076c:	4b3a      	ldr	r3, [pc, #232]	@ (8000858 <SevenSegLEDsHandler+0x2dc>)
 800076e:	fba3 2301 	umull	r2, r3, r3, r1
 8000772:	08da      	lsrs	r2, r3, #3
 8000774:	4613      	mov	r3, r2
 8000776:	009b      	lsls	r3, r3, #2
 8000778:	4413      	add	r3, r2
 800077a:	005b      	lsls	r3, r3, #1
 800077c:	1aca      	subs	r2, r1, r3
 800077e:	b2d2      	uxtb	r2, r2
 8000780:	4b36      	ldr	r3, [pc, #216]	@ (800085c <SevenSegLEDsHandler+0x2e0>)
 8000782:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 10000) % 10;
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	3304      	adds	r3, #4
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a37      	ldr	r2, [pc, #220]	@ (8000868 <SevenSegLEDsHandler+0x2ec>)
 800078c:	fba2 2303 	umull	r2, r3, r2, r3
 8000790:	0b59      	lsrs	r1, r3, #13
 8000792:	4b31      	ldr	r3, [pc, #196]	@ (8000858 <SevenSegLEDsHandler+0x2dc>)
 8000794:	fba3 2301 	umull	r2, r3, r3, r1
 8000798:	08da      	lsrs	r2, r3, #3
 800079a:	4613      	mov	r3, r2
 800079c:	009b      	lsls	r3, r3, #2
 800079e:	4413      	add	r3, r2
 80007a0:	005b      	lsls	r3, r3, #1
 80007a2:	1aca      	subs	r2, r1, r3
 80007a4:	b2d2      	uxtb	r2, r2
 80007a6:	4b2d      	ldr	r3, [pc, #180]	@ (800085c <SevenSegLEDsHandler+0x2e0>)
 80007a8:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 10000) % 10;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	3308      	adds	r3, #8
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a2d      	ldr	r2, [pc, #180]	@ (8000868 <SevenSegLEDsHandler+0x2ec>)
 80007b2:	fba2 2303 	umull	r2, r3, r2, r3
 80007b6:	0b59      	lsrs	r1, r3, #13
 80007b8:	4b27      	ldr	r3, [pc, #156]	@ (8000858 <SevenSegLEDsHandler+0x2dc>)
 80007ba:	fba3 2301 	umull	r2, r3, r3, r1
 80007be:	08da      	lsrs	r2, r3, #3
 80007c0:	4613      	mov	r3, r2
 80007c2:	009b      	lsls	r3, r3, #2
 80007c4:	4413      	add	r3, r2
 80007c6:	005b      	lsls	r3, r3, #1
 80007c8:	1aca      	subs	r2, r1, r3
 80007ca:	b2d2      	uxtb	r2, r2
 80007cc:	4b23      	ldr	r3, [pc, #140]	@ (800085c <SevenSegLEDsHandler+0x2e0>)
 80007ce:	709a      	strb	r2, [r3, #2]
            break;
 80007d0:	e03b      	b.n	800084a <SevenSegLEDsHandler+0x2ce>
        case 5:
            output[0] = (buffer[0] / 100000) % 10;
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	095b      	lsrs	r3, r3, #5
 80007d8:	4a24      	ldr	r2, [pc, #144]	@ (800086c <SevenSegLEDsHandler+0x2f0>)
 80007da:	fba2 2303 	umull	r2, r3, r2, r3
 80007de:	09d9      	lsrs	r1, r3, #7
 80007e0:	4b1d      	ldr	r3, [pc, #116]	@ (8000858 <SevenSegLEDsHandler+0x2dc>)
 80007e2:	fba3 2301 	umull	r2, r3, r3, r1
 80007e6:	08da      	lsrs	r2, r3, #3
 80007e8:	4613      	mov	r3, r2
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	4413      	add	r3, r2
 80007ee:	005b      	lsls	r3, r3, #1
 80007f0:	1aca      	subs	r2, r1, r3
 80007f2:	b2d2      	uxtb	r2, r2
 80007f4:	4b19      	ldr	r3, [pc, #100]	@ (800085c <SevenSegLEDsHandler+0x2e0>)
 80007f6:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 100000) % 10;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	3304      	adds	r3, #4
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	095b      	lsrs	r3, r3, #5
 8000800:	4a1a      	ldr	r2, [pc, #104]	@ (800086c <SevenSegLEDsHandler+0x2f0>)
 8000802:	fba2 2303 	umull	r2, r3, r2, r3
 8000806:	09d9      	lsrs	r1, r3, #7
 8000808:	4b13      	ldr	r3, [pc, #76]	@ (8000858 <SevenSegLEDsHandler+0x2dc>)
 800080a:	fba3 2301 	umull	r2, r3, r3, r1
 800080e:	08da      	lsrs	r2, r3, #3
 8000810:	4613      	mov	r3, r2
 8000812:	009b      	lsls	r3, r3, #2
 8000814:	4413      	add	r3, r2
 8000816:	005b      	lsls	r3, r3, #1
 8000818:	1aca      	subs	r2, r1, r3
 800081a:	b2d2      	uxtb	r2, r2
 800081c:	4b0f      	ldr	r3, [pc, #60]	@ (800085c <SevenSegLEDsHandler+0x2e0>)
 800081e:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 100000) % 10;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	3308      	adds	r3, #8
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	095b      	lsrs	r3, r3, #5
 8000828:	4a10      	ldr	r2, [pc, #64]	@ (800086c <SevenSegLEDsHandler+0x2f0>)
 800082a:	fba2 2303 	umull	r2, r3, r2, r3
 800082e:	09d9      	lsrs	r1, r3, #7
 8000830:	4b09      	ldr	r3, [pc, #36]	@ (8000858 <SevenSegLEDsHandler+0x2dc>)
 8000832:	fba3 2301 	umull	r2, r3, r3, r1
 8000836:	08da      	lsrs	r2, r3, #3
 8000838:	4613      	mov	r3, r2
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	4413      	add	r3, r2
 800083e:	005b      	lsls	r3, r3, #1
 8000840:	1aca      	subs	r2, r1, r3
 8000842:	b2d2      	uxtb	r2, r2
 8000844:	4b05      	ldr	r3, [pc, #20]	@ (800085c <SevenSegLEDsHandler+0x2e0>)
 8000846:	709a      	strb	r2, [r3, #2]
            break;
 8000848:	bf00      	nop
    }
    return output;
 800084a:	4b04      	ldr	r3, [pc, #16]	@ (800085c <SevenSegLEDsHandler+0x2e0>)
}
 800084c:	4618      	mov	r0, r3
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr
 8000858:	cccccccd 	.word	0xcccccccd
 800085c:	200000b0 	.word	0x200000b0
 8000860:	51eb851f 	.word	0x51eb851f
 8000864:	10624dd3 	.word	0x10624dd3
 8000868:	d1b71759 	.word	0xd1b71759
 800086c:	0a7c5ac5 	.word	0x0a7c5ac5

08000870 <UpdateDisplayBuffer>:

void UpdateDisplayBuffer(uint32_t* buffer, uint8_t scan_state, uint8_t bufferIndex) {
 8000870:	b580      	push	{r7, lr}
 8000872:	b084      	sub	sp, #16
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
 8000878:	460b      	mov	r3, r1
 800087a:	70fb      	strb	r3, [r7, #3]
 800087c:	4613      	mov	r3, r2
 800087e:	70bb      	strb	r3, [r7, #2]
    uint8_t* curr_digit = SevenSegLEDsHandler(buffer, scan_state);
 8000880:	78fb      	ldrb	r3, [r7, #3]
 8000882:	4619      	mov	r1, r3
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f7ff fe79 	bl	800057c <SevenSegLEDsHandler>
 800088a:	60b8      	str	r0, [r7, #8]
    uint8_t curr_scan;
    switch (scan_state) {
 800088c:	78fb      	ldrb	r3, [r7, #3]
 800088e:	2b05      	cmp	r3, #5
 8000890:	d820      	bhi.n	80008d4 <UpdateDisplayBuffer+0x64>
 8000892:	a201      	add	r2, pc, #4	@ (adr r2, 8000898 <UpdateDisplayBuffer+0x28>)
 8000894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000898:	080008b1 	.word	0x080008b1
 800089c:	080008b7 	.word	0x080008b7
 80008a0:	080008bd 	.word	0x080008bd
 80008a4:	080008c3 	.word	0x080008c3
 80008a8:	080008c9 	.word	0x080008c9
 80008ac:	080008cf 	.word	0x080008cf
        case 0:
            curr_scan = 0b11111110;
 80008b0:	23fe      	movs	r3, #254	@ 0xfe
 80008b2:	73fb      	strb	r3, [r7, #15]
            break;
 80008b4:	e011      	b.n	80008da <UpdateDisplayBuffer+0x6a>
        case 1:
            curr_scan = 0b11111101;
 80008b6:	23fd      	movs	r3, #253	@ 0xfd
 80008b8:	73fb      	strb	r3, [r7, #15]
            break;
 80008ba:	e00e      	b.n	80008da <UpdateDisplayBuffer+0x6a>
        case 2:
            curr_scan = 0b11111011;
 80008bc:	23fb      	movs	r3, #251	@ 0xfb
 80008be:	73fb      	strb	r3, [r7, #15]
            break;
 80008c0:	e00b      	b.n	80008da <UpdateDisplayBuffer+0x6a>
        case 3:
            curr_scan = 0b11110111;
 80008c2:	23f7      	movs	r3, #247	@ 0xf7
 80008c4:	73fb      	strb	r3, [r7, #15]
            break;
 80008c6:	e008      	b.n	80008da <UpdateDisplayBuffer+0x6a>
        case 4:
            curr_scan = 0b11101111;
 80008c8:	23ef      	movs	r3, #239	@ 0xef
 80008ca:	73fb      	strb	r3, [r7, #15]
            break;
 80008cc:	e005      	b.n	80008da <UpdateDisplayBuffer+0x6a>
        case 5:
            curr_scan = 0b11011111;
 80008ce:	23df      	movs	r3, #223	@ 0xdf
 80008d0:	73fb      	strb	r3, [r7, #15]
            break;
 80008d2:	e002      	b.n	80008da <UpdateDisplayBuffer+0x6a>
        default:
            curr_scan = 0b11111111;
 80008d4:	23ff      	movs	r3, #255	@ 0xff
 80008d6:	73fb      	strb	r3, [r7, #15]
            break;
 80008d8:	bf00      	nop
    }
    displayBuffer[bufferIndex][0] = 0b11111111; //skip bít
 80008da:	78ba      	ldrb	r2, [r7, #2]
 80008dc:	491f      	ldr	r1, [pc, #124]	@ (800095c <UpdateDisplayBuffer+0xec>)
 80008de:	4613      	mov	r3, r2
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	4413      	add	r3, r2
 80008e4:	440b      	add	r3, r1
 80008e6:	22ff      	movs	r2, #255	@ 0xff
 80008e8:	701a      	strb	r2, [r3, #0]
    displayBuffer[bufferIndex][1] = digitMapWithDP[curr_digit[2]];
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	3302      	adds	r3, #2
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	4619      	mov	r1, r3
 80008f2:	78ba      	ldrb	r2, [r7, #2]
 80008f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000960 <UpdateDisplayBuffer+0xf0>)
 80008f6:	5c58      	ldrb	r0, [r3, r1]
 80008f8:	4918      	ldr	r1, [pc, #96]	@ (800095c <UpdateDisplayBuffer+0xec>)
 80008fa:	4613      	mov	r3, r2
 80008fc:	009b      	lsls	r3, r3, #2
 80008fe:	4413      	add	r3, r2
 8000900:	440b      	add	r3, r1
 8000902:	3301      	adds	r3, #1
 8000904:	4602      	mov	r2, r0
 8000906:	701a      	strb	r2, [r3, #0]
    displayBuffer[bufferIndex][2] = curr_scan;
 8000908:	78ba      	ldrb	r2, [r7, #2]
 800090a:	4914      	ldr	r1, [pc, #80]	@ (800095c <UpdateDisplayBuffer+0xec>)
 800090c:	4613      	mov	r3, r2
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	4413      	add	r3, r2
 8000912:	440b      	add	r3, r1
 8000914:	3302      	adds	r3, #2
 8000916:	7bfa      	ldrb	r2, [r7, #15]
 8000918:	701a      	strb	r2, [r3, #0]
    displayBuffer[bufferIndex][3] = digitMapWithDP[curr_digit[1]];
 800091a:	68bb      	ldr	r3, [r7, #8]
 800091c:	3301      	adds	r3, #1
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	4619      	mov	r1, r3
 8000922:	78ba      	ldrb	r2, [r7, #2]
 8000924:	4b0e      	ldr	r3, [pc, #56]	@ (8000960 <UpdateDisplayBuffer+0xf0>)
 8000926:	5c58      	ldrb	r0, [r3, r1]
 8000928:	490c      	ldr	r1, [pc, #48]	@ (800095c <UpdateDisplayBuffer+0xec>)
 800092a:	4613      	mov	r3, r2
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	4413      	add	r3, r2
 8000930:	440b      	add	r3, r1
 8000932:	3303      	adds	r3, #3
 8000934:	4602      	mov	r2, r0
 8000936:	701a      	strb	r2, [r3, #0]
    displayBuffer[bufferIndex][4] = digitMapWithDP[curr_digit[0]];
 8000938:	68bb      	ldr	r3, [r7, #8]
 800093a:	781b      	ldrb	r3, [r3, #0]
 800093c:	4619      	mov	r1, r3
 800093e:	78ba      	ldrb	r2, [r7, #2]
 8000940:	4b07      	ldr	r3, [pc, #28]	@ (8000960 <UpdateDisplayBuffer+0xf0>)
 8000942:	5c58      	ldrb	r0, [r3, r1]
 8000944:	4905      	ldr	r1, [pc, #20]	@ (800095c <UpdateDisplayBuffer+0xec>)
 8000946:	4613      	mov	r3, r2
 8000948:	009b      	lsls	r3, r3, #2
 800094a:	4413      	add	r3, r2
 800094c:	440b      	add	r3, r1
 800094e:	3304      	adds	r3, #4
 8000950:	4602      	mov	r2, r0
 8000952:	701a      	strb	r2, [r3, #0]
}
 8000954:	bf00      	nop
 8000956:	3710      	adds	r7, #16
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	200000a4 	.word	0x200000a4
 8000960:	20000000 	.word	0x20000000

08000964 <SevenSegLEDsScan>:

void SevenSegLEDsScan() {
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
    uint8_t bufferIndex = (currentBufferIndex + 1) % 2;
 800096a:	4b1d      	ldr	r3, [pc, #116]	@ (80009e0 <SevenSegLEDsScan+0x7c>)
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	b2db      	uxtb	r3, r3
 8000970:	3301      	adds	r3, #1
 8000972:	2b00      	cmp	r3, #0
 8000974:	f003 0301 	and.w	r3, r3, #1
 8000978:	bfb8      	it	lt
 800097a:	425b      	neglt	r3, r3
 800097c:	71fb      	strb	r3, [r7, #7]
    UpdateDisplayBuffer(SevenSegBuffer, SevenSegScanState, bufferIndex);
 800097e:	4b19      	ldr	r3, [pc, #100]	@ (80009e4 <SevenSegLEDsScan+0x80>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	b2db      	uxtb	r3, r3
 8000984:	79fa      	ldrb	r2, [r7, #7]
 8000986:	4619      	mov	r1, r3
 8000988:	4817      	ldr	r0, [pc, #92]	@ (80009e8 <SevenSegLEDsScan+0x84>)
 800098a:	f7ff ff71 	bl	8000870 <UpdateDisplayBuffer>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098e:	b672      	cpsid	i
}
 8000990:	bf00      	nop

    __disable_irq();  // Disable interrupts
    ShiftOut_SPI(displayBuffer[currentBufferIndex], 5);
 8000992:	4b13      	ldr	r3, [pc, #76]	@ (80009e0 <SevenSegLEDsScan+0x7c>)
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	b2db      	uxtb	r3, r3
 8000998:	461a      	mov	r2, r3
 800099a:	4613      	mov	r3, r2
 800099c:	009b      	lsls	r3, r3, #2
 800099e:	4413      	add	r3, r2
 80009a0:	4a12      	ldr	r2, [pc, #72]	@ (80009ec <SevenSegLEDsScan+0x88>)
 80009a2:	4413      	add	r3, r2
 80009a4:	2105      	movs	r1, #5
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fd92 	bl	80004d0 <ShiftOut_SPI>
    currentBufferIndex = bufferIndex;  // Swap buffers
 80009ac:	4a0c      	ldr	r2, [pc, #48]	@ (80009e0 <SevenSegLEDsScan+0x7c>)
 80009ae:	79fb      	ldrb	r3, [r7, #7]
 80009b0:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80009b2:	b662      	cpsie	i
}
 80009b4:	bf00      	nop
    __enable_irq();   // Enable interrupts

    SevenSegScanState = (SevenSegScanState + 1) % 6;
 80009b6:	4b0b      	ldr	r3, [pc, #44]	@ (80009e4 <SevenSegLEDsScan+0x80>)
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	1c5a      	adds	r2, r3, #1
 80009be:	4b0c      	ldr	r3, [pc, #48]	@ (80009f0 <SevenSegLEDsScan+0x8c>)
 80009c0:	fb83 3102 	smull	r3, r1, r3, r2
 80009c4:	17d3      	asrs	r3, r2, #31
 80009c6:	1ac9      	subs	r1, r1, r3
 80009c8:	460b      	mov	r3, r1
 80009ca:	005b      	lsls	r3, r3, #1
 80009cc:	440b      	add	r3, r1
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	1ad1      	subs	r1, r2, r3
 80009d2:	b2ca      	uxtb	r2, r1
 80009d4:	4b03      	ldr	r3, [pc, #12]	@ (80009e4 <SevenSegLEDsScan+0x80>)
 80009d6:	701a      	strb	r2, [r3, #0]
}
 80009d8:	bf00      	nop
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	200000ae 	.word	0x200000ae
 80009e4:	200000a0 	.word	0x200000a0
 80009e8:	2000000c 	.word	0x2000000c
 80009ec:	200000a4 	.word	0x200000a4
 80009f0:	2aaaaaab 	.word	0x2aaaaaab

080009f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009f8:	f000 fac0 	bl	8000f7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009fc:	f000 f818 	bl	8000a30 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a00:	f000 f8b4 	bl	8000b6c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000a04:	f000 f87c 	bl	8000b00 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000a08:	f001 ff5e 	bl	80028c8 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Led3x6Task */
  Led3x6TaskHandle = osThreadNew(Led3x6Run, NULL, &Led3x6Task_attributes);
 8000a0c:	4a05      	ldr	r2, [pc, #20]	@ (8000a24 <main+0x30>)
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4805      	ldr	r0, [pc, #20]	@ (8000a28 <main+0x34>)
 8000a12:	f001 ffa3 	bl	800295c <osThreadNew>
 8000a16:	4603      	mov	r3, r0
 8000a18:	4a04      	ldr	r2, [pc, #16]	@ (8000a2c <main+0x38>)
 8000a1a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000a1c:	f001 ff78 	bl	8002910 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a20:	bf00      	nop
 8000a22:	e7fd      	b.n	8000a20 <main+0x2c>
 8000a24:	08005480 	.word	0x08005480
 8000a28:	08000c71 	.word	0x08000c71
 8000a2c:	2000009c 	.word	0x2000009c

08000a30 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b094      	sub	sp, #80	@ 0x50
 8000a34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a36:	f107 0320 	add.w	r3, r7, #32
 8000a3a:	2230      	movs	r2, #48	@ 0x30
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	4618      	mov	r0, r3
 8000a40:	f004 fcc2 	bl	80053c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a44:	f107 030c 	add.w	r3, r7, #12
 8000a48:	2200      	movs	r2, #0
 8000a4a:	601a      	str	r2, [r3, #0]
 8000a4c:	605a      	str	r2, [r3, #4]
 8000a4e:	609a      	str	r2, [r3, #8]
 8000a50:	60da      	str	r2, [r3, #12]
 8000a52:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a54:	2300      	movs	r3, #0
 8000a56:	60bb      	str	r3, [r7, #8]
 8000a58:	4b27      	ldr	r3, [pc, #156]	@ (8000af8 <SystemClock_Config+0xc8>)
 8000a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a5c:	4a26      	ldr	r2, [pc, #152]	@ (8000af8 <SystemClock_Config+0xc8>)
 8000a5e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a62:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a64:	4b24      	ldr	r3, [pc, #144]	@ (8000af8 <SystemClock_Config+0xc8>)
 8000a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a68:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a6c:	60bb      	str	r3, [r7, #8]
 8000a6e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a70:	2300      	movs	r3, #0
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	4b21      	ldr	r3, [pc, #132]	@ (8000afc <SystemClock_Config+0xcc>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a20      	ldr	r2, [pc, #128]	@ (8000afc <SystemClock_Config+0xcc>)
 8000a7a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a7e:	6013      	str	r3, [r2, #0]
 8000a80:	4b1e      	ldr	r3, [pc, #120]	@ (8000afc <SystemClock_Config+0xcc>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a8c:	2302      	movs	r3, #2
 8000a8e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a90:	2301      	movs	r3, #1
 8000a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a94:	2310      	movs	r3, #16
 8000a96:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a98:	2302      	movs	r3, #2
 8000a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000aa0:	2308      	movs	r3, #8
 8000aa2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000aa4:	2364      	movs	r3, #100	@ 0x64
 8000aa6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000aac:	2304      	movs	r3, #4
 8000aae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ab0:	f107 0320 	add.w	r3, r7, #32
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f000 fd23 	bl	8001500 <HAL_RCC_OscConfig>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d001      	beq.n	8000ac4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000ac0:	f000 f903 	bl	8000cca <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ac4:	230f      	movs	r3, #15
 8000ac6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ac8:	2302      	movs	r3, #2
 8000aca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ad0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ad4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000ada:	f107 030c 	add.w	r3, r7, #12
 8000ade:	2103      	movs	r1, #3
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	f000 ff85 	bl	80019f0 <HAL_RCC_ClockConfig>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000aec:	f000 f8ed 	bl	8000cca <Error_Handler>
  }
}
 8000af0:	bf00      	nop
 8000af2:	3750      	adds	r7, #80	@ 0x50
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	40023800 	.word	0x40023800
 8000afc:	40007000 	.word	0x40007000

08000b00 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b04:	4b17      	ldr	r3, [pc, #92]	@ (8000b64 <MX_SPI1_Init+0x64>)
 8000b06:	4a18      	ldr	r2, [pc, #96]	@ (8000b68 <MX_SPI1_Init+0x68>)
 8000b08:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b0a:	4b16      	ldr	r3, [pc, #88]	@ (8000b64 <MX_SPI1_Init+0x64>)
 8000b0c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b10:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b12:	4b14      	ldr	r3, [pc, #80]	@ (8000b64 <MX_SPI1_Init+0x64>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b18:	4b12      	ldr	r3, [pc, #72]	@ (8000b64 <MX_SPI1_Init+0x64>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	@ (8000b64 <MX_SPI1_Init+0x64>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b24:	4b0f      	ldr	r3, [pc, #60]	@ (8000b64 <MX_SPI1_Init+0x64>)
 8000b26:	2200      	movs	r2, #0
 8000b28:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b2a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b64 <MX_SPI1_Init+0x64>)
 8000b2c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b30:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b32:	4b0c      	ldr	r3, [pc, #48]	@ (8000b64 <MX_SPI1_Init+0x64>)
 8000b34:	2218      	movs	r2, #24
 8000b36:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b38:	4b0a      	ldr	r3, [pc, #40]	@ (8000b64 <MX_SPI1_Init+0x64>)
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b3e:	4b09      	ldr	r3, [pc, #36]	@ (8000b64 <MX_SPI1_Init+0x64>)
 8000b40:	2200      	movs	r2, #0
 8000b42:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b44:	4b07      	ldr	r3, [pc, #28]	@ (8000b64 <MX_SPI1_Init+0x64>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b4a:	4b06      	ldr	r3, [pc, #24]	@ (8000b64 <MX_SPI1_Init+0x64>)
 8000b4c:	220a      	movs	r2, #10
 8000b4e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b50:	4804      	ldr	r0, [pc, #16]	@ (8000b64 <MX_SPI1_Init+0x64>)
 8000b52:	f001 f94b 	bl	8001dec <HAL_SPI_Init>
 8000b56:	4603      	mov	r3, r0
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d001      	beq.n	8000b60 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b5c:	f000 f8b5 	bl	8000cca <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b60:	bf00      	nop
 8000b62:	bd80      	pop	{r7, pc}
 8000b64:	20000044 	.word	0x20000044
 8000b68:	40013000 	.word	0x40013000

08000b6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b08a      	sub	sp, #40	@ 0x28
 8000b70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b72:	f107 0314 	add.w	r3, r7, #20
 8000b76:	2200      	movs	r2, #0
 8000b78:	601a      	str	r2, [r3, #0]
 8000b7a:	605a      	str	r2, [r3, #4]
 8000b7c:	609a      	str	r2, [r3, #8]
 8000b7e:	60da      	str	r2, [r3, #12]
 8000b80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	613b      	str	r3, [r7, #16]
 8000b86:	4b37      	ldr	r3, [pc, #220]	@ (8000c64 <MX_GPIO_Init+0xf8>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8a:	4a36      	ldr	r2, [pc, #216]	@ (8000c64 <MX_GPIO_Init+0xf8>)
 8000b8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b92:	4b34      	ldr	r3, [pc, #208]	@ (8000c64 <MX_GPIO_Init+0xf8>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b9a:	613b      	str	r3, [r7, #16]
 8000b9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	4b30      	ldr	r3, [pc, #192]	@ (8000c64 <MX_GPIO_Init+0xf8>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ba6:	4a2f      	ldr	r2, [pc, #188]	@ (8000c64 <MX_GPIO_Init+0xf8>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bae:	4b2d      	ldr	r3, [pc, #180]	@ (8000c64 <MX_GPIO_Init+0xf8>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60bb      	str	r3, [r7, #8]
 8000bbe:	4b29      	ldr	r3, [pc, #164]	@ (8000c64 <MX_GPIO_Init+0xf8>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc2:	4a28      	ldr	r2, [pc, #160]	@ (8000c64 <MX_GPIO_Init+0xf8>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bca:	4b26      	ldr	r3, [pc, #152]	@ (8000c64 <MX_GPIO_Init+0xf8>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	60bb      	str	r3, [r7, #8]
 8000bd4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	607b      	str	r3, [r7, #4]
 8000bda:	4b22      	ldr	r3, [pc, #136]	@ (8000c64 <MX_GPIO_Init+0xf8>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bde:	4a21      	ldr	r2, [pc, #132]	@ (8000c64 <MX_GPIO_Init+0xf8>)
 8000be0:	f043 0304 	orr.w	r3, r3, #4
 8000be4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be6:	4b1f      	ldr	r3, [pc, #124]	@ (8000c64 <MX_GPIO_Init+0xf8>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bea:	f003 0304 	and.w	r3, r3, #4
 8000bee:	607b      	str	r3, [r7, #4]
 8000bf0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Latch_SPI1_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f244 31c0 	movw	r1, #17344	@ 0x43c0
 8000bf8:	481b      	ldr	r0, [pc, #108]	@ (8000c68 <MX_GPIO_Init+0xfc>)
 8000bfa:	f000 fc67 	bl	80014cc <HAL_GPIO_WritePin>
                          |OUT3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 8000bfe:	2200      	movs	r2, #0
 8000c00:	2180      	movs	r1, #128	@ 0x80
 8000c02:	481a      	ldr	r0, [pc, #104]	@ (8000c6c <MX_GPIO_Init+0x100>)
 8000c04:	f000 fc62 	bl	80014cc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8000c08:	231f      	movs	r3, #31
 8000c0a:	617b      	str	r3, [r7, #20]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c10:	2302      	movs	r3, #2
 8000c12:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4813      	ldr	r0, [pc, #76]	@ (8000c68 <MX_GPIO_Init+0xfc>)
 8000c1c:	f000 fad2 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pins : Latch_SPI1_Pin OUT0_Pin OUT1_Pin OUT2_Pin
                           OUT3_Pin */
  GPIO_InitStruct.Pin = Latch_SPI1_Pin|OUT0_Pin|OUT1_Pin|OUT2_Pin
 8000c20:	f244 33c0 	movw	r3, #17344	@ 0x43c0
 8000c24:	617b      	str	r3, [r7, #20]
                          |OUT3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c26:	2301      	movs	r3, #1
 8000c28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c32:	f107 0314 	add.w	r3, r7, #20
 8000c36:	4619      	mov	r1, r3
 8000c38:	480b      	ldr	r0, [pc, #44]	@ (8000c68 <MX_GPIO_Init+0xfc>)
 8000c3a:	f000 fac3 	bl	80011c4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OE_Pin */
  GPIO_InitStruct.Pin = OE_Pin;
 8000c3e:	2380      	movs	r3, #128	@ 0x80
 8000c40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OE_GPIO_Port, &GPIO_InitStruct);
 8000c4e:	f107 0314 	add.w	r3, r7, #20
 8000c52:	4619      	mov	r1, r3
 8000c54:	4805      	ldr	r0, [pc, #20]	@ (8000c6c <MX_GPIO_Init+0x100>)
 8000c56:	f000 fab5 	bl	80011c4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c5a:	bf00      	nop
 8000c5c:	3728      	adds	r7, #40	@ 0x28
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	bf00      	nop
 8000c64:	40023800 	.word	0x40023800
 8000c68:	40020400 	.word	0x40020400
 8000c6c:	40020800 	.word	0x40020800

08000c70 <Led3x6Run>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Led3x6Run */
void Led3x6Run(void *argument)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b084      	sub	sp, #16
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */

  /* Infinite loop */

	uint8_t clear_buffer[5] = {0b11111111,0b11111111,0b11111111,0b11111111,0b11111111};
 8000c78:	4a0b      	ldr	r2, [pc, #44]	@ (8000ca8 <Led3x6Run+0x38>)
 8000c7a:	f107 0308 	add.w	r3, r7, #8
 8000c7e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000c82:	6018      	str	r0, [r3, #0]
 8000c84:	3304      	adds	r3, #4
 8000c86:	7019      	strb	r1, [r3, #0]
  for(;;)
  {
	  SevenSegLEDsScan();
 8000c88:	f7ff fe6c 	bl	8000964 <SevenSegLEDsScan>
	  osDelay(1);
 8000c8c:	2001      	movs	r0, #1
 8000c8e:	f001 fef7 	bl	8002a80 <osDelay>
	  ShiftOut_SPI(clear_buffer, 5);
 8000c92:	f107 0308 	add.w	r3, r7, #8
 8000c96:	2105      	movs	r1, #5
 8000c98:	4618      	mov	r0, r3
 8000c9a:	f7ff fc19 	bl	80004d0 <ShiftOut_SPI>

//	  SevenSegLEDsScan();
	  osDelay(1);
 8000c9e:	2001      	movs	r0, #1
 8000ca0:	f001 feee 	bl	8002a80 <osDelay>
	  SevenSegLEDsScan();
 8000ca4:	bf00      	nop
 8000ca6:	e7ef      	b.n	8000c88 <Led3x6Run+0x18>
 8000ca8:	08005460 	.word	0x08005460

08000cac <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cbc:	d101      	bne.n	8000cc2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cbe:	f000 f97f 	bl	8000fc0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}

08000cca <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cca:	b480      	push	{r7}
 8000ccc:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000cce:	b672      	cpsid	i
}
 8000cd0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cd2:	bf00      	nop
 8000cd4:	e7fd      	b.n	8000cd2 <Error_Handler+0x8>
	...

08000cd8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	4b12      	ldr	r3, [pc, #72]	@ (8000d2c <HAL_MspInit+0x54>)
 8000ce4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ce6:	4a11      	ldr	r2, [pc, #68]	@ (8000d2c <HAL_MspInit+0x54>)
 8000ce8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cec:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cee:	4b0f      	ldr	r3, [pc, #60]	@ (8000d2c <HAL_MspInit+0x54>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cf2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	603b      	str	r3, [r7, #0]
 8000cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8000d2c <HAL_MspInit+0x54>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d02:	4a0a      	ldr	r2, [pc, #40]	@ (8000d2c <HAL_MspInit+0x54>)
 8000d04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d0a:	4b08      	ldr	r3, [pc, #32]	@ (8000d2c <HAL_MspInit+0x54>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	210f      	movs	r1, #15
 8000d1a:	f06f 0001 	mvn.w	r0, #1
 8000d1e:	f000 fa27 	bl	8001170 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d22:	bf00      	nop
 8000d24:	3708      	adds	r7, #8
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40023800 	.word	0x40023800

08000d30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b08a      	sub	sp, #40	@ 0x28
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0314 	add.w	r3, r7, #20
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a19      	ldr	r2, [pc, #100]	@ (8000db4 <HAL_SPI_MspInit+0x84>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d12b      	bne.n	8000daa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	4b18      	ldr	r3, [pc, #96]	@ (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5a:	4a17      	ldr	r2, [pc, #92]	@ (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d5c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d60:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d62:	4b15      	ldr	r3, [pc, #84]	@ (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d66:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	4b11      	ldr	r3, [pc, #68]	@ (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	4a10      	ldr	r2, [pc, #64]	@ (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000db8 <HAL_SPI_MspInit+0x88>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000d8a:	23a0      	movs	r3, #160	@ 0xa0
 8000d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d92:	2300      	movs	r3, #0
 8000d94:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d96:	2303      	movs	r3, #3
 8000d98:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d9a:	2305      	movs	r3, #5
 8000d9c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d9e:	f107 0314 	add.w	r3, r7, #20
 8000da2:	4619      	mov	r1, r3
 8000da4:	4805      	ldr	r0, [pc, #20]	@ (8000dbc <HAL_SPI_MspInit+0x8c>)
 8000da6:	f000 fa0d 	bl	80011c4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000daa:	bf00      	nop
 8000dac:	3728      	adds	r7, #40	@ 0x28
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	40013000 	.word	0x40013000
 8000db8:	40023800 	.word	0x40023800
 8000dbc:	40020000 	.word	0x40020000

08000dc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08e      	sub	sp, #56	@ 0x38
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	60fb      	str	r3, [r7, #12]
 8000dd4:	4b34      	ldr	r3, [pc, #208]	@ (8000ea8 <HAL_InitTick+0xe8>)
 8000dd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd8:	4a33      	ldr	r2, [pc, #204]	@ (8000ea8 <HAL_InitTick+0xe8>)
 8000dda:	f043 0301 	orr.w	r3, r3, #1
 8000dde:	6413      	str	r3, [r2, #64]	@ 0x40
 8000de0:	4b31      	ldr	r3, [pc, #196]	@ (8000ea8 <HAL_InitTick+0xe8>)
 8000de2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	60fb      	str	r3, [r7, #12]
 8000dea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000dec:	f107 0210 	add.w	r2, r7, #16
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4611      	mov	r1, r2
 8000df6:	4618      	mov	r0, r3
 8000df8:	f000 ffc6 	bl	8001d88 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000dfc:	6a3b      	ldr	r3, [r7, #32]
 8000dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d103      	bne.n	8000e0e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000e06:	f000 ffab 	bl	8001d60 <HAL_RCC_GetPCLK1Freq>
 8000e0a:	6378      	str	r0, [r7, #52]	@ 0x34
 8000e0c:	e004      	b.n	8000e18 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000e0e:	f000 ffa7 	bl	8001d60 <HAL_RCC_GetPCLK1Freq>
 8000e12:	4603      	mov	r3, r0
 8000e14:	005b      	lsls	r3, r3, #1
 8000e16:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000e18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000e1a:	4a24      	ldr	r2, [pc, #144]	@ (8000eac <HAL_InitTick+0xec>)
 8000e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8000e20:	0c9b      	lsrs	r3, r3, #18
 8000e22:	3b01      	subs	r3, #1
 8000e24:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8000e26:	4b22      	ldr	r3, [pc, #136]	@ (8000eb0 <HAL_InitTick+0xf0>)
 8000e28:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e2c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 8000e2e:	4b20      	ldr	r3, [pc, #128]	@ (8000eb0 <HAL_InitTick+0xf0>)
 8000e30:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000e34:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8000e36:	4a1e      	ldr	r2, [pc, #120]	@ (8000eb0 <HAL_InitTick+0xf0>)
 8000e38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000e3a:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 8000e3c:	4b1c      	ldr	r3, [pc, #112]	@ (8000eb0 <HAL_InitTick+0xf0>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e42:	4b1b      	ldr	r3, [pc, #108]	@ (8000eb0 <HAL_InitTick+0xf0>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e48:	4b19      	ldr	r3, [pc, #100]	@ (8000eb0 <HAL_InitTick+0xf0>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 8000e4e:	4818      	ldr	r0, [pc, #96]	@ (8000eb0 <HAL_InitTick+0xf0>)
 8000e50:	f001 fa82 	bl	8002358 <HAL_TIM_Base_Init>
 8000e54:	4603      	mov	r3, r0
 8000e56:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8000e5a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d11b      	bne.n	8000e9a <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 8000e62:	4813      	ldr	r0, [pc, #76]	@ (8000eb0 <HAL_InitTick+0xf0>)
 8000e64:	f001 fad2 	bl	800240c <HAL_TIM_Base_Start_IT>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8000e6e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d111      	bne.n	8000e9a <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000e76:	201c      	movs	r0, #28
 8000e78:	f000 f996 	bl	80011a8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	2b0f      	cmp	r3, #15
 8000e80:	d808      	bhi.n	8000e94 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 8000e82:	2200      	movs	r2, #0
 8000e84:	6879      	ldr	r1, [r7, #4]
 8000e86:	201c      	movs	r0, #28
 8000e88:	f000 f972 	bl	8001170 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e8c:	4a09      	ldr	r2, [pc, #36]	@ (8000eb4 <HAL_InitTick+0xf4>)
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	6013      	str	r3, [r2, #0]
 8000e92:	e002      	b.n	8000e9a <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8000e94:	2301      	movs	r3, #1
 8000e96:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000e9a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3738      	adds	r7, #56	@ 0x38
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}
 8000ea6:	bf00      	nop
 8000ea8:	40023800 	.word	0x40023800
 8000eac:	431bde83 	.word	0x431bde83
 8000eb0:	200000b4 	.word	0x200000b4
 8000eb4:	2000001c 	.word	0x2000001c

08000eb8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ebc:	bf00      	nop
 8000ebe:	e7fd      	b.n	8000ebc <NMI_Handler+0x4>

08000ec0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ec4:	bf00      	nop
 8000ec6:	e7fd      	b.n	8000ec4 <HardFault_Handler+0x4>

08000ec8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ecc:	bf00      	nop
 8000ece:	e7fd      	b.n	8000ecc <MemManage_Handler+0x4>

08000ed0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <BusFault_Handler+0x4>

08000ed8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000edc:	bf00      	nop
 8000ede:	e7fd      	b.n	8000edc <UsageFault_Handler+0x4>

08000ee0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ee4:	bf00      	nop
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ef4:	4802      	ldr	r0, [pc, #8]	@ (8000f00 <TIM2_IRQHandler+0x10>)
 8000ef6:	f001 faeb 	bl	80024d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000efa:	bf00      	nop
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200000b4 	.word	0x200000b4

08000f04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f08:	4b06      	ldr	r3, [pc, #24]	@ (8000f24 <SystemInit+0x20>)
 8000f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f0e:	4a05      	ldr	r2, [pc, #20]	@ (8000f24 <SystemInit+0x20>)
 8000f10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f18:	bf00      	nop
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f60 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f2c:	f7ff ffea 	bl	8000f04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f30:	480c      	ldr	r0, [pc, #48]	@ (8000f64 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f32:	490d      	ldr	r1, [pc, #52]	@ (8000f68 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f34:	4a0d      	ldr	r2, [pc, #52]	@ (8000f6c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f38:	e002      	b.n	8000f40 <LoopCopyDataInit>

08000f3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3e:	3304      	adds	r3, #4

08000f40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f44:	d3f9      	bcc.n	8000f3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f46:	4a0a      	ldr	r2, [pc, #40]	@ (8000f70 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f48:	4c0a      	ldr	r4, [pc, #40]	@ (8000f74 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f4c:	e001      	b.n	8000f52 <LoopFillZerobss>

08000f4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f50:	3204      	adds	r2, #4

08000f52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f54:	d3fb      	bcc.n	8000f4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f56:	f004 fa3f 	bl	80053d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f5a:	f7ff fd4b 	bl	80009f4 <main>
  bx  lr    
 8000f5e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f68:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8000f6c:	080054cc 	.word	0x080054cc
  ldr r2, =_sbss
 8000f70:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8000f74:	20004a50 	.word	0x20004a50

08000f78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f78:	e7fe      	b.n	8000f78 <ADC_IRQHandler>
	...

08000f7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f80:	4b0e      	ldr	r3, [pc, #56]	@ (8000fbc <HAL_Init+0x40>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0d      	ldr	r2, [pc, #52]	@ (8000fbc <HAL_Init+0x40>)
 8000f86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f8c:	4b0b      	ldr	r3, [pc, #44]	@ (8000fbc <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a0a      	ldr	r2, [pc, #40]	@ (8000fbc <HAL_Init+0x40>)
 8000f92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f98:	4b08      	ldr	r3, [pc, #32]	@ (8000fbc <HAL_Init+0x40>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	4a07      	ldr	r2, [pc, #28]	@ (8000fbc <HAL_Init+0x40>)
 8000f9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000fa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fa4:	2003      	movs	r0, #3
 8000fa6:	f000 f8d8 	bl	800115a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000faa:	200f      	movs	r0, #15
 8000fac:	f7ff ff08 	bl	8000dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fb0:	f7ff fe92 	bl	8000cd8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fb4:	2300      	movs	r3, #0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	40023c00 	.word	0x40023c00

08000fc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fc4:	4b06      	ldr	r3, [pc, #24]	@ (8000fe0 <HAL_IncTick+0x20>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	4b06      	ldr	r3, [pc, #24]	@ (8000fe4 <HAL_IncTick+0x24>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4413      	add	r3, r2
 8000fd0:	4a04      	ldr	r2, [pc, #16]	@ (8000fe4 <HAL_IncTick+0x24>)
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr
 8000fde:	bf00      	nop
 8000fe0:	20000020 	.word	0x20000020
 8000fe4:	200000fc 	.word	0x200000fc

08000fe8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	af00      	add	r7, sp, #0
  return uwTick;
 8000fec:	4b03      	ldr	r3, [pc, #12]	@ (8000ffc <HAL_GetTick+0x14>)
 8000fee:	681b      	ldr	r3, [r3, #0]
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	200000fc 	.word	0x200000fc

08001000 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001000:	b480      	push	{r7}
 8001002:	b085      	sub	sp, #20
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	f003 0307 	and.w	r3, r3, #7
 800100e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001010:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <__NVIC_SetPriorityGrouping+0x44>)
 8001012:	68db      	ldr	r3, [r3, #12]
 8001014:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001016:	68ba      	ldr	r2, [r7, #8]
 8001018:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800101c:	4013      	ands	r3, r2
 800101e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001020:	68fb      	ldr	r3, [r7, #12]
 8001022:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001028:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800102c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001030:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001032:	4a04      	ldr	r2, [pc, #16]	@ (8001044 <__NVIC_SetPriorityGrouping+0x44>)
 8001034:	68bb      	ldr	r3, [r7, #8]
 8001036:	60d3      	str	r3, [r2, #12]
}
 8001038:	bf00      	nop
 800103a:	3714      	adds	r7, #20
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr
 8001044:	e000ed00 	.word	0xe000ed00

08001048 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001048:	b480      	push	{r7}
 800104a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800104c:	4b04      	ldr	r3, [pc, #16]	@ (8001060 <__NVIC_GetPriorityGrouping+0x18>)
 800104e:	68db      	ldr	r3, [r3, #12]
 8001050:	0a1b      	lsrs	r3, r3, #8
 8001052:	f003 0307 	and.w	r3, r3, #7
}
 8001056:	4618      	mov	r0, r3
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001064:	b480      	push	{r7}
 8001066:	b083      	sub	sp, #12
 8001068:	af00      	add	r7, sp, #0
 800106a:	4603      	mov	r3, r0
 800106c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800106e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001072:	2b00      	cmp	r3, #0
 8001074:	db0b      	blt.n	800108e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001076:	79fb      	ldrb	r3, [r7, #7]
 8001078:	f003 021f 	and.w	r2, r3, #31
 800107c:	4907      	ldr	r1, [pc, #28]	@ (800109c <__NVIC_EnableIRQ+0x38>)
 800107e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001082:	095b      	lsrs	r3, r3, #5
 8001084:	2001      	movs	r0, #1
 8001086:	fa00 f202 	lsl.w	r2, r0, r2
 800108a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800108e:	bf00      	nop
 8001090:	370c      	adds	r7, #12
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000e100 	.word	0xe000e100

080010a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	4603      	mov	r3, r0
 80010a8:	6039      	str	r1, [r7, #0]
 80010aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	db0a      	blt.n	80010ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	b2da      	uxtb	r2, r3
 80010b8:	490c      	ldr	r1, [pc, #48]	@ (80010ec <__NVIC_SetPriority+0x4c>)
 80010ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010be:	0112      	lsls	r2, r2, #4
 80010c0:	b2d2      	uxtb	r2, r2
 80010c2:	440b      	add	r3, r1
 80010c4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010c8:	e00a      	b.n	80010e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ca:	683b      	ldr	r3, [r7, #0]
 80010cc:	b2da      	uxtb	r2, r3
 80010ce:	4908      	ldr	r1, [pc, #32]	@ (80010f0 <__NVIC_SetPriority+0x50>)
 80010d0:	79fb      	ldrb	r3, [r7, #7]
 80010d2:	f003 030f 	and.w	r3, r3, #15
 80010d6:	3b04      	subs	r3, #4
 80010d8:	0112      	lsls	r2, r2, #4
 80010da:	b2d2      	uxtb	r2, r2
 80010dc:	440b      	add	r3, r1
 80010de:	761a      	strb	r2, [r3, #24]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr
 80010ec:	e000e100 	.word	0xe000e100
 80010f0:	e000ed00 	.word	0xe000ed00

080010f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b089      	sub	sp, #36	@ 0x24
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	60f8      	str	r0, [r7, #12]
 80010fc:	60b9      	str	r1, [r7, #8]
 80010fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001108:	69fb      	ldr	r3, [r7, #28]
 800110a:	f1c3 0307 	rsb	r3, r3, #7
 800110e:	2b04      	cmp	r3, #4
 8001110:	bf28      	it	cs
 8001112:	2304      	movcs	r3, #4
 8001114:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001116:	69fb      	ldr	r3, [r7, #28]
 8001118:	3304      	adds	r3, #4
 800111a:	2b06      	cmp	r3, #6
 800111c:	d902      	bls.n	8001124 <NVIC_EncodePriority+0x30>
 800111e:	69fb      	ldr	r3, [r7, #28]
 8001120:	3b03      	subs	r3, #3
 8001122:	e000      	b.n	8001126 <NVIC_EncodePriority+0x32>
 8001124:	2300      	movs	r3, #0
 8001126:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001128:	f04f 32ff 	mov.w	r2, #4294967295
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	fa02 f303 	lsl.w	r3, r2, r3
 8001132:	43da      	mvns	r2, r3
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	401a      	ands	r2, r3
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800113c:	f04f 31ff 	mov.w	r1, #4294967295
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	fa01 f303 	lsl.w	r3, r1, r3
 8001146:	43d9      	mvns	r1, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800114c:	4313      	orrs	r3, r2
         );
}
 800114e:	4618      	mov	r0, r3
 8001150:	3724      	adds	r7, #36	@ 0x24
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr

0800115a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800115a:	b580      	push	{r7, lr}
 800115c:	b082      	sub	sp, #8
 800115e:	af00      	add	r7, sp, #0
 8001160:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	f7ff ff4c 	bl	8001000 <__NVIC_SetPriorityGrouping>
}
 8001168:	bf00      	nop
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
 800117c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800117e:	2300      	movs	r3, #0
 8001180:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001182:	f7ff ff61 	bl	8001048 <__NVIC_GetPriorityGrouping>
 8001186:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	68b9      	ldr	r1, [r7, #8]
 800118c:	6978      	ldr	r0, [r7, #20]
 800118e:	f7ff ffb1 	bl	80010f4 <NVIC_EncodePriority>
 8001192:	4602      	mov	r2, r0
 8001194:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001198:	4611      	mov	r1, r2
 800119a:	4618      	mov	r0, r3
 800119c:	f7ff ff80 	bl	80010a0 <__NVIC_SetPriority>
}
 80011a0:	bf00      	nop
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}

080011a8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	4603      	mov	r3, r0
 80011b0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011b6:	4618      	mov	r0, r3
 80011b8:	f7ff ff54 	bl	8001064 <__NVIC_EnableIRQ>
}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b089      	sub	sp, #36	@ 0x24
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
 80011cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80011d2:	2300      	movs	r3, #0
 80011d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80011d6:	2300      	movs	r3, #0
 80011d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011da:	2300      	movs	r3, #0
 80011dc:	61fb      	str	r3, [r7, #28]
 80011de:	e159      	b.n	8001494 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80011e0:	2201      	movs	r2, #1
 80011e2:	69fb      	ldr	r3, [r7, #28]
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	697a      	ldr	r2, [r7, #20]
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80011f4:	693a      	ldr	r2, [r7, #16]
 80011f6:	697b      	ldr	r3, [r7, #20]
 80011f8:	429a      	cmp	r2, r3
 80011fa:	f040 8148 	bne.w	800148e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	685b      	ldr	r3, [r3, #4]
 8001202:	f003 0303 	and.w	r3, r3, #3
 8001206:	2b01      	cmp	r3, #1
 8001208:	d005      	beq.n	8001216 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001212:	2b02      	cmp	r3, #2
 8001214:	d130      	bne.n	8001278 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	689b      	ldr	r3, [r3, #8]
 800121a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800121c:	69fb      	ldr	r3, [r7, #28]
 800121e:	005b      	lsls	r3, r3, #1
 8001220:	2203      	movs	r2, #3
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	4013      	ands	r3, r2
 800122c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	68da      	ldr	r2, [r3, #12]
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	005b      	lsls	r3, r3, #1
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	69ba      	ldr	r2, [r7, #24]
 800123c:	4313      	orrs	r3, r2
 800123e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	69ba      	ldr	r2, [r7, #24]
 8001244:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685b      	ldr	r3, [r3, #4]
 800124a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800124c:	2201      	movs	r2, #1
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	091b      	lsrs	r3, r3, #4
 8001262:	f003 0201 	and.w	r2, r3, #1
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f003 0303 	and.w	r3, r3, #3
 8001280:	2b03      	cmp	r3, #3
 8001282:	d017      	beq.n	80012b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	68db      	ldr	r3, [r3, #12]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800128a:	69fb      	ldr	r3, [r7, #28]
 800128c:	005b      	lsls	r3, r3, #1
 800128e:	2203      	movs	r2, #3
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	43db      	mvns	r3, r3
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	4013      	ands	r3, r2
 800129a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0303 	and.w	r3, r3, #3
 80012bc:	2b02      	cmp	r3, #2
 80012be:	d123      	bne.n	8001308 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	08da      	lsrs	r2, r3, #3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3208      	adds	r2, #8
 80012c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80012ce:	69fb      	ldr	r3, [r7, #28]
 80012d0:	f003 0307 	and.w	r3, r3, #7
 80012d4:	009b      	lsls	r3, r3, #2
 80012d6:	220f      	movs	r2, #15
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	69ba      	ldr	r2, [r7, #24]
 80012e0:	4013      	ands	r3, r2
 80012e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	691a      	ldr	r2, [r3, #16]
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f003 0307 	and.w	r3, r3, #7
 80012ee:	009b      	lsls	r3, r3, #2
 80012f0:	fa02 f303 	lsl.w	r3, r2, r3
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	4313      	orrs	r3, r2
 80012f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80012fa:	69fb      	ldr	r3, [r7, #28]
 80012fc:	08da      	lsrs	r2, r3, #3
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	3208      	adds	r2, #8
 8001302:	69b9      	ldr	r1, [r7, #24]
 8001304:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	005b      	lsls	r3, r3, #1
 8001312:	2203      	movs	r2, #3
 8001314:	fa02 f303 	lsl.w	r3, r2, r3
 8001318:	43db      	mvns	r3, r3
 800131a:	69ba      	ldr	r2, [r7, #24]
 800131c:	4013      	ands	r3, r2
 800131e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 0203 	and.w	r2, r3, #3
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	005b      	lsls	r3, r3, #1
 800132c:	fa02 f303 	lsl.w	r3, r2, r3
 8001330:	69ba      	ldr	r2, [r7, #24]
 8001332:	4313      	orrs	r3, r2
 8001334:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	685b      	ldr	r3, [r3, #4]
 8001340:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001344:	2b00      	cmp	r3, #0
 8001346:	f000 80a2 	beq.w	800148e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800134a:	2300      	movs	r3, #0
 800134c:	60fb      	str	r3, [r7, #12]
 800134e:	4b57      	ldr	r3, [pc, #348]	@ (80014ac <HAL_GPIO_Init+0x2e8>)
 8001350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001352:	4a56      	ldr	r2, [pc, #344]	@ (80014ac <HAL_GPIO_Init+0x2e8>)
 8001354:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001358:	6453      	str	r3, [r2, #68]	@ 0x44
 800135a:	4b54      	ldr	r3, [pc, #336]	@ (80014ac <HAL_GPIO_Init+0x2e8>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800135e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001366:	4a52      	ldr	r2, [pc, #328]	@ (80014b0 <HAL_GPIO_Init+0x2ec>)
 8001368:	69fb      	ldr	r3, [r7, #28]
 800136a:	089b      	lsrs	r3, r3, #2
 800136c:	3302      	adds	r3, #2
 800136e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	f003 0303 	and.w	r3, r3, #3
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	220f      	movs	r2, #15
 800137e:	fa02 f303 	lsl.w	r3, r2, r3
 8001382:	43db      	mvns	r3, r3
 8001384:	69ba      	ldr	r2, [r7, #24]
 8001386:	4013      	ands	r3, r2
 8001388:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4a49      	ldr	r2, [pc, #292]	@ (80014b4 <HAL_GPIO_Init+0x2f0>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d019      	beq.n	80013c6 <HAL_GPIO_Init+0x202>
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	4a48      	ldr	r2, [pc, #288]	@ (80014b8 <HAL_GPIO_Init+0x2f4>)
 8001396:	4293      	cmp	r3, r2
 8001398:	d013      	beq.n	80013c2 <HAL_GPIO_Init+0x1fe>
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4a47      	ldr	r2, [pc, #284]	@ (80014bc <HAL_GPIO_Init+0x2f8>)
 800139e:	4293      	cmp	r3, r2
 80013a0:	d00d      	beq.n	80013be <HAL_GPIO_Init+0x1fa>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	4a46      	ldr	r2, [pc, #280]	@ (80014c0 <HAL_GPIO_Init+0x2fc>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d007      	beq.n	80013ba <HAL_GPIO_Init+0x1f6>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	4a45      	ldr	r2, [pc, #276]	@ (80014c4 <HAL_GPIO_Init+0x300>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d101      	bne.n	80013b6 <HAL_GPIO_Init+0x1f2>
 80013b2:	2304      	movs	r3, #4
 80013b4:	e008      	b.n	80013c8 <HAL_GPIO_Init+0x204>
 80013b6:	2307      	movs	r3, #7
 80013b8:	e006      	b.n	80013c8 <HAL_GPIO_Init+0x204>
 80013ba:	2303      	movs	r3, #3
 80013bc:	e004      	b.n	80013c8 <HAL_GPIO_Init+0x204>
 80013be:	2302      	movs	r3, #2
 80013c0:	e002      	b.n	80013c8 <HAL_GPIO_Init+0x204>
 80013c2:	2301      	movs	r3, #1
 80013c4:	e000      	b.n	80013c8 <HAL_GPIO_Init+0x204>
 80013c6:	2300      	movs	r3, #0
 80013c8:	69fa      	ldr	r2, [r7, #28]
 80013ca:	f002 0203 	and.w	r2, r2, #3
 80013ce:	0092      	lsls	r2, r2, #2
 80013d0:	4093      	lsls	r3, r2
 80013d2:	69ba      	ldr	r2, [r7, #24]
 80013d4:	4313      	orrs	r3, r2
 80013d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013d8:	4935      	ldr	r1, [pc, #212]	@ (80014b0 <HAL_GPIO_Init+0x2ec>)
 80013da:	69fb      	ldr	r3, [r7, #28]
 80013dc:	089b      	lsrs	r3, r3, #2
 80013de:	3302      	adds	r3, #2
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013e6:	4b38      	ldr	r3, [pc, #224]	@ (80014c8 <HAL_GPIO_Init+0x304>)
 80013e8:	689b      	ldr	r3, [r3, #8]
 80013ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	43db      	mvns	r3, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4013      	ands	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d003      	beq.n	800140a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001402:	69ba      	ldr	r2, [r7, #24]
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	4313      	orrs	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800140a:	4a2f      	ldr	r2, [pc, #188]	@ (80014c8 <HAL_GPIO_Init+0x304>)
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001410:	4b2d      	ldr	r3, [pc, #180]	@ (80014c8 <HAL_GPIO_Init+0x304>)
 8001412:	68db      	ldr	r3, [r3, #12]
 8001414:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001428:	2b00      	cmp	r3, #0
 800142a:	d003      	beq.n	8001434 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	4313      	orrs	r3, r2
 8001432:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001434:	4a24      	ldr	r2, [pc, #144]	@ (80014c8 <HAL_GPIO_Init+0x304>)
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800143a:	4b23      	ldr	r3, [pc, #140]	@ (80014c8 <HAL_GPIO_Init+0x304>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	43db      	mvns	r3, r3
 8001444:	69ba      	ldr	r2, [r7, #24]
 8001446:	4013      	ands	r3, r2
 8001448:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001452:	2b00      	cmp	r3, #0
 8001454:	d003      	beq.n	800145e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001456:	69ba      	ldr	r2, [r7, #24]
 8001458:	693b      	ldr	r3, [r7, #16]
 800145a:	4313      	orrs	r3, r2
 800145c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800145e:	4a1a      	ldr	r2, [pc, #104]	@ (80014c8 <HAL_GPIO_Init+0x304>)
 8001460:	69bb      	ldr	r3, [r7, #24]
 8001462:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001464:	4b18      	ldr	r3, [pc, #96]	@ (80014c8 <HAL_GPIO_Init+0x304>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	43db      	mvns	r3, r3
 800146e:	69ba      	ldr	r2, [r7, #24]
 8001470:	4013      	ands	r3, r2
 8001472:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d003      	beq.n	8001488 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	4313      	orrs	r3, r2
 8001486:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001488:	4a0f      	ldr	r2, [pc, #60]	@ (80014c8 <HAL_GPIO_Init+0x304>)
 800148a:	69bb      	ldr	r3, [r7, #24]
 800148c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	3301      	adds	r3, #1
 8001492:	61fb      	str	r3, [r7, #28]
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	2b0f      	cmp	r3, #15
 8001498:	f67f aea2 	bls.w	80011e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800149c:	bf00      	nop
 800149e:	bf00      	nop
 80014a0:	3724      	adds	r7, #36	@ 0x24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a8:	4770      	bx	lr
 80014aa:	bf00      	nop
 80014ac:	40023800 	.word	0x40023800
 80014b0:	40013800 	.word	0x40013800
 80014b4:	40020000 	.word	0x40020000
 80014b8:	40020400 	.word	0x40020400
 80014bc:	40020800 	.word	0x40020800
 80014c0:	40020c00 	.word	0x40020c00
 80014c4:	40021000 	.word	0x40021000
 80014c8:	40013c00 	.word	0x40013c00

080014cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	460b      	mov	r3, r1
 80014d6:	807b      	strh	r3, [r7, #2]
 80014d8:	4613      	mov	r3, r2
 80014da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014dc:	787b      	ldrb	r3, [r7, #1]
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d003      	beq.n	80014ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014e2:	887a      	ldrh	r2, [r7, #2]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014e8:	e003      	b.n	80014f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014ea:	887b      	ldrh	r3, [r7, #2]
 80014ec:	041a      	lsls	r2, r3, #16
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	619a      	str	r2, [r3, #24]
}
 80014f2:	bf00      	nop
 80014f4:	370c      	adds	r7, #12
 80014f6:	46bd      	mov	sp, r7
 80014f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fc:	4770      	bx	lr
	...

08001500 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b086      	sub	sp, #24
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e267      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 0301 	and.w	r3, r3, #1
 800151a:	2b00      	cmp	r3, #0
 800151c:	d075      	beq.n	800160a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800151e:	4b88      	ldr	r3, [pc, #544]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 030c 	and.w	r3, r3, #12
 8001526:	2b04      	cmp	r3, #4
 8001528:	d00c      	beq.n	8001544 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800152a:	4b85      	ldr	r3, [pc, #532]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 800152c:	689b      	ldr	r3, [r3, #8]
 800152e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001532:	2b08      	cmp	r3, #8
 8001534:	d112      	bne.n	800155c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001536:	4b82      	ldr	r3, [pc, #520]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800153e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001542:	d10b      	bne.n	800155c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001544:	4b7e      	ldr	r3, [pc, #504]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d05b      	beq.n	8001608 <HAL_RCC_OscConfig+0x108>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d157      	bne.n	8001608 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e242      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001564:	d106      	bne.n	8001574 <HAL_RCC_OscConfig+0x74>
 8001566:	4b76      	ldr	r3, [pc, #472]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4a75      	ldr	r2, [pc, #468]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 800156c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001570:	6013      	str	r3, [r2, #0]
 8001572:	e01d      	b.n	80015b0 <HAL_RCC_OscConfig+0xb0>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800157c:	d10c      	bne.n	8001598 <HAL_RCC_OscConfig+0x98>
 800157e:	4b70      	ldr	r3, [pc, #448]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	4a6f      	ldr	r2, [pc, #444]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001584:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001588:	6013      	str	r3, [r2, #0]
 800158a:	4b6d      	ldr	r3, [pc, #436]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a6c      	ldr	r2, [pc, #432]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001590:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001594:	6013      	str	r3, [r2, #0]
 8001596:	e00b      	b.n	80015b0 <HAL_RCC_OscConfig+0xb0>
 8001598:	4b69      	ldr	r3, [pc, #420]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	4a68      	ldr	r2, [pc, #416]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 800159e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80015a2:	6013      	str	r3, [r2, #0]
 80015a4:	4b66      	ldr	r3, [pc, #408]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a65      	ldr	r2, [pc, #404]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 80015aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80015ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d013      	beq.n	80015e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015b8:	f7ff fd16 	bl	8000fe8 <HAL_GetTick>
 80015bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015be:	e008      	b.n	80015d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015c0:	f7ff fd12 	bl	8000fe8 <HAL_GetTick>
 80015c4:	4602      	mov	r2, r0
 80015c6:	693b      	ldr	r3, [r7, #16]
 80015c8:	1ad3      	subs	r3, r2, r3
 80015ca:	2b64      	cmp	r3, #100	@ 0x64
 80015cc:	d901      	bls.n	80015d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80015ce:	2303      	movs	r3, #3
 80015d0:	e207      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015d2:	4b5b      	ldr	r3, [pc, #364]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d0f0      	beq.n	80015c0 <HAL_RCC_OscConfig+0xc0>
 80015de:	e014      	b.n	800160a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015e0:	f7ff fd02 	bl	8000fe8 <HAL_GetTick>
 80015e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015e6:	e008      	b.n	80015fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80015e8:	f7ff fcfe 	bl	8000fe8 <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	2b64      	cmp	r3, #100	@ 0x64
 80015f4:	d901      	bls.n	80015fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80015f6:	2303      	movs	r3, #3
 80015f8:	e1f3      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015fa:	4b51      	ldr	r3, [pc, #324]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d1f0      	bne.n	80015e8 <HAL_RCC_OscConfig+0xe8>
 8001606:	e000      	b.n	800160a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f003 0302 	and.w	r3, r3, #2
 8001612:	2b00      	cmp	r3, #0
 8001614:	d063      	beq.n	80016de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001616:	4b4a      	ldr	r3, [pc, #296]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 030c 	and.w	r3, r3, #12
 800161e:	2b00      	cmp	r3, #0
 8001620:	d00b      	beq.n	800163a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001622:	4b47      	ldr	r3, [pc, #284]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001624:	689b      	ldr	r3, [r3, #8]
 8001626:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800162a:	2b08      	cmp	r3, #8
 800162c:	d11c      	bne.n	8001668 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800162e:	4b44      	ldr	r3, [pc, #272]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d116      	bne.n	8001668 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800163a:	4b41      	ldr	r3, [pc, #260]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d005      	beq.n	8001652 <HAL_RCC_OscConfig+0x152>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	2b01      	cmp	r3, #1
 800164c:	d001      	beq.n	8001652 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800164e:	2301      	movs	r3, #1
 8001650:	e1c7      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001652:	4b3b      	ldr	r3, [pc, #236]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	4937      	ldr	r1, [pc, #220]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001662:	4313      	orrs	r3, r2
 8001664:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001666:	e03a      	b.n	80016de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d020      	beq.n	80016b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001670:	4b34      	ldr	r3, [pc, #208]	@ (8001744 <HAL_RCC_OscConfig+0x244>)
 8001672:	2201      	movs	r2, #1
 8001674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001676:	f7ff fcb7 	bl	8000fe8 <HAL_GetTick>
 800167a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800167c:	e008      	b.n	8001690 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800167e:	f7ff fcb3 	bl	8000fe8 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	693b      	ldr	r3, [r7, #16]
 8001686:	1ad3      	subs	r3, r2, r3
 8001688:	2b02      	cmp	r3, #2
 800168a:	d901      	bls.n	8001690 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800168c:	2303      	movs	r3, #3
 800168e:	e1a8      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001690:	4b2b      	ldr	r3, [pc, #172]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d0f0      	beq.n	800167e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800169c:	4b28      	ldr	r3, [pc, #160]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	691b      	ldr	r3, [r3, #16]
 80016a8:	00db      	lsls	r3, r3, #3
 80016aa:	4925      	ldr	r1, [pc, #148]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 80016ac:	4313      	orrs	r3, r2
 80016ae:	600b      	str	r3, [r1, #0]
 80016b0:	e015      	b.n	80016de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016b2:	4b24      	ldr	r3, [pc, #144]	@ (8001744 <HAL_RCC_OscConfig+0x244>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016b8:	f7ff fc96 	bl	8000fe8 <HAL_GetTick>
 80016bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016be:	e008      	b.n	80016d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016c0:	f7ff fc92 	bl	8000fe8 <HAL_GetTick>
 80016c4:	4602      	mov	r2, r0
 80016c6:	693b      	ldr	r3, [r7, #16]
 80016c8:	1ad3      	subs	r3, r2, r3
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d901      	bls.n	80016d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80016ce:	2303      	movs	r3, #3
 80016d0:	e187      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80016d2:	4b1b      	ldr	r3, [pc, #108]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	f003 0302 	and.w	r3, r3, #2
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d1f0      	bne.n	80016c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0308 	and.w	r3, r3, #8
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d036      	beq.n	8001758 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	695b      	ldr	r3, [r3, #20]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d016      	beq.n	8001720 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80016f2:	4b15      	ldr	r3, [pc, #84]	@ (8001748 <HAL_RCC_OscConfig+0x248>)
 80016f4:	2201      	movs	r2, #1
 80016f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016f8:	f7ff fc76 	bl	8000fe8 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001700:	f7ff fc72 	bl	8000fe8 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e167      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001712:	4b0b      	ldr	r3, [pc, #44]	@ (8001740 <HAL_RCC_OscConfig+0x240>)
 8001714:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d0f0      	beq.n	8001700 <HAL_RCC_OscConfig+0x200>
 800171e:	e01b      	b.n	8001758 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001720:	4b09      	ldr	r3, [pc, #36]	@ (8001748 <HAL_RCC_OscConfig+0x248>)
 8001722:	2200      	movs	r2, #0
 8001724:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001726:	f7ff fc5f 	bl	8000fe8 <HAL_GetTick>
 800172a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800172c:	e00e      	b.n	800174c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800172e:	f7ff fc5b 	bl	8000fe8 <HAL_GetTick>
 8001732:	4602      	mov	r2, r0
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	1ad3      	subs	r3, r2, r3
 8001738:	2b02      	cmp	r3, #2
 800173a:	d907      	bls.n	800174c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800173c:	2303      	movs	r3, #3
 800173e:	e150      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
 8001740:	40023800 	.word	0x40023800
 8001744:	42470000 	.word	0x42470000
 8001748:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800174c:	4b88      	ldr	r3, [pc, #544]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 800174e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1ea      	bne.n	800172e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0304 	and.w	r3, r3, #4
 8001760:	2b00      	cmp	r3, #0
 8001762:	f000 8097 	beq.w	8001894 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001766:	2300      	movs	r3, #0
 8001768:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800176a:	4b81      	ldr	r3, [pc, #516]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 800176c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001772:	2b00      	cmp	r3, #0
 8001774:	d10f      	bne.n	8001796 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	60bb      	str	r3, [r7, #8]
 800177a:	4b7d      	ldr	r3, [pc, #500]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177e:	4a7c      	ldr	r2, [pc, #496]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 8001780:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001784:	6413      	str	r3, [r2, #64]	@ 0x40
 8001786:	4b7a      	ldr	r3, [pc, #488]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800178e:	60bb      	str	r3, [r7, #8]
 8001790:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001792:	2301      	movs	r3, #1
 8001794:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001796:	4b77      	ldr	r3, [pc, #476]	@ (8001974 <HAL_RCC_OscConfig+0x474>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d118      	bne.n	80017d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80017a2:	4b74      	ldr	r3, [pc, #464]	@ (8001974 <HAL_RCC_OscConfig+0x474>)
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4a73      	ldr	r2, [pc, #460]	@ (8001974 <HAL_RCC_OscConfig+0x474>)
 80017a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017ae:	f7ff fc1b 	bl	8000fe8 <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017b6:	f7ff fc17 	bl	8000fe8 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e10c      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80017c8:	4b6a      	ldr	r3, [pc, #424]	@ (8001974 <HAL_RCC_OscConfig+0x474>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d0f0      	beq.n	80017b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	689b      	ldr	r3, [r3, #8]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d106      	bne.n	80017ea <HAL_RCC_OscConfig+0x2ea>
 80017dc:	4b64      	ldr	r3, [pc, #400]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 80017de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017e0:	4a63      	ldr	r2, [pc, #396]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80017e8:	e01c      	b.n	8001824 <HAL_RCC_OscConfig+0x324>
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	689b      	ldr	r3, [r3, #8]
 80017ee:	2b05      	cmp	r3, #5
 80017f0:	d10c      	bne.n	800180c <HAL_RCC_OscConfig+0x30c>
 80017f2:	4b5f      	ldr	r3, [pc, #380]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 80017f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80017f6:	4a5e      	ldr	r2, [pc, #376]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80017fe:	4b5c      	ldr	r3, [pc, #368]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 8001800:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001802:	4a5b      	ldr	r2, [pc, #364]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 8001804:	f043 0301 	orr.w	r3, r3, #1
 8001808:	6713      	str	r3, [r2, #112]	@ 0x70
 800180a:	e00b      	b.n	8001824 <HAL_RCC_OscConfig+0x324>
 800180c:	4b58      	ldr	r3, [pc, #352]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 800180e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001810:	4a57      	ldr	r2, [pc, #348]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 8001812:	f023 0301 	bic.w	r3, r3, #1
 8001816:	6713      	str	r3, [r2, #112]	@ 0x70
 8001818:	4b55      	ldr	r3, [pc, #340]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 800181a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800181c:	4a54      	ldr	r2, [pc, #336]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 800181e:	f023 0304 	bic.w	r3, r3, #4
 8001822:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d015      	beq.n	8001858 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182c:	f7ff fbdc 	bl	8000fe8 <HAL_GetTick>
 8001830:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001832:	e00a      	b.n	800184a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001834:	f7ff fbd8 	bl	8000fe8 <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	693b      	ldr	r3, [r7, #16]
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001842:	4293      	cmp	r3, r2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e0cb      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800184a:	4b49      	ldr	r3, [pc, #292]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 800184c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800184e:	f003 0302 	and.w	r3, r3, #2
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0ee      	beq.n	8001834 <HAL_RCC_OscConfig+0x334>
 8001856:	e014      	b.n	8001882 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001858:	f7ff fbc6 	bl	8000fe8 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800185e:	e00a      	b.n	8001876 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001860:	f7ff fbc2 	bl	8000fe8 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800186e:	4293      	cmp	r3, r2
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e0b5      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001876:	4b3e      	ldr	r3, [pc, #248]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 8001878:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	2b00      	cmp	r3, #0
 8001880:	d1ee      	bne.n	8001860 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001882:	7dfb      	ldrb	r3, [r7, #23]
 8001884:	2b01      	cmp	r3, #1
 8001886:	d105      	bne.n	8001894 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001888:	4b39      	ldr	r3, [pc, #228]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 800188a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800188c:	4a38      	ldr	r2, [pc, #224]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 800188e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001892:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	699b      	ldr	r3, [r3, #24]
 8001898:	2b00      	cmp	r3, #0
 800189a:	f000 80a1 	beq.w	80019e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800189e:	4b34      	ldr	r3, [pc, #208]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	f003 030c 	and.w	r3, r3, #12
 80018a6:	2b08      	cmp	r3, #8
 80018a8:	d05c      	beq.n	8001964 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	2b02      	cmp	r3, #2
 80018b0:	d141      	bne.n	8001936 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018b2:	4b31      	ldr	r3, [pc, #196]	@ (8001978 <HAL_RCC_OscConfig+0x478>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b8:	f7ff fb96 	bl	8000fe8 <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018c0:	f7ff fb92 	bl	8000fe8 <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e087      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80018d2:	4b27      	ldr	r3, [pc, #156]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f0      	bne.n	80018c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69da      	ldr	r2, [r3, #28]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a1b      	ldr	r3, [r3, #32]
 80018e6:	431a      	orrs	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80018ec:	019b      	lsls	r3, r3, #6
 80018ee:	431a      	orrs	r2, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f4:	085b      	lsrs	r3, r3, #1
 80018f6:	3b01      	subs	r3, #1
 80018f8:	041b      	lsls	r3, r3, #16
 80018fa:	431a      	orrs	r2, r3
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001900:	061b      	lsls	r3, r3, #24
 8001902:	491b      	ldr	r1, [pc, #108]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 8001904:	4313      	orrs	r3, r2
 8001906:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001908:	4b1b      	ldr	r3, [pc, #108]	@ (8001978 <HAL_RCC_OscConfig+0x478>)
 800190a:	2201      	movs	r2, #1
 800190c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800190e:	f7ff fb6b 	bl	8000fe8 <HAL_GetTick>
 8001912:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001914:	e008      	b.n	8001928 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001916:	f7ff fb67 	bl	8000fe8 <HAL_GetTick>
 800191a:	4602      	mov	r2, r0
 800191c:	693b      	ldr	r3, [r7, #16]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	2b02      	cmp	r3, #2
 8001922:	d901      	bls.n	8001928 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001924:	2303      	movs	r3, #3
 8001926:	e05c      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001928:	4b11      	ldr	r3, [pc, #68]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0f0      	beq.n	8001916 <HAL_RCC_OscConfig+0x416>
 8001934:	e054      	b.n	80019e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001936:	4b10      	ldr	r3, [pc, #64]	@ (8001978 <HAL_RCC_OscConfig+0x478>)
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800193c:	f7ff fb54 	bl	8000fe8 <HAL_GetTick>
 8001940:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001942:	e008      	b.n	8001956 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001944:	f7ff fb50 	bl	8000fe8 <HAL_GetTick>
 8001948:	4602      	mov	r2, r0
 800194a:	693b      	ldr	r3, [r7, #16]
 800194c:	1ad3      	subs	r3, r2, r3
 800194e:	2b02      	cmp	r3, #2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e045      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001956:	4b06      	ldr	r3, [pc, #24]	@ (8001970 <HAL_RCC_OscConfig+0x470>)
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1f0      	bne.n	8001944 <HAL_RCC_OscConfig+0x444>
 8001962:	e03d      	b.n	80019e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	699b      	ldr	r3, [r3, #24]
 8001968:	2b01      	cmp	r3, #1
 800196a:	d107      	bne.n	800197c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e038      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
 8001970:	40023800 	.word	0x40023800
 8001974:	40007000 	.word	0x40007000
 8001978:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800197c:	4b1b      	ldr	r3, [pc, #108]	@ (80019ec <HAL_RCC_OscConfig+0x4ec>)
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	699b      	ldr	r3, [r3, #24]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d028      	beq.n	80019dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001994:	429a      	cmp	r2, r3
 8001996:	d121      	bne.n	80019dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d11a      	bne.n	80019dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019a6:	68fa      	ldr	r2, [r7, #12]
 80019a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80019ac:	4013      	ands	r3, r2
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80019b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d111      	bne.n	80019dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c2:	085b      	lsrs	r3, r3, #1
 80019c4:	3b01      	subs	r3, #1
 80019c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80019c8:	429a      	cmp	r2, r3
 80019ca:	d107      	bne.n	80019dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80019d8:	429a      	cmp	r2, r3
 80019da:	d001      	beq.n	80019e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80019dc:	2301      	movs	r3, #1
 80019de:	e000      	b.n	80019e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	40023800 	.word	0x40023800

080019f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b084      	sub	sp, #16
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d101      	bne.n	8001a04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e0cc      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a04:	4b68      	ldr	r3, [pc, #416]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0307 	and.w	r3, r3, #7
 8001a0c:	683a      	ldr	r2, [r7, #0]
 8001a0e:	429a      	cmp	r2, r3
 8001a10:	d90c      	bls.n	8001a2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a12:	4b65      	ldr	r3, [pc, #404]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	b2d2      	uxtb	r2, r2
 8001a18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a1a:	4b63      	ldr	r3, [pc, #396]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	683a      	ldr	r2, [r7, #0]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	d001      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e0b8      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0302 	and.w	r3, r3, #2
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d020      	beq.n	8001a7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 0304 	and.w	r3, r3, #4
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d005      	beq.n	8001a50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001a44:	4b59      	ldr	r3, [pc, #356]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a46:	689b      	ldr	r3, [r3, #8]
 8001a48:	4a58      	ldr	r2, [pc, #352]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a4a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001a4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 0308 	and.w	r3, r3, #8
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d005      	beq.n	8001a68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001a5c:	4b53      	ldr	r3, [pc, #332]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	4a52      	ldr	r2, [pc, #328]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a62:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001a66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a68:	4b50      	ldr	r3, [pc, #320]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a6a:	689b      	ldr	r3, [r3, #8]
 8001a6c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	494d      	ldr	r1, [pc, #308]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a76:	4313      	orrs	r3, r2
 8001a78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f003 0301 	and.w	r3, r3, #1
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d044      	beq.n	8001b10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d107      	bne.n	8001a9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a8e:	4b47      	ldr	r3, [pc, #284]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d119      	bne.n	8001ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a9a:	2301      	movs	r3, #1
 8001a9c:	e07f      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	2b02      	cmp	r3, #2
 8001aa4:	d003      	beq.n	8001aae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001aaa:	2b03      	cmp	r3, #3
 8001aac:	d107      	bne.n	8001abe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001aae:	4b3f      	ldr	r3, [pc, #252]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d109      	bne.n	8001ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e06f      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001abe:	4b3b      	ldr	r3, [pc, #236]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d101      	bne.n	8001ace <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	e067      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001ace:	4b37      	ldr	r3, [pc, #220]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f023 0203 	bic.w	r2, r3, #3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	4934      	ldr	r1, [pc, #208]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001adc:	4313      	orrs	r3, r2
 8001ade:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ae0:	f7ff fa82 	bl	8000fe8 <HAL_GetTick>
 8001ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ae6:	e00a      	b.n	8001afe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ae8:	f7ff fa7e 	bl	8000fe8 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d901      	bls.n	8001afe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001afa:	2303      	movs	r3, #3
 8001afc:	e04f      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001afe:	4b2b      	ldr	r3, [pc, #172]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001b00:	689b      	ldr	r3, [r3, #8]
 8001b02:	f003 020c 	and.w	r2, r3, #12
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	d1eb      	bne.n	8001ae8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b10:	4b25      	ldr	r3, [pc, #148]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0307 	and.w	r3, r3, #7
 8001b18:	683a      	ldr	r2, [r7, #0]
 8001b1a:	429a      	cmp	r2, r3
 8001b1c:	d20c      	bcs.n	8001b38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b1e:	4b22      	ldr	r3, [pc, #136]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b26:	4b20      	ldr	r3, [pc, #128]	@ (8001ba8 <HAL_RCC_ClockConfig+0x1b8>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	683a      	ldr	r2, [r7, #0]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d001      	beq.n	8001b38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e032      	b.n	8001b9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0304 	and.w	r3, r3, #4
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d008      	beq.n	8001b56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b44:	4b19      	ldr	r3, [pc, #100]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	68db      	ldr	r3, [r3, #12]
 8001b50:	4916      	ldr	r1, [pc, #88]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001b52:	4313      	orrs	r3, r2
 8001b54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d009      	beq.n	8001b76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b62:	4b12      	ldr	r3, [pc, #72]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001b64:	689b      	ldr	r3, [r3, #8]
 8001b66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	490e      	ldr	r1, [pc, #56]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	4313      	orrs	r3, r2
 8001b74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b76:	f000 f821 	bl	8001bbc <HAL_RCC_GetSysClockFreq>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bac <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	091b      	lsrs	r3, r3, #4
 8001b82:	f003 030f 	and.w	r3, r3, #15
 8001b86:	490a      	ldr	r1, [pc, #40]	@ (8001bb0 <HAL_RCC_ClockConfig+0x1c0>)
 8001b88:	5ccb      	ldrb	r3, [r1, r3]
 8001b8a:	fa22 f303 	lsr.w	r3, r2, r3
 8001b8e:	4a09      	ldr	r2, [pc, #36]	@ (8001bb4 <HAL_RCC_ClockConfig+0x1c4>)
 8001b90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001b92:	4b09      	ldr	r3, [pc, #36]	@ (8001bb8 <HAL_RCC_ClockConfig+0x1c8>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff f912 	bl	8000dc0 <HAL_InitTick>

  return HAL_OK;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3710      	adds	r7, #16
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bd80      	pop	{r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	40023c00 	.word	0x40023c00
 8001bac:	40023800 	.word	0x40023800
 8001bb0:	080054a4 	.word	0x080054a4
 8001bb4:	20000018 	.word	0x20000018
 8001bb8:	2000001c 	.word	0x2000001c

08001bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bc0:	b090      	sub	sp, #64	@ 0x40
 8001bc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001bc8:	2300      	movs	r3, #0
 8001bca:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001bcc:	2300      	movs	r3, #0
 8001bce:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001bd4:	4b59      	ldr	r3, [pc, #356]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x180>)
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 030c 	and.w	r3, r3, #12
 8001bdc:	2b08      	cmp	r3, #8
 8001bde:	d00d      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0x40>
 8001be0:	2b08      	cmp	r3, #8
 8001be2:	f200 80a1 	bhi.w	8001d28 <HAL_RCC_GetSysClockFreq+0x16c>
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d002      	beq.n	8001bf0 <HAL_RCC_GetSysClockFreq+0x34>
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d003      	beq.n	8001bf6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bee:	e09b      	b.n	8001d28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001bf0:	4b53      	ldr	r3, [pc, #332]	@ (8001d40 <HAL_RCC_GetSysClockFreq+0x184>)
 8001bf2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8001bf4:	e09b      	b.n	8001d2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001bf6:	4b53      	ldr	r3, [pc, #332]	@ (8001d44 <HAL_RCC_GetSysClockFreq+0x188>)
 8001bf8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001bfa:	e098      	b.n	8001d2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001bfc:	4b4f      	ldr	r3, [pc, #316]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x180>)
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001c04:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c06:	4b4d      	ldr	r3, [pc, #308]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x180>)
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d028      	beq.n	8001c64 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c12:	4b4a      	ldr	r3, [pc, #296]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x180>)
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	099b      	lsrs	r3, r3, #6
 8001c18:	2200      	movs	r2, #0
 8001c1a:	623b      	str	r3, [r7, #32]
 8001c1c:	627a      	str	r2, [r7, #36]	@ 0x24
 8001c1e:	6a3b      	ldr	r3, [r7, #32]
 8001c20:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001c24:	2100      	movs	r1, #0
 8001c26:	4b47      	ldr	r3, [pc, #284]	@ (8001d44 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c28:	fb03 f201 	mul.w	r2, r3, r1
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	fb00 f303 	mul.w	r3, r0, r3
 8001c32:	4413      	add	r3, r2
 8001c34:	4a43      	ldr	r2, [pc, #268]	@ (8001d44 <HAL_RCC_GetSysClockFreq+0x188>)
 8001c36:	fba0 1202 	umull	r1, r2, r0, r2
 8001c3a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001c3c:	460a      	mov	r2, r1
 8001c3e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001c40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001c42:	4413      	add	r3, r2
 8001c44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001c46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001c48:	2200      	movs	r2, #0
 8001c4a:	61bb      	str	r3, [r7, #24]
 8001c4c:	61fa      	str	r2, [r7, #28]
 8001c4e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001c52:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001c56:	f7fe fac3 	bl	80001e0 <__aeabi_uldivmod>
 8001c5a:	4602      	mov	r2, r0
 8001c5c:	460b      	mov	r3, r1
 8001c5e:	4613      	mov	r3, r2
 8001c60:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001c62:	e053      	b.n	8001d0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c64:	4b35      	ldr	r3, [pc, #212]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x180>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	099b      	lsrs	r3, r3, #6
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	617a      	str	r2, [r7, #20]
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001c76:	f04f 0b00 	mov.w	fp, #0
 8001c7a:	4652      	mov	r2, sl
 8001c7c:	465b      	mov	r3, fp
 8001c7e:	f04f 0000 	mov.w	r0, #0
 8001c82:	f04f 0100 	mov.w	r1, #0
 8001c86:	0159      	lsls	r1, r3, #5
 8001c88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c8c:	0150      	lsls	r0, r2, #5
 8001c8e:	4602      	mov	r2, r0
 8001c90:	460b      	mov	r3, r1
 8001c92:	ebb2 080a 	subs.w	r8, r2, sl
 8001c96:	eb63 090b 	sbc.w	r9, r3, fp
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	f04f 0300 	mov.w	r3, #0
 8001ca2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001ca6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001caa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001cae:	ebb2 0408 	subs.w	r4, r2, r8
 8001cb2:	eb63 0509 	sbc.w	r5, r3, r9
 8001cb6:	f04f 0200 	mov.w	r2, #0
 8001cba:	f04f 0300 	mov.w	r3, #0
 8001cbe:	00eb      	lsls	r3, r5, #3
 8001cc0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cc4:	00e2      	lsls	r2, r4, #3
 8001cc6:	4614      	mov	r4, r2
 8001cc8:	461d      	mov	r5, r3
 8001cca:	eb14 030a 	adds.w	r3, r4, sl
 8001cce:	603b      	str	r3, [r7, #0]
 8001cd0:	eb45 030b 	adc.w	r3, r5, fp
 8001cd4:	607b      	str	r3, [r7, #4]
 8001cd6:	f04f 0200 	mov.w	r2, #0
 8001cda:	f04f 0300 	mov.w	r3, #0
 8001cde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ce2:	4629      	mov	r1, r5
 8001ce4:	028b      	lsls	r3, r1, #10
 8001ce6:	4621      	mov	r1, r4
 8001ce8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cec:	4621      	mov	r1, r4
 8001cee:	028a      	lsls	r2, r1, #10
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	60fa      	str	r2, [r7, #12]
 8001cfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001d00:	f7fe fa6e 	bl	80001e0 <__aeabi_uldivmod>
 8001d04:	4602      	mov	r2, r0
 8001d06:	460b      	mov	r3, r1
 8001d08:	4613      	mov	r3, r2
 8001d0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001d3c <HAL_RCC_GetSysClockFreq+0x180>)
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	0c1b      	lsrs	r3, r3, #16
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	3301      	adds	r3, #1
 8001d18:	005b      	lsls	r3, r3, #1
 8001d1a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8001d1c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001d1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d24:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d26:	e002      	b.n	8001d2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d28:	4b05      	ldr	r3, [pc, #20]	@ (8001d40 <HAL_RCC_GetSysClockFreq+0x184>)
 8001d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001d2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3740      	adds	r7, #64	@ 0x40
 8001d34:	46bd      	mov	sp, r7
 8001d36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	00f42400 	.word	0x00f42400
 8001d44:	017d7840 	.word	0x017d7840

08001d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d4c:	4b03      	ldr	r3, [pc, #12]	@ (8001d5c <HAL_RCC_GetHCLKFreq+0x14>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20000018 	.word	0x20000018

08001d60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001d64:	f7ff fff0 	bl	8001d48 <HAL_RCC_GetHCLKFreq>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	4b05      	ldr	r3, [pc, #20]	@ (8001d80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	0a9b      	lsrs	r3, r3, #10
 8001d70:	f003 0307 	and.w	r3, r3, #7
 8001d74:	4903      	ldr	r1, [pc, #12]	@ (8001d84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d76:	5ccb      	ldrb	r3, [r1, r3]
 8001d78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40023800 	.word	0x40023800
 8001d84:	080054b4 	.word	0x080054b4

08001d88 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	220f      	movs	r2, #15
 8001d96:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001d98:	4b12      	ldr	r3, [pc, #72]	@ (8001de4 <HAL_RCC_GetClockConfig+0x5c>)
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	f003 0203 	and.w	r2, r3, #3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001da4:	4b0f      	ldr	r3, [pc, #60]	@ (8001de4 <HAL_RCC_GetClockConfig+0x5c>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001db0:	4b0c      	ldr	r3, [pc, #48]	@ (8001de4 <HAL_RCC_GetClockConfig+0x5c>)
 8001db2:	689b      	ldr	r3, [r3, #8]
 8001db4:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001dbc:	4b09      	ldr	r3, [pc, #36]	@ (8001de4 <HAL_RCC_GetClockConfig+0x5c>)
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	08db      	lsrs	r3, r3, #3
 8001dc2:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001dca:	4b07      	ldr	r3, [pc, #28]	@ (8001de8 <HAL_RCC_GetClockConfig+0x60>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f003 0207 	and.w	r2, r3, #7
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	601a      	str	r2, [r3, #0]
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40023800 	.word	0x40023800
 8001de8:	40023c00 	.word	0x40023c00

08001dec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e07b      	b.n	8001ef6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d108      	bne.n	8001e18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001e0e:	d009      	beq.n	8001e24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2200      	movs	r2, #0
 8001e14:	61da      	str	r2, [r3, #28]
 8001e16:	e005      	b.n	8001e24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	2200      	movs	r2, #0
 8001e22:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2200      	movs	r2, #0
 8001e28:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d106      	bne.n	8001e44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f7fe ff76 	bl	8000d30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2202      	movs	r2, #2
 8001e48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001e5a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685b      	ldr	r3, [r3, #4]
 8001e60:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	68db      	ldr	r3, [r3, #12]
 8001e72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	695b      	ldr	r3, [r3, #20]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	699b      	ldr	r3, [r3, #24]
 8001e90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e94:	431a      	orrs	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69db      	ldr	r3, [r3, #28]
 8001e9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001e9e:	431a      	orrs	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6a1b      	ldr	r3, [r3, #32]
 8001ea4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001ea8:	ea42 0103 	orr.w	r1, r2, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001eb0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	0c1b      	lsrs	r3, r3, #16
 8001ec2:	f003 0104 	and.w	r1, r3, #4
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eca:	f003 0210 	and.w	r2, r3, #16
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	69da      	ldr	r2, [r3, #28]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ee4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2200      	movs	r2, #0
 8001eea:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001ef4:	2300      	movs	r3, #0
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3708      	adds	r7, #8
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b088      	sub	sp, #32
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	60f8      	str	r0, [r7, #12]
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	603b      	str	r3, [r7, #0]
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d101      	bne.n	8001f20 <HAL_SPI_Transmit+0x22>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	e12d      	b.n	800217c <HAL_SPI_Transmit+0x27e>
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2201      	movs	r2, #1
 8001f24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001f28:	f7ff f85e 	bl	8000fe8 <HAL_GetTick>
 8001f2c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001f2e:	88fb      	ldrh	r3, [r7, #6]
 8001f30:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d002      	beq.n	8001f44 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001f3e:	2302      	movs	r3, #2
 8001f40:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f42:	e116      	b.n	8002172 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d002      	beq.n	8001f50 <HAL_SPI_Transmit+0x52>
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d102      	bne.n	8001f56 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001f54:	e10d      	b.n	8002172 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	2203      	movs	r2, #3
 8001f5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2200      	movs	r2, #0
 8001f62:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	68ba      	ldr	r2, [r7, #8]
 8001f68:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	88fa      	ldrh	r2, [r7, #6]
 8001f6e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	88fa      	ldrh	r2, [r7, #6]
 8001f74:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2200      	movs	r2, #0
 8001f7a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	2200      	movs	r2, #0
 8001f86:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	2200      	movs	r2, #0
 8001f92:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001f9c:	d10f      	bne.n	8001fbe <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001fac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001fbc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fc8:	2b40      	cmp	r3, #64	@ 0x40
 8001fca:	d007      	beq.n	8001fdc <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681a      	ldr	r2, [r3, #0]
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001fda:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	68db      	ldr	r3, [r3, #12]
 8001fe0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001fe4:	d14f      	bne.n	8002086 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d002      	beq.n	8001ff4 <HAL_SPI_Transmit+0xf6>
 8001fee:	8afb      	ldrh	r3, [r7, #22]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d142      	bne.n	800207a <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ff8:	881a      	ldrh	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002004:	1c9a      	adds	r2, r3, #2
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800200e:	b29b      	uxth	r3, r3
 8002010:	3b01      	subs	r3, #1
 8002012:	b29a      	uxth	r2, r3
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002018:	e02f      	b.n	800207a <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f003 0302 	and.w	r3, r3, #2
 8002024:	2b02      	cmp	r3, #2
 8002026:	d112      	bne.n	800204e <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202c:	881a      	ldrh	r2, [r3, #0]
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002038:	1c9a      	adds	r2, r3, #2
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002042:	b29b      	uxth	r3, r3
 8002044:	3b01      	subs	r3, #1
 8002046:	b29a      	uxth	r2, r3
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800204c:	e015      	b.n	800207a <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800204e:	f7fe ffcb 	bl	8000fe8 <HAL_GetTick>
 8002052:	4602      	mov	r2, r0
 8002054:	69bb      	ldr	r3, [r7, #24]
 8002056:	1ad3      	subs	r3, r2, r3
 8002058:	683a      	ldr	r2, [r7, #0]
 800205a:	429a      	cmp	r2, r3
 800205c:	d803      	bhi.n	8002066 <HAL_SPI_Transmit+0x168>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002064:	d102      	bne.n	800206c <HAL_SPI_Transmit+0x16e>
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	2b00      	cmp	r3, #0
 800206a:	d106      	bne.n	800207a <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002078:	e07b      	b.n	8002172 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800207e:	b29b      	uxth	r3, r3
 8002080:	2b00      	cmp	r3, #0
 8002082:	d1ca      	bne.n	800201a <HAL_SPI_Transmit+0x11c>
 8002084:	e050      	b.n	8002128 <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d002      	beq.n	8002094 <HAL_SPI_Transmit+0x196>
 800208e:	8afb      	ldrh	r3, [r7, #22]
 8002090:	2b01      	cmp	r3, #1
 8002092:	d144      	bne.n	800211e <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	330c      	adds	r3, #12
 800209e:	7812      	ldrb	r2, [r2, #0]
 80020a0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a6:	1c5a      	adds	r2, r3, #1
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	3b01      	subs	r3, #1
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 80020ba:	e030      	b.n	800211e <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d113      	bne.n	80020f2 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	330c      	adds	r3, #12
 80020d4:	7812      	ldrb	r2, [r2, #0]
 80020d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020dc:	1c5a      	adds	r2, r3, #1
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80020e6:	b29b      	uxth	r3, r3
 80020e8:	3b01      	subs	r3, #1
 80020ea:	b29a      	uxth	r2, r3
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	86da      	strh	r2, [r3, #54]	@ 0x36
 80020f0:	e015      	b.n	800211e <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020f2:	f7fe ff79 	bl	8000fe8 <HAL_GetTick>
 80020f6:	4602      	mov	r2, r0
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	683a      	ldr	r2, [r7, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d803      	bhi.n	800210a <HAL_SPI_Transmit+0x20c>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002108:	d102      	bne.n	8002110 <HAL_SPI_Transmit+0x212>
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d106      	bne.n	800211e <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2201      	movs	r2, #1
 8002118:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800211c:	e029      	b.n	8002172 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002122:	b29b      	uxth	r3, r3
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1c9      	bne.n	80020bc <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	6839      	ldr	r1, [r7, #0]
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f000 f8bf 	bl	80022b0 <SPI_EndRxTxTransaction>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d002      	beq.n	800213e <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2220      	movs	r2, #32
 800213c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d10a      	bne.n	800215c <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002146:	2300      	movs	r3, #0
 8002148:	613b      	str	r3, [r7, #16]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68db      	ldr	r3, [r3, #12]
 8002150:	613b      	str	r3, [r7, #16]
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	689b      	ldr	r3, [r3, #8]
 8002158:	613b      	str	r3, [r7, #16]
 800215a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002160:	2b00      	cmp	r3, #0
 8002162:	d002      	beq.n	800216a <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	77fb      	strb	r3, [r7, #31]
 8002168:	e003      	b.n	8002172 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2201      	movs	r2, #1
 800216e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	2200      	movs	r2, #0
 8002176:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800217a:	7ffb      	ldrb	r3, [r7, #31]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3720      	adds	r7, #32
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8002184:	b480      	push	{r7}
 8002186:	b083      	sub	sp, #12
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002192:	b2db      	uxtb	r3, r3
}
 8002194:	4618      	mov	r0, r3
 8002196:	370c      	adds	r7, #12
 8002198:	46bd      	mov	sp, r7
 800219a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219e:	4770      	bx	lr

080021a0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b088      	sub	sp, #32
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	60f8      	str	r0, [r7, #12]
 80021a8:	60b9      	str	r1, [r7, #8]
 80021aa:	603b      	str	r3, [r7, #0]
 80021ac:	4613      	mov	r3, r2
 80021ae:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80021b0:	f7fe ff1a 	bl	8000fe8 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021b8:	1a9b      	subs	r3, r3, r2
 80021ba:	683a      	ldr	r2, [r7, #0]
 80021bc:	4413      	add	r3, r2
 80021be:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80021c0:	f7fe ff12 	bl	8000fe8 <HAL_GetTick>
 80021c4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80021c6:	4b39      	ldr	r3, [pc, #228]	@ (80022ac <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	015b      	lsls	r3, r3, #5
 80021cc:	0d1b      	lsrs	r3, r3, #20
 80021ce:	69fa      	ldr	r2, [r7, #28]
 80021d0:	fb02 f303 	mul.w	r3, r2, r3
 80021d4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80021d6:	e054      	b.n	8002282 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021de:	d050      	beq.n	8002282 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80021e0:	f7fe ff02 	bl	8000fe8 <HAL_GetTick>
 80021e4:	4602      	mov	r2, r0
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	69fa      	ldr	r2, [r7, #28]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d902      	bls.n	80021f6 <SPI_WaitFlagStateUntilTimeout+0x56>
 80021f0:	69fb      	ldr	r3, [r7, #28]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d13d      	bne.n	8002272 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	685a      	ldr	r2, [r3, #4]
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002204:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800220e:	d111      	bne.n	8002234 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	689b      	ldr	r3, [r3, #8]
 8002214:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002218:	d004      	beq.n	8002224 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002222:	d107      	bne.n	8002234 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	681a      	ldr	r2, [r3, #0]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002232:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002238:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800223c:	d10f      	bne.n	800225e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800225c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2201      	movs	r2, #1
 8002262:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800226e:	2303      	movs	r3, #3
 8002270:	e017      	b.n	80022a2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002278:	2300      	movs	r3, #0
 800227a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800227c:	697b      	ldr	r3, [r7, #20]
 800227e:	3b01      	subs	r3, #1
 8002280:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	689a      	ldr	r2, [r3, #8]
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	4013      	ands	r3, r2
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	429a      	cmp	r2, r3
 8002290:	bf0c      	ite	eq
 8002292:	2301      	moveq	r3, #1
 8002294:	2300      	movne	r3, #0
 8002296:	b2db      	uxtb	r3, r3
 8002298:	461a      	mov	r2, r3
 800229a:	79fb      	ldrb	r3, [r7, #7]
 800229c:	429a      	cmp	r2, r3
 800229e:	d19b      	bne.n	80021d8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3720      	adds	r7, #32
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	20000018 	.word	0x20000018

080022b0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b088      	sub	sp, #32
 80022b4:	af02      	add	r7, sp, #8
 80022b6:	60f8      	str	r0, [r7, #12]
 80022b8:	60b9      	str	r1, [r7, #8]
 80022ba:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	9300      	str	r3, [sp, #0]
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	2201      	movs	r2, #1
 80022c4:	2102      	movs	r1, #2
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f7ff ff6a 	bl	80021a0 <SPI_WaitFlagStateUntilTimeout>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d007      	beq.n	80022e2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d6:	f043 0220 	orr.w	r2, r3, #32
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e032      	b.n	8002348 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80022e2:	4b1b      	ldr	r3, [pc, #108]	@ (8002350 <SPI_EndRxTxTransaction+0xa0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	4a1b      	ldr	r2, [pc, #108]	@ (8002354 <SPI_EndRxTxTransaction+0xa4>)
 80022e8:	fba2 2303 	umull	r2, r3, r2, r3
 80022ec:	0d5b      	lsrs	r3, r3, #21
 80022ee:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80022f2:	fb02 f303 	mul.w	r3, r2, r3
 80022f6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002300:	d112      	bne.n	8002328 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	9300      	str	r3, [sp, #0]
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	2200      	movs	r2, #0
 800230a:	2180      	movs	r1, #128	@ 0x80
 800230c:	68f8      	ldr	r0, [r7, #12]
 800230e:	f7ff ff47 	bl	80021a0 <SPI_WaitFlagStateUntilTimeout>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	d016      	beq.n	8002346 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800231c:	f043 0220 	orr.w	r2, r3, #32
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e00f      	b.n	8002348 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002328:	697b      	ldr	r3, [r7, #20]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00a      	beq.n	8002344 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	3b01      	subs	r3, #1
 8002332:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800233e:	2b80      	cmp	r3, #128	@ 0x80
 8002340:	d0f2      	beq.n	8002328 <SPI_EndRxTxTransaction+0x78>
 8002342:	e000      	b.n	8002346 <SPI_EndRxTxTransaction+0x96>
        break;
 8002344:	bf00      	nop
  }

  return HAL_OK;
 8002346:	2300      	movs	r3, #0
}
 8002348:	4618      	mov	r0, r3
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20000018 	.word	0x20000018
 8002354:	165e9f81 	.word	0x165e9f81

08002358 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d101      	bne.n	800236a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
 8002368:	e041      	b.n	80023ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002370:	b2db      	uxtb	r3, r3
 8002372:	2b00      	cmp	r3, #0
 8002374:	d106      	bne.n	8002384 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2200      	movs	r2, #0
 800237a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 f839 	bl	80023f6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2202      	movs	r2, #2
 8002388:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	3304      	adds	r3, #4
 8002394:	4619      	mov	r1, r3
 8002396:	4610      	mov	r0, r2
 8002398:	f000 f9b2 	bl	8002700 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	2201      	movs	r2, #1
 80023a0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2201      	movs	r2, #1
 80023a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2201      	movs	r2, #1
 80023b0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2201      	movs	r2, #1
 80023b8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2201      	movs	r2, #1
 80023c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2201      	movs	r2, #1
 80023d0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2201      	movs	r2, #1
 80023d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2201      	movs	r2, #1
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023ec:	2300      	movs	r3, #0
}
 80023ee:	4618      	mov	r0, r3
 80023f0:	3708      	adds	r7, #8
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80023f6:	b480      	push	{r7}
 80023f8:	b083      	sub	sp, #12
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80023fe:	bf00      	nop
 8002400:	370c      	adds	r7, #12
 8002402:	46bd      	mov	sp, r7
 8002404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002408:	4770      	bx	lr
	...

0800240c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800240c:	b480      	push	{r7}
 800240e:	b085      	sub	sp, #20
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800241a:	b2db      	uxtb	r3, r3
 800241c:	2b01      	cmp	r3, #1
 800241e:	d001      	beq.n	8002424 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	e044      	b.n	80024ae <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2202      	movs	r2, #2
 8002428:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f042 0201 	orr.w	r2, r2, #1
 800243a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a1e      	ldr	r2, [pc, #120]	@ (80024bc <HAL_TIM_Base_Start_IT+0xb0>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d018      	beq.n	8002478 <HAL_TIM_Base_Start_IT+0x6c>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800244e:	d013      	beq.n	8002478 <HAL_TIM_Base_Start_IT+0x6c>
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a1a      	ldr	r2, [pc, #104]	@ (80024c0 <HAL_TIM_Base_Start_IT+0xb4>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d00e      	beq.n	8002478 <HAL_TIM_Base_Start_IT+0x6c>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a19      	ldr	r2, [pc, #100]	@ (80024c4 <HAL_TIM_Base_Start_IT+0xb8>)
 8002460:	4293      	cmp	r3, r2
 8002462:	d009      	beq.n	8002478 <HAL_TIM_Base_Start_IT+0x6c>
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a17      	ldr	r2, [pc, #92]	@ (80024c8 <HAL_TIM_Base_Start_IT+0xbc>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d004      	beq.n	8002478 <HAL_TIM_Base_Start_IT+0x6c>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a16      	ldr	r2, [pc, #88]	@ (80024cc <HAL_TIM_Base_Start_IT+0xc0>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d111      	bne.n	800249c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	689b      	ldr	r3, [r3, #8]
 800247e:	f003 0307 	and.w	r3, r3, #7
 8002482:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	2b06      	cmp	r3, #6
 8002488:	d010      	beq.n	80024ac <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f042 0201 	orr.w	r2, r2, #1
 8002498:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800249a:	e007      	b.n	80024ac <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f042 0201 	orr.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024ac:	2300      	movs	r3, #0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3714      	adds	r7, #20
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40010000 	.word	0x40010000
 80024c0:	40000400 	.word	0x40000400
 80024c4:	40000800 	.word	0x40000800
 80024c8:	40000c00 	.word	0x40000c00
 80024cc:	40014000 	.word	0x40014000

080024d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	68db      	ldr	r3, [r3, #12]
 80024de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	691b      	ldr	r3, [r3, #16]
 80024e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d020      	beq.n	8002534 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f003 0302 	and.w	r3, r3, #2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d01b      	beq.n	8002534 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f06f 0202 	mvn.w	r2, #2
 8002504:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2201      	movs	r2, #1
 800250a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	f003 0303 	and.w	r3, r3, #3
 8002516:	2b00      	cmp	r3, #0
 8002518:	d003      	beq.n	8002522 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f8d2 	bl	80026c4 <HAL_TIM_IC_CaptureCallback>
 8002520:	e005      	b.n	800252e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 f8c4 	bl	80026b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f000 f8d5 	bl	80026d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	f003 0304 	and.w	r3, r3, #4
 800253a:	2b00      	cmp	r3, #0
 800253c:	d020      	beq.n	8002580 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f003 0304 	and.w	r3, r3, #4
 8002544:	2b00      	cmp	r3, #0
 8002546:	d01b      	beq.n	8002580 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f06f 0204 	mvn.w	r2, #4
 8002550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2202      	movs	r2, #2
 8002556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f8ac 	bl	80026c4 <HAL_TIM_IC_CaptureCallback>
 800256c:	e005      	b.n	800257a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f89e 	bl	80026b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 f8af 	bl	80026d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b00      	cmp	r3, #0
 8002588:	d020      	beq.n	80025cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	2b00      	cmp	r3, #0
 8002592:	d01b      	beq.n	80025cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f06f 0208 	mvn.w	r2, #8
 800259c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2204      	movs	r2, #4
 80025a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	69db      	ldr	r3, [r3, #28]
 80025aa:	f003 0303 	and.w	r3, r3, #3
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d003      	beq.n	80025ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 f886 	bl	80026c4 <HAL_TIM_IC_CaptureCallback>
 80025b8:	e005      	b.n	80025c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f000 f878 	bl	80026b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f000 f889 	bl	80026d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80025cc:	68bb      	ldr	r3, [r7, #8]
 80025ce:	f003 0310 	and.w	r3, r3, #16
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d020      	beq.n	8002618 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	f003 0310 	and.w	r3, r3, #16
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d01b      	beq.n	8002618 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f06f 0210 	mvn.w	r2, #16
 80025e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2208      	movs	r2, #8
 80025ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f000 f860 	bl	80026c4 <HAL_TIM_IC_CaptureCallback>
 8002604:	e005      	b.n	8002612 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f852 	bl	80026b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 f863 	bl	80026d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002618:	68bb      	ldr	r3, [r7, #8]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d00c      	beq.n	800263c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	f003 0301 	and.w	r3, r3, #1
 8002628:	2b00      	cmp	r3, #0
 800262a:	d007      	beq.n	800263c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f06f 0201 	mvn.w	r2, #1
 8002634:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f7fe fb38 	bl	8000cac <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002642:	2b00      	cmp	r3, #0
 8002644:	d00c      	beq.n	8002660 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800264c:	2b00      	cmp	r3, #0
 800264e:	d007      	beq.n	8002660 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002658:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 f8e6 	bl	800282c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00c      	beq.n	8002684 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800266a:	68fb      	ldr	r3, [r7, #12]
 800266c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002670:	2b00      	cmp	r3, #0
 8002672:	d007      	beq.n	8002684 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800267c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f000 f834 	bl	80026ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	f003 0320 	and.w	r3, r3, #32
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00c      	beq.n	80026a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f003 0320 	and.w	r3, r3, #32
 8002694:	2b00      	cmp	r3, #0
 8002696:	d007      	beq.n	80026a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f06f 0220 	mvn.w	r2, #32
 80026a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80026a2:	6878      	ldr	r0, [r7, #4]
 80026a4:	f000 f8b8 	bl	8002818 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80026a8:	bf00      	nop
 80026aa:	3710      	adds	r7, #16
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a3a      	ldr	r2, [pc, #232]	@ (80027fc <TIM_Base_SetConfig+0xfc>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d00f      	beq.n	8002738 <TIM_Base_SetConfig+0x38>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800271e:	d00b      	beq.n	8002738 <TIM_Base_SetConfig+0x38>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a37      	ldr	r2, [pc, #220]	@ (8002800 <TIM_Base_SetConfig+0x100>)
 8002724:	4293      	cmp	r3, r2
 8002726:	d007      	beq.n	8002738 <TIM_Base_SetConfig+0x38>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a36      	ldr	r2, [pc, #216]	@ (8002804 <TIM_Base_SetConfig+0x104>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d003      	beq.n	8002738 <TIM_Base_SetConfig+0x38>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	4a35      	ldr	r2, [pc, #212]	@ (8002808 <TIM_Base_SetConfig+0x108>)
 8002734:	4293      	cmp	r3, r2
 8002736:	d108      	bne.n	800274a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800273e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	68fa      	ldr	r2, [r7, #12]
 8002746:	4313      	orrs	r3, r2
 8002748:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	4a2b      	ldr	r2, [pc, #172]	@ (80027fc <TIM_Base_SetConfig+0xfc>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d01b      	beq.n	800278a <TIM_Base_SetConfig+0x8a>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002758:	d017      	beq.n	800278a <TIM_Base_SetConfig+0x8a>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a28      	ldr	r2, [pc, #160]	@ (8002800 <TIM_Base_SetConfig+0x100>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d013      	beq.n	800278a <TIM_Base_SetConfig+0x8a>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a27      	ldr	r2, [pc, #156]	@ (8002804 <TIM_Base_SetConfig+0x104>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00f      	beq.n	800278a <TIM_Base_SetConfig+0x8a>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a26      	ldr	r2, [pc, #152]	@ (8002808 <TIM_Base_SetConfig+0x108>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d00b      	beq.n	800278a <TIM_Base_SetConfig+0x8a>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a25      	ldr	r2, [pc, #148]	@ (800280c <TIM_Base_SetConfig+0x10c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d007      	beq.n	800278a <TIM_Base_SetConfig+0x8a>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a24      	ldr	r2, [pc, #144]	@ (8002810 <TIM_Base_SetConfig+0x110>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d003      	beq.n	800278a <TIM_Base_SetConfig+0x8a>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a23      	ldr	r2, [pc, #140]	@ (8002814 <TIM_Base_SetConfig+0x114>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d108      	bne.n	800279c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002790:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	4313      	orrs	r3, r2
 800279a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80027a2:	683b      	ldr	r3, [r7, #0]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	4313      	orrs	r3, r2
 80027a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	68fa      	ldr	r2, [r7, #12]
 80027ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	689a      	ldr	r2, [r3, #8]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	4a0e      	ldr	r2, [pc, #56]	@ (80027fc <TIM_Base_SetConfig+0xfc>)
 80027c4:	4293      	cmp	r3, r2
 80027c6:	d103      	bne.n	80027d0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	691a      	ldr	r2, [r3, #16]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d105      	bne.n	80027ee <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	f023 0201 	bic.w	r2, r3, #1
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	611a      	str	r2, [r3, #16]
  }
}
 80027ee:	bf00      	nop
 80027f0:	3714      	adds	r7, #20
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	40010000 	.word	0x40010000
 8002800:	40000400 	.word	0x40000400
 8002804:	40000800 	.word	0x40000800
 8002808:	40000c00 	.word	0x40000c00
 800280c:	40014000 	.word	0x40014000
 8002810:	40014400 	.word	0x40014400
 8002814:	40014800 	.word	0x40014800

08002818 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002820:	bf00      	nop
 8002822:	370c      	adds	r7, #12
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283e:	4770      	bx	lr

08002840 <__NVIC_SetPriority>:
{
 8002840:	b480      	push	{r7}
 8002842:	b083      	sub	sp, #12
 8002844:	af00      	add	r7, sp, #0
 8002846:	4603      	mov	r3, r0
 8002848:	6039      	str	r1, [r7, #0]
 800284a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800284c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002850:	2b00      	cmp	r3, #0
 8002852:	db0a      	blt.n	800286a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	b2da      	uxtb	r2, r3
 8002858:	490c      	ldr	r1, [pc, #48]	@ (800288c <__NVIC_SetPriority+0x4c>)
 800285a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800285e:	0112      	lsls	r2, r2, #4
 8002860:	b2d2      	uxtb	r2, r2
 8002862:	440b      	add	r3, r1
 8002864:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002868:	e00a      	b.n	8002880 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	b2da      	uxtb	r2, r3
 800286e:	4908      	ldr	r1, [pc, #32]	@ (8002890 <__NVIC_SetPriority+0x50>)
 8002870:	79fb      	ldrb	r3, [r7, #7]
 8002872:	f003 030f 	and.w	r3, r3, #15
 8002876:	3b04      	subs	r3, #4
 8002878:	0112      	lsls	r2, r2, #4
 800287a:	b2d2      	uxtb	r2, r2
 800287c:	440b      	add	r3, r1
 800287e:	761a      	strb	r2, [r3, #24]
}
 8002880:	bf00      	nop
 8002882:	370c      	adds	r7, #12
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000e100 	.word	0xe000e100
 8002890:	e000ed00 	.word	0xe000ed00

08002894 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8002898:	4b05      	ldr	r3, [pc, #20]	@ (80028b0 <SysTick_Handler+0x1c>)
 800289a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800289c:	f001 fd18 	bl	80042d0 <xTaskGetSchedulerState>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d001      	beq.n	80028aa <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80028a6:	f002 fb0f 	bl	8004ec8 <xPortSysTickHandler>
  }
}
 80028aa:	bf00      	nop
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	bf00      	nop
 80028b0:	e000e010 	.word	0xe000e010

080028b4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80028b4:	b580      	push	{r7, lr}
 80028b6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80028b8:	2100      	movs	r1, #0
 80028ba:	f06f 0004 	mvn.w	r0, #4
 80028be:	f7ff ffbf 	bl	8002840 <__NVIC_SetPriority>
#endif
}
 80028c2:	bf00      	nop
 80028c4:	bd80      	pop	{r7, pc}
	...

080028c8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80028c8:	b480      	push	{r7}
 80028ca:	b083      	sub	sp, #12
 80028cc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80028ce:	f3ef 8305 	mrs	r3, IPSR
 80028d2:	603b      	str	r3, [r7, #0]
  return(result);
 80028d4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d003      	beq.n	80028e2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80028da:	f06f 0305 	mvn.w	r3, #5
 80028de:	607b      	str	r3, [r7, #4]
 80028e0:	e00c      	b.n	80028fc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80028e2:	4b0a      	ldr	r3, [pc, #40]	@ (800290c <osKernelInitialize+0x44>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d105      	bne.n	80028f6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80028ea:	4b08      	ldr	r3, [pc, #32]	@ (800290c <osKernelInitialize+0x44>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80028f0:	2300      	movs	r3, #0
 80028f2:	607b      	str	r3, [r7, #4]
 80028f4:	e002      	b.n	80028fc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80028f6:	f04f 33ff 	mov.w	r3, #4294967295
 80028fa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80028fc:	687b      	ldr	r3, [r7, #4]
}
 80028fe:	4618      	mov	r0, r3
 8002900:	370c      	adds	r7, #12
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	20000100 	.word	0x20000100

08002910 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002916:	f3ef 8305 	mrs	r3, IPSR
 800291a:	603b      	str	r3, [r7, #0]
  return(result);
 800291c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <osKernelStart+0x1a>
    stat = osErrorISR;
 8002922:	f06f 0305 	mvn.w	r3, #5
 8002926:	607b      	str	r3, [r7, #4]
 8002928:	e010      	b.n	800294c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800292a:	4b0b      	ldr	r3, [pc, #44]	@ (8002958 <osKernelStart+0x48>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d109      	bne.n	8002946 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8002932:	f7ff ffbf 	bl	80028b4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8002936:	4b08      	ldr	r3, [pc, #32]	@ (8002958 <osKernelStart+0x48>)
 8002938:	2202      	movs	r2, #2
 800293a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800293c:	f001 f87a 	bl	8003a34 <vTaskStartScheduler>
      stat = osOK;
 8002940:	2300      	movs	r3, #0
 8002942:	607b      	str	r3, [r7, #4]
 8002944:	e002      	b.n	800294c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8002946:	f04f 33ff 	mov.w	r3, #4294967295
 800294a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800294c:	687b      	ldr	r3, [r7, #4]
}
 800294e:	4618      	mov	r0, r3
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	20000100 	.word	0x20000100

0800295c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800295c:	b580      	push	{r7, lr}
 800295e:	b08e      	sub	sp, #56	@ 0x38
 8002960:	af04      	add	r7, sp, #16
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8002968:	2300      	movs	r3, #0
 800296a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800296c:	f3ef 8305 	mrs	r3, IPSR
 8002970:	617b      	str	r3, [r7, #20]
  return(result);
 8002972:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8002974:	2b00      	cmp	r3, #0
 8002976:	d17e      	bne.n	8002a76 <osThreadNew+0x11a>
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	2b00      	cmp	r3, #0
 800297c:	d07b      	beq.n	8002a76 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800297e:	2380      	movs	r3, #128	@ 0x80
 8002980:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8002982:	2318      	movs	r3, #24
 8002984:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8002986:	2300      	movs	r3, #0
 8002988:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800298a:	f04f 33ff 	mov.w	r3, #4294967295
 800298e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d045      	beq.n	8002a22 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d002      	beq.n	80029a4 <osThreadNew+0x48>
        name = attr->name;
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	699b      	ldr	r3, [r3, #24]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d002      	beq.n	80029b2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	699b      	ldr	r3, [r3, #24]
 80029b0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d008      	beq.n	80029ca <osThreadNew+0x6e>
 80029b8:	69fb      	ldr	r3, [r7, #28]
 80029ba:	2b38      	cmp	r3, #56	@ 0x38
 80029bc:	d805      	bhi.n	80029ca <osThreadNew+0x6e>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <osThreadNew+0x72>
        return (NULL);
 80029ca:	2300      	movs	r3, #0
 80029cc:	e054      	b.n	8002a78 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d003      	beq.n	80029de <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	695b      	ldr	r3, [r3, #20]
 80029da:	089b      	lsrs	r3, r3, #2
 80029dc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d00e      	beq.n	8002a04 <osThreadNew+0xa8>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	2b5b      	cmp	r3, #91	@ 0x5b
 80029ec:	d90a      	bls.n	8002a04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d006      	beq.n	8002a04 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	695b      	ldr	r3, [r3, #20]
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d002      	beq.n	8002a04 <osThreadNew+0xa8>
        mem = 1;
 80029fe:	2301      	movs	r3, #1
 8002a00:	61bb      	str	r3, [r7, #24]
 8002a02:	e010      	b.n	8002a26 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d10c      	bne.n	8002a26 <osThreadNew+0xca>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	68db      	ldr	r3, [r3, #12]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d108      	bne.n	8002a26 <osThreadNew+0xca>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	691b      	ldr	r3, [r3, #16]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d104      	bne.n	8002a26 <osThreadNew+0xca>
          mem = 0;
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	61bb      	str	r3, [r7, #24]
 8002a20:	e001      	b.n	8002a26 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002a22:	2300      	movs	r3, #0
 8002a24:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002a26:	69bb      	ldr	r3, [r7, #24]
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d110      	bne.n	8002a4e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002a34:	9202      	str	r2, [sp, #8]
 8002a36:	9301      	str	r3, [sp, #4]
 8002a38:	69fb      	ldr	r3, [r7, #28]
 8002a3a:	9300      	str	r3, [sp, #0]
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	6a3a      	ldr	r2, [r7, #32]
 8002a40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a42:	68f8      	ldr	r0, [r7, #12]
 8002a44:	f000 fe1a 	bl	800367c <xTaskCreateStatic>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	e013      	b.n	8002a76 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002a4e:	69bb      	ldr	r3, [r7, #24]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d110      	bne.n	8002a76 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002a54:	6a3b      	ldr	r3, [r7, #32]
 8002a56:	b29a      	uxth	r2, r3
 8002a58:	f107 0310 	add.w	r3, r7, #16
 8002a5c:	9301      	str	r3, [sp, #4]
 8002a5e:	69fb      	ldr	r3, [r7, #28]
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002a66:	68f8      	ldr	r0, [r7, #12]
 8002a68:	f000 fe68 	bl	800373c <xTaskCreate>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	2b01      	cmp	r3, #1
 8002a70:	d001      	beq.n	8002a76 <osThreadNew+0x11a>
            hTask = NULL;
 8002a72:	2300      	movs	r3, #0
 8002a74:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002a76:	693b      	ldr	r3, [r7, #16]
}
 8002a78:	4618      	mov	r0, r3
 8002a7a:	3728      	adds	r7, #40	@ 0x28
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}

08002a80 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b084      	sub	sp, #16
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002a88:	f3ef 8305 	mrs	r3, IPSR
 8002a8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8002a8e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d003      	beq.n	8002a9c <osDelay+0x1c>
    stat = osErrorISR;
 8002a94:	f06f 0305 	mvn.w	r3, #5
 8002a98:	60fb      	str	r3, [r7, #12]
 8002a9a:	e007      	b.n	8002aac <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d002      	beq.n	8002aac <osDelay+0x2c>
      vTaskDelay(ticks);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 ff8e 	bl	80039c8 <vTaskDelay>
    }
  }

  return (stat);
 8002aac:	68fb      	ldr	r3, [r7, #12]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	60f8      	str	r0, [r7, #12]
 8002ac0:	60b9      	str	r1, [r7, #8]
 8002ac2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	4a07      	ldr	r2, [pc, #28]	@ (8002ae4 <vApplicationGetIdleTaskMemory+0x2c>)
 8002ac8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	4a06      	ldr	r2, [pc, #24]	@ (8002ae8 <vApplicationGetIdleTaskMemory+0x30>)
 8002ace:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2280      	movs	r2, #128	@ 0x80
 8002ad4:	601a      	str	r2, [r3, #0]
}
 8002ad6:	bf00      	nop
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr
 8002ae2:	bf00      	nop
 8002ae4:	20000104 	.word	0x20000104
 8002ae8:	20000160 	.word	0x20000160

08002aec <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8002aec:	b480      	push	{r7}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	60b9      	str	r1, [r7, #8]
 8002af6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4a07      	ldr	r2, [pc, #28]	@ (8002b18 <vApplicationGetTimerTaskMemory+0x2c>)
 8002afc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	4a06      	ldr	r2, [pc, #24]	@ (8002b1c <vApplicationGetTimerTaskMemory+0x30>)
 8002b02:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002b0a:	601a      	str	r2, [r3, #0]
}
 8002b0c:	bf00      	nop
 8002b0e:	3714      	adds	r7, #20
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	20000360 	.word	0x20000360
 8002b1c:	200003bc 	.word	0x200003bc

08002b20 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	f103 0208 	add.w	r2, r3, #8
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	f04f 32ff 	mov.w	r2, #4294967295
 8002b38:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f103 0208 	add.w	r2, r3, #8
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	f103 0208 	add.w	r2, r3, #8
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002b60:	b480      	push	{r7}
 8002b62:	b083      	sub	sp, #12
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr

08002b7a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b085      	sub	sp, #20
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002b8a:	683b      	ldr	r3, [r7, #0]
 8002b8c:	68fa      	ldr	r2, [r7, #12]
 8002b8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	689a      	ldr	r2, [r3, #8]
 8002b94:	683b      	ldr	r3, [r7, #0]
 8002b96:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	689b      	ldr	r3, [r3, #8]
 8002b9c:	683a      	ldr	r2, [r7, #0]
 8002b9e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	687a      	ldr	r2, [r7, #4]
 8002baa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	1c5a      	adds	r2, r3, #1
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	601a      	str	r2, [r3, #0]
}
 8002bb6:	bf00      	nop
 8002bb8:	3714      	adds	r7, #20
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc0:	4770      	bx	lr

08002bc2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002bc2:	b480      	push	{r7}
 8002bc4:	b085      	sub	sp, #20
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	6078      	str	r0, [r7, #4]
 8002bca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002bd2:	68bb      	ldr	r3, [r7, #8]
 8002bd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bd8:	d103      	bne.n	8002be2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	691b      	ldr	r3, [r3, #16]
 8002bde:	60fb      	str	r3, [r7, #12]
 8002be0:	e00c      	b.n	8002bfc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	3308      	adds	r3, #8
 8002be6:	60fb      	str	r3, [r7, #12]
 8002be8:	e002      	b.n	8002bf0 <vListInsert+0x2e>
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	685b      	ldr	r3, [r3, #4]
 8002bee:	60fb      	str	r3, [r7, #12]
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	429a      	cmp	r2, r3
 8002bfa:	d2f6      	bcs.n	8002bea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	685a      	ldr	r2, [r3, #4]
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	683a      	ldr	r2, [r7, #0]
 8002c0a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	68fa      	ldr	r2, [r7, #12]
 8002c10:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	687a      	ldr	r2, [r7, #4]
 8002c1c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	1c5a      	adds	r2, r3, #1
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	601a      	str	r2, [r3, #0]
}
 8002c28:	bf00      	nop
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr

08002c34 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6892      	ldr	r2, [r2, #8]
 8002c4a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	687a      	ldr	r2, [r7, #4]
 8002c52:	6852      	ldr	r2, [r2, #4]
 8002c54:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	685b      	ldr	r3, [r3, #4]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	429a      	cmp	r2, r3
 8002c5e:	d103      	bne.n	8002c68 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689a      	ldr	r2, [r3, #8]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	1e5a      	subs	r2, r3, #1
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
}
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	3714      	adds	r7, #20
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b084      	sub	sp, #16
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d10b      	bne.n	8002cb4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002c9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ca0:	f383 8811 	msr	BASEPRI, r3
 8002ca4:	f3bf 8f6f 	isb	sy
 8002ca8:	f3bf 8f4f 	dsb	sy
 8002cac:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8002cae:	bf00      	nop
 8002cb0:	bf00      	nop
 8002cb2:	e7fd      	b.n	8002cb0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8002cb4:	f002 f878 	bl	8004da8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cc0:	68f9      	ldr	r1, [r7, #12]
 8002cc2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002cc4:	fb01 f303 	mul.w	r3, r1, r3
 8002cc8:	441a      	add	r2, r3
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	681a      	ldr	r2, [r3, #0]
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	681a      	ldr	r2, [r3, #0]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ce4:	3b01      	subs	r3, #1
 8002ce6:	68f9      	ldr	r1, [r7, #12]
 8002ce8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002cea:	fb01 f303 	mul.w	r3, r1, r3
 8002cee:	441a      	add	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	22ff      	movs	r2, #255	@ 0xff
 8002cf8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	22ff      	movs	r2, #255	@ 0xff
 8002d00:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d114      	bne.n	8002d34 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	691b      	ldr	r3, [r3, #16]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d01a      	beq.n	8002d48 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	3310      	adds	r3, #16
 8002d16:	4618      	mov	r0, r3
 8002d18:	f001 f91a 	bl	8003f50 <xTaskRemoveFromEventList>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d012      	beq.n	8002d48 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002d22:	4b0d      	ldr	r3, [pc, #52]	@ (8002d58 <xQueueGenericReset+0xd0>)
 8002d24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d28:	601a      	str	r2, [r3, #0]
 8002d2a:	f3bf 8f4f 	dsb	sy
 8002d2e:	f3bf 8f6f 	isb	sy
 8002d32:	e009      	b.n	8002d48 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	3310      	adds	r3, #16
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7ff fef1 	bl	8002b20 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	3324      	adds	r3, #36	@ 0x24
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff feec 	bl	8002b20 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002d48:	f002 f860 	bl	8004e0c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002d4c:	2301      	movs	r3, #1
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	e000ed04 	.word	0xe000ed04

08002d5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08e      	sub	sp, #56	@ 0x38
 8002d60:	af02      	add	r7, sp, #8
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
 8002d68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d10b      	bne.n	8002d88 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8002d70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d74:	f383 8811 	msr	BASEPRI, r3
 8002d78:	f3bf 8f6f 	isb	sy
 8002d7c:	f3bf 8f4f 	dsb	sy
 8002d80:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002d82:	bf00      	nop
 8002d84:	bf00      	nop
 8002d86:	e7fd      	b.n	8002d84 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d10b      	bne.n	8002da6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8002d8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002d92:	f383 8811 	msr	BASEPRI, r3
 8002d96:	f3bf 8f6f 	isb	sy
 8002d9a:	f3bf 8f4f 	dsb	sy
 8002d9e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002da0:	bf00      	nop
 8002da2:	bf00      	nop
 8002da4:	e7fd      	b.n	8002da2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d002      	beq.n	8002db2 <xQueueGenericCreateStatic+0x56>
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <xQueueGenericCreateStatic+0x5a>
 8002db2:	2301      	movs	r3, #1
 8002db4:	e000      	b.n	8002db8 <xQueueGenericCreateStatic+0x5c>
 8002db6:	2300      	movs	r3, #0
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d10b      	bne.n	8002dd4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8002dbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dc0:	f383 8811 	msr	BASEPRI, r3
 8002dc4:	f3bf 8f6f 	isb	sy
 8002dc8:	f3bf 8f4f 	dsb	sy
 8002dcc:	623b      	str	r3, [r7, #32]
}
 8002dce:	bf00      	nop
 8002dd0:	bf00      	nop
 8002dd2:	e7fd      	b.n	8002dd0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d102      	bne.n	8002de0 <xQueueGenericCreateStatic+0x84>
 8002dda:	68bb      	ldr	r3, [r7, #8]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <xQueueGenericCreateStatic+0x88>
 8002de0:	2301      	movs	r3, #1
 8002de2:	e000      	b.n	8002de6 <xQueueGenericCreateStatic+0x8a>
 8002de4:	2300      	movs	r3, #0
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d10b      	bne.n	8002e02 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8002dea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002dee:	f383 8811 	msr	BASEPRI, r3
 8002df2:	f3bf 8f6f 	isb	sy
 8002df6:	f3bf 8f4f 	dsb	sy
 8002dfa:	61fb      	str	r3, [r7, #28]
}
 8002dfc:	bf00      	nop
 8002dfe:	bf00      	nop
 8002e00:	e7fd      	b.n	8002dfe <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002e02:	2350      	movs	r3, #80	@ 0x50
 8002e04:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	2b50      	cmp	r3, #80	@ 0x50
 8002e0a:	d00b      	beq.n	8002e24 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8002e0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002e10:	f383 8811 	msr	BASEPRI, r3
 8002e14:	f3bf 8f6f 	isb	sy
 8002e18:	f3bf 8f4f 	dsb	sy
 8002e1c:	61bb      	str	r3, [r7, #24]
}
 8002e1e:	bf00      	nop
 8002e20:	bf00      	nop
 8002e22:	e7fd      	b.n	8002e20 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002e24:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8002e2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00d      	beq.n	8002e4c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002e30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002e38:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8002e3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e3e:	9300      	str	r3, [sp, #0]
 8002e40:	4613      	mov	r3, r2
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	68b9      	ldr	r1, [r7, #8]
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 f805 	bl	8002e56 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3730      	adds	r7, #48	@ 0x30
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}

08002e56 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002e56:	b580      	push	{r7, lr}
 8002e58:	b084      	sub	sp, #16
 8002e5a:	af00      	add	r7, sp, #0
 8002e5c:	60f8      	str	r0, [r7, #12]
 8002e5e:	60b9      	str	r1, [r7, #8]
 8002e60:	607a      	str	r2, [r7, #4]
 8002e62:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d103      	bne.n	8002e72 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002e6a:	69bb      	ldr	r3, [r7, #24]
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	601a      	str	r2, [r3, #0]
 8002e70:	e002      	b.n	8002e78 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002e72:	69bb      	ldr	r3, [r7, #24]
 8002e74:	687a      	ldr	r2, [r7, #4]
 8002e76:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002e78:	69bb      	ldr	r3, [r7, #24]
 8002e7a:	68fa      	ldr	r2, [r7, #12]
 8002e7c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002e7e:	69bb      	ldr	r3, [r7, #24]
 8002e80:	68ba      	ldr	r2, [r7, #8]
 8002e82:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002e84:	2101      	movs	r1, #1
 8002e86:	69b8      	ldr	r0, [r7, #24]
 8002e88:	f7ff fefe 	bl	8002c88 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002e8c:	69bb      	ldr	r3, [r7, #24]
 8002e8e:	78fa      	ldrb	r2, [r7, #3]
 8002e90:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002e94:	bf00      	nop
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08e      	sub	sp, #56	@ 0x38
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
 8002ea8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002eaa:	2300      	movs	r3, #0
 8002eac:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8002eb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d10b      	bne.n	8002ed0 <xQueueGenericSend+0x34>
	__asm volatile
 8002eb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002ebc:	f383 8811 	msr	BASEPRI, r3
 8002ec0:	f3bf 8f6f 	isb	sy
 8002ec4:	f3bf 8f4f 	dsb	sy
 8002ec8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8002eca:	bf00      	nop
 8002ecc:	bf00      	nop
 8002ece:	e7fd      	b.n	8002ecc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d103      	bne.n	8002ede <xQueueGenericSend+0x42>
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <xQueueGenericSend+0x46>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <xQueueGenericSend+0x48>
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10b      	bne.n	8002f00 <xQueueGenericSend+0x64>
	__asm volatile
 8002ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002eec:	f383 8811 	msr	BASEPRI, r3
 8002ef0:	f3bf 8f6f 	isb	sy
 8002ef4:	f3bf 8f4f 	dsb	sy
 8002ef8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8002efa:	bf00      	nop
 8002efc:	bf00      	nop
 8002efe:	e7fd      	b.n	8002efc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d103      	bne.n	8002f0e <xQueueGenericSend+0x72>
 8002f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <xQueueGenericSend+0x76>
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e000      	b.n	8002f14 <xQueueGenericSend+0x78>
 8002f12:	2300      	movs	r3, #0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d10b      	bne.n	8002f30 <xQueueGenericSend+0x94>
	__asm volatile
 8002f18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f1c:	f383 8811 	msr	BASEPRI, r3
 8002f20:	f3bf 8f6f 	isb	sy
 8002f24:	f3bf 8f4f 	dsb	sy
 8002f28:	623b      	str	r3, [r7, #32]
}
 8002f2a:	bf00      	nop
 8002f2c:	bf00      	nop
 8002f2e:	e7fd      	b.n	8002f2c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002f30:	f001 f9ce 	bl	80042d0 <xTaskGetSchedulerState>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d102      	bne.n	8002f40 <xQueueGenericSend+0xa4>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d101      	bne.n	8002f44 <xQueueGenericSend+0xa8>
 8002f40:	2301      	movs	r3, #1
 8002f42:	e000      	b.n	8002f46 <xQueueGenericSend+0xaa>
 8002f44:	2300      	movs	r3, #0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d10b      	bne.n	8002f62 <xQueueGenericSend+0xc6>
	__asm volatile
 8002f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8002f4e:	f383 8811 	msr	BASEPRI, r3
 8002f52:	f3bf 8f6f 	isb	sy
 8002f56:	f3bf 8f4f 	dsb	sy
 8002f5a:	61fb      	str	r3, [r7, #28]
}
 8002f5c:	bf00      	nop
 8002f5e:	bf00      	nop
 8002f60:	e7fd      	b.n	8002f5e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002f62:	f001 ff21 	bl	8004da8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f68:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d302      	bcc.n	8002f78 <xQueueGenericSend+0xdc>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	2b02      	cmp	r3, #2
 8002f76:	d129      	bne.n	8002fcc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	68b9      	ldr	r1, [r7, #8]
 8002f7c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8002f7e:	f000 fa0f 	bl	80033a0 <prvCopyDataToQueue>
 8002f82:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002f84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d010      	beq.n	8002fae <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f8e:	3324      	adds	r3, #36	@ 0x24
 8002f90:	4618      	mov	r0, r3
 8002f92:	f000 ffdd 	bl	8003f50 <xTaskRemoveFromEventList>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d013      	beq.n	8002fc4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002f9c:	4b3f      	ldr	r3, [pc, #252]	@ (800309c <xQueueGenericSend+0x200>)
 8002f9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fa2:	601a      	str	r2, [r3, #0]
 8002fa4:	f3bf 8f4f 	dsb	sy
 8002fa8:	f3bf 8f6f 	isb	sy
 8002fac:	e00a      	b.n	8002fc4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002fae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d007      	beq.n	8002fc4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002fb4:	4b39      	ldr	r3, [pc, #228]	@ (800309c <xQueueGenericSend+0x200>)
 8002fb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	f3bf 8f4f 	dsb	sy
 8002fc0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002fc4:	f001 ff22 	bl	8004e0c <vPortExitCritical>
				return pdPASS;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	e063      	b.n	8003094 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d103      	bne.n	8002fda <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002fd2:	f001 ff1b 	bl	8004e0c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	e05c      	b.n	8003094 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002fda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d106      	bne.n	8002fee <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002fe0:	f107 0314 	add.w	r3, r7, #20
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f001 f817 	bl	8004018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002fea:	2301      	movs	r3, #1
 8002fec:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002fee:	f001 ff0d 	bl	8004e0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ff2:	f000 fd87 	bl	8003b04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ff6:	f001 fed7 	bl	8004da8 <vPortEnterCritical>
 8002ffa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002ffc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003000:	b25b      	sxtb	r3, r3
 8003002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003006:	d103      	bne.n	8003010 <xQueueGenericSend+0x174>
 8003008:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003010:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003012:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003016:	b25b      	sxtb	r3, r3
 8003018:	f1b3 3fff 	cmp.w	r3, #4294967295
 800301c:	d103      	bne.n	8003026 <xQueueGenericSend+0x18a>
 800301e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003020:	2200      	movs	r2, #0
 8003022:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003026:	f001 fef1 	bl	8004e0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800302a:	1d3a      	adds	r2, r7, #4
 800302c:	f107 0314 	add.w	r3, r7, #20
 8003030:	4611      	mov	r1, r2
 8003032:	4618      	mov	r0, r3
 8003034:	f001 f806 	bl	8004044 <xTaskCheckForTimeOut>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d124      	bne.n	8003088 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800303e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003040:	f000 faa6 	bl	8003590 <prvIsQueueFull>
 8003044:	4603      	mov	r3, r0
 8003046:	2b00      	cmp	r3, #0
 8003048:	d018      	beq.n	800307c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800304a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800304c:	3310      	adds	r3, #16
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	4611      	mov	r1, r2
 8003052:	4618      	mov	r0, r3
 8003054:	f000 ff2a 	bl	8003eac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003058:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800305a:	f000 fa31 	bl	80034c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800305e:	f000 fd5f 	bl	8003b20 <xTaskResumeAll>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	f47f af7c 	bne.w	8002f62 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800306a:	4b0c      	ldr	r3, [pc, #48]	@ (800309c <xQueueGenericSend+0x200>)
 800306c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003070:	601a      	str	r2, [r3, #0]
 8003072:	f3bf 8f4f 	dsb	sy
 8003076:	f3bf 8f6f 	isb	sy
 800307a:	e772      	b.n	8002f62 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800307c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800307e:	f000 fa1f 	bl	80034c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003082:	f000 fd4d 	bl	8003b20 <xTaskResumeAll>
 8003086:	e76c      	b.n	8002f62 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003088:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800308a:	f000 fa19 	bl	80034c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800308e:	f000 fd47 	bl	8003b20 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003092:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003094:	4618      	mov	r0, r3
 8003096:	3738      	adds	r7, #56	@ 0x38
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}
 800309c:	e000ed04 	.word	0xe000ed04

080030a0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b090      	sub	sp, #64	@ 0x40
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	60f8      	str	r0, [r7, #12]
 80030a8:	60b9      	str	r1, [r7, #8]
 80030aa:	607a      	str	r2, [r7, #4]
 80030ac:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80030b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d10b      	bne.n	80030d0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80030b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030bc:	f383 8811 	msr	BASEPRI, r3
 80030c0:	f3bf 8f6f 	isb	sy
 80030c4:	f3bf 8f4f 	dsb	sy
 80030c8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80030ca:	bf00      	nop
 80030cc:	bf00      	nop
 80030ce:	e7fd      	b.n	80030cc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d103      	bne.n	80030de <xQueueGenericSendFromISR+0x3e>
 80030d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80030d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <xQueueGenericSendFromISR+0x42>
 80030de:	2301      	movs	r3, #1
 80030e0:	e000      	b.n	80030e4 <xQueueGenericSendFromISR+0x44>
 80030e2:	2300      	movs	r3, #0
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d10b      	bne.n	8003100 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80030e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80030ec:	f383 8811 	msr	BASEPRI, r3
 80030f0:	f3bf 8f6f 	isb	sy
 80030f4:	f3bf 8f4f 	dsb	sy
 80030f8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80030fa:	bf00      	nop
 80030fc:	bf00      	nop
 80030fe:	e7fd      	b.n	80030fc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	2b02      	cmp	r3, #2
 8003104:	d103      	bne.n	800310e <xQueueGenericSendFromISR+0x6e>
 8003106:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800310a:	2b01      	cmp	r3, #1
 800310c:	d101      	bne.n	8003112 <xQueueGenericSendFromISR+0x72>
 800310e:	2301      	movs	r3, #1
 8003110:	e000      	b.n	8003114 <xQueueGenericSendFromISR+0x74>
 8003112:	2300      	movs	r3, #0
 8003114:	2b00      	cmp	r3, #0
 8003116:	d10b      	bne.n	8003130 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800311c:	f383 8811 	msr	BASEPRI, r3
 8003120:	f3bf 8f6f 	isb	sy
 8003124:	f3bf 8f4f 	dsb	sy
 8003128:	623b      	str	r3, [r7, #32]
}
 800312a:	bf00      	nop
 800312c:	bf00      	nop
 800312e:	e7fd      	b.n	800312c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003130:	f001 ff1a 	bl	8004f68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003134:	f3ef 8211 	mrs	r2, BASEPRI
 8003138:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800313c:	f383 8811 	msr	BASEPRI, r3
 8003140:	f3bf 8f6f 	isb	sy
 8003144:	f3bf 8f4f 	dsb	sy
 8003148:	61fa      	str	r2, [r7, #28]
 800314a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800314c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800314e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003150:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003152:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003154:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003158:	429a      	cmp	r2, r3
 800315a:	d302      	bcc.n	8003162 <xQueueGenericSendFromISR+0xc2>
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	2b02      	cmp	r3, #2
 8003160:	d12f      	bne.n	80031c2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003162:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003164:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003168:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800316c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800316e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003170:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003172:	683a      	ldr	r2, [r7, #0]
 8003174:	68b9      	ldr	r1, [r7, #8]
 8003176:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8003178:	f000 f912 	bl	80033a0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800317c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8003180:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003184:	d112      	bne.n	80031ac <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800318a:	2b00      	cmp	r3, #0
 800318c:	d016      	beq.n	80031bc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800318e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003190:	3324      	adds	r3, #36	@ 0x24
 8003192:	4618      	mov	r0, r3
 8003194:	f000 fedc 	bl	8003f50 <xTaskRemoveFromEventList>
 8003198:	4603      	mov	r3, r0
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00e      	beq.n	80031bc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d00b      	beq.n	80031bc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	e007      	b.n	80031bc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80031ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80031b0:	3301      	adds	r3, #1
 80031b2:	b2db      	uxtb	r3, r3
 80031b4:	b25a      	sxtb	r2, r3
 80031b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80031b8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80031bc:	2301      	movs	r3, #1
 80031be:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80031c0:	e001      	b.n	80031c6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80031c2:	2300      	movs	r3, #0
 80031c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80031c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80031c8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80031d0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80031d2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3740      	adds	r7, #64	@ 0x40
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80031dc:	b580      	push	{r7, lr}
 80031de:	b08c      	sub	sp, #48	@ 0x30
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	60f8      	str	r0, [r7, #12]
 80031e4:	60b9      	str	r1, [r7, #8]
 80031e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80031e8:	2300      	movs	r3, #0
 80031ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80031f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d10b      	bne.n	800320e <xQueueReceive+0x32>
	__asm volatile
 80031f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80031fa:	f383 8811 	msr	BASEPRI, r3
 80031fe:	f3bf 8f6f 	isb	sy
 8003202:	f3bf 8f4f 	dsb	sy
 8003206:	623b      	str	r3, [r7, #32]
}
 8003208:	bf00      	nop
 800320a:	bf00      	nop
 800320c:	e7fd      	b.n	800320a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d103      	bne.n	800321c <xQueueReceive+0x40>
 8003214:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003216:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003218:	2b00      	cmp	r3, #0
 800321a:	d101      	bne.n	8003220 <xQueueReceive+0x44>
 800321c:	2301      	movs	r3, #1
 800321e:	e000      	b.n	8003222 <xQueueReceive+0x46>
 8003220:	2300      	movs	r3, #0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d10b      	bne.n	800323e <xQueueReceive+0x62>
	__asm volatile
 8003226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800322a:	f383 8811 	msr	BASEPRI, r3
 800322e:	f3bf 8f6f 	isb	sy
 8003232:	f3bf 8f4f 	dsb	sy
 8003236:	61fb      	str	r3, [r7, #28]
}
 8003238:	bf00      	nop
 800323a:	bf00      	nop
 800323c:	e7fd      	b.n	800323a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800323e:	f001 f847 	bl	80042d0 <xTaskGetSchedulerState>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d102      	bne.n	800324e <xQueueReceive+0x72>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2b00      	cmp	r3, #0
 800324c:	d101      	bne.n	8003252 <xQueueReceive+0x76>
 800324e:	2301      	movs	r3, #1
 8003250:	e000      	b.n	8003254 <xQueueReceive+0x78>
 8003252:	2300      	movs	r3, #0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10b      	bne.n	8003270 <xQueueReceive+0x94>
	__asm volatile
 8003258:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800325c:	f383 8811 	msr	BASEPRI, r3
 8003260:	f3bf 8f6f 	isb	sy
 8003264:	f3bf 8f4f 	dsb	sy
 8003268:	61bb      	str	r3, [r7, #24]
}
 800326a:	bf00      	nop
 800326c:	bf00      	nop
 800326e:	e7fd      	b.n	800326c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003270:	f001 fd9a 	bl	8004da8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003274:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003278:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800327a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800327c:	2b00      	cmp	r3, #0
 800327e:	d01f      	beq.n	80032c0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003280:	68b9      	ldr	r1, [r7, #8]
 8003282:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003284:	f000 f8f6 	bl	8003474 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003288:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800328a:	1e5a      	subs	r2, r3, #1
 800328c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800328e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d00f      	beq.n	80032b8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800329a:	3310      	adds	r3, #16
 800329c:	4618      	mov	r0, r3
 800329e:	f000 fe57 	bl	8003f50 <xTaskRemoveFromEventList>
 80032a2:	4603      	mov	r3, r0
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d007      	beq.n	80032b8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80032a8:	4b3c      	ldr	r3, [pc, #240]	@ (800339c <xQueueReceive+0x1c0>)
 80032aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80032ae:	601a      	str	r2, [r3, #0]
 80032b0:	f3bf 8f4f 	dsb	sy
 80032b4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80032b8:	f001 fda8 	bl	8004e0c <vPortExitCritical>
				return pdPASS;
 80032bc:	2301      	movs	r3, #1
 80032be:	e069      	b.n	8003394 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d103      	bne.n	80032ce <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80032c6:	f001 fda1 	bl	8004e0c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80032ca:	2300      	movs	r3, #0
 80032cc:	e062      	b.n	8003394 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80032ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d106      	bne.n	80032e2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80032d4:	f107 0310 	add.w	r3, r7, #16
 80032d8:	4618      	mov	r0, r3
 80032da:	f000 fe9d 	bl	8004018 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80032de:	2301      	movs	r3, #1
 80032e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80032e2:	f001 fd93 	bl	8004e0c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80032e6:	f000 fc0d 	bl	8003b04 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80032ea:	f001 fd5d 	bl	8004da8 <vPortEnterCritical>
 80032ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80032f4:	b25b      	sxtb	r3, r3
 80032f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032fa:	d103      	bne.n	8003304 <xQueueReceive+0x128>
 80032fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003306:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800330a:	b25b      	sxtb	r3, r3
 800330c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003310:	d103      	bne.n	800331a <xQueueReceive+0x13e>
 8003312:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003314:	2200      	movs	r2, #0
 8003316:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800331a:	f001 fd77 	bl	8004e0c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800331e:	1d3a      	adds	r2, r7, #4
 8003320:	f107 0310 	add.w	r3, r7, #16
 8003324:	4611      	mov	r1, r2
 8003326:	4618      	mov	r0, r3
 8003328:	f000 fe8c 	bl	8004044 <xTaskCheckForTimeOut>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d123      	bne.n	800337a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003332:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003334:	f000 f916 	bl	8003564 <prvIsQueueEmpty>
 8003338:	4603      	mov	r3, r0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d017      	beq.n	800336e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800333e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003340:	3324      	adds	r3, #36	@ 0x24
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	4611      	mov	r1, r2
 8003346:	4618      	mov	r0, r3
 8003348:	f000 fdb0 	bl	8003eac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800334c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800334e:	f000 f8b7 	bl	80034c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003352:	f000 fbe5 	bl	8003b20 <xTaskResumeAll>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d189      	bne.n	8003270 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800335c:	4b0f      	ldr	r3, [pc, #60]	@ (800339c <xQueueReceive+0x1c0>)
 800335e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003362:	601a      	str	r2, [r3, #0]
 8003364:	f3bf 8f4f 	dsb	sy
 8003368:	f3bf 8f6f 	isb	sy
 800336c:	e780      	b.n	8003270 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800336e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003370:	f000 f8a6 	bl	80034c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003374:	f000 fbd4 	bl	8003b20 <xTaskResumeAll>
 8003378:	e77a      	b.n	8003270 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800337a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800337c:	f000 f8a0 	bl	80034c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003380:	f000 fbce 	bl	8003b20 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003384:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003386:	f000 f8ed 	bl	8003564 <prvIsQueueEmpty>
 800338a:	4603      	mov	r3, r0
 800338c:	2b00      	cmp	r3, #0
 800338e:	f43f af6f 	beq.w	8003270 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003392:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003394:	4618      	mov	r0, r3
 8003396:	3730      	adds	r7, #48	@ 0x30
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	e000ed04 	.word	0xe000ed04

080033a0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b086      	sub	sp, #24
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	60f8      	str	r0, [r7, #12]
 80033a8:	60b9      	str	r1, [r7, #8]
 80033aa:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80033ac:	2300      	movs	r3, #0
 80033ae:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80033b4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10d      	bne.n	80033da <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d14d      	bne.n	8003462 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	689b      	ldr	r3, [r3, #8]
 80033ca:	4618      	mov	r0, r3
 80033cc:	f000 ff9e 	bl	800430c <xTaskPriorityDisinherit>
 80033d0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2200      	movs	r2, #0
 80033d6:	609a      	str	r2, [r3, #8]
 80033d8:	e043      	b.n	8003462 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d119      	bne.n	8003414 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	6858      	ldr	r0, [r3, #4]
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e8:	461a      	mov	r2, r3
 80033ea:	68b9      	ldr	r1, [r7, #8]
 80033ec:	f002 f818 	bl	8005420 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033f8:	441a      	add	r2, r3
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	685a      	ldr	r2, [r3, #4]
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	429a      	cmp	r2, r3
 8003408:	d32b      	bcc.n	8003462 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	605a      	str	r2, [r3, #4]
 8003412:	e026      	b.n	8003462 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	68d8      	ldr	r0, [r3, #12]
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800341c:	461a      	mov	r2, r3
 800341e:	68b9      	ldr	r1, [r7, #8]
 8003420:	f001 fffe 	bl	8005420 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	68da      	ldr	r2, [r3, #12]
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800342c:	425b      	negs	r3, r3
 800342e:	441a      	add	r2, r3
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	68da      	ldr	r2, [r3, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d207      	bcs.n	8003450 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003448:	425b      	negs	r3, r3
 800344a:	441a      	add	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d105      	bne.n	8003462 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d002      	beq.n	8003462 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800345c:	693b      	ldr	r3, [r7, #16]
 800345e:	3b01      	subs	r3, #1
 8003460:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1c5a      	adds	r2, r3, #1
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800346a:	697b      	ldr	r3, [r7, #20]
}
 800346c:	4618      	mov	r0, r3
 800346e:	3718      	adds	r7, #24
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}

08003474 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003474:	b580      	push	{r7, lr}
 8003476:	b082      	sub	sp, #8
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003482:	2b00      	cmp	r3, #0
 8003484:	d018      	beq.n	80034b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	68da      	ldr	r2, [r3, #12]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348e:	441a      	add	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	68da      	ldr	r2, [r3, #12]
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	429a      	cmp	r2, r3
 800349e:	d303      	bcc.n	80034a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68d9      	ldr	r1, [r3, #12]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b0:	461a      	mov	r2, r3
 80034b2:	6838      	ldr	r0, [r7, #0]
 80034b4:	f001 ffb4 	bl	8005420 <memcpy>
	}
}
 80034b8:	bf00      	nop
 80034ba:	3708      	adds	r7, #8
 80034bc:	46bd      	mov	sp, r7
 80034be:	bd80      	pop	{r7, pc}

080034c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80034c8:	f001 fc6e 	bl	8004da8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80034d2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034d4:	e011      	b.n	80034fa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d012      	beq.n	8003504 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	3324      	adds	r3, #36	@ 0x24
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 fd34 	bl	8003f50 <xTaskRemoveFromEventList>
 80034e8:	4603      	mov	r3, r0
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80034ee:	f000 fe0d 	bl	800410c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80034f2:	7bfb      	ldrb	r3, [r7, #15]
 80034f4:	3b01      	subs	r3, #1
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80034fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	dce9      	bgt.n	80034d6 <prvUnlockQueue+0x16>
 8003502:	e000      	b.n	8003506 <prvUnlockQueue+0x46>
					break;
 8003504:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	22ff      	movs	r2, #255	@ 0xff
 800350a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800350e:	f001 fc7d 	bl	8004e0c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003512:	f001 fc49 	bl	8004da8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800351c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800351e:	e011      	b.n	8003544 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	691b      	ldr	r3, [r3, #16]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d012      	beq.n	800354e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	3310      	adds	r3, #16
 800352c:	4618      	mov	r0, r3
 800352e:	f000 fd0f 	bl	8003f50 <xTaskRemoveFromEventList>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d001      	beq.n	800353c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003538:	f000 fde8 	bl	800410c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800353c:	7bbb      	ldrb	r3, [r7, #14]
 800353e:	3b01      	subs	r3, #1
 8003540:	b2db      	uxtb	r3, r3
 8003542:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003544:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003548:	2b00      	cmp	r3, #0
 800354a:	dce9      	bgt.n	8003520 <prvUnlockQueue+0x60>
 800354c:	e000      	b.n	8003550 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800354e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	22ff      	movs	r2, #255	@ 0xff
 8003554:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003558:	f001 fc58 	bl	8004e0c <vPortExitCritical>
}
 800355c:	bf00      	nop
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}

08003564 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003564:	b580      	push	{r7, lr}
 8003566:	b084      	sub	sp, #16
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800356c:	f001 fc1c 	bl	8004da8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003574:	2b00      	cmp	r3, #0
 8003576:	d102      	bne.n	800357e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003578:	2301      	movs	r3, #1
 800357a:	60fb      	str	r3, [r7, #12]
 800357c:	e001      	b.n	8003582 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800357e:	2300      	movs	r3, #0
 8003580:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003582:	f001 fc43 	bl	8004e0c <vPortExitCritical>

	return xReturn;
 8003586:	68fb      	ldr	r3, [r7, #12]
}
 8003588:	4618      	mov	r0, r3
 800358a:	3710      	adds	r7, #16
 800358c:	46bd      	mov	sp, r7
 800358e:	bd80      	pop	{r7, pc}

08003590 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003590:	b580      	push	{r7, lr}
 8003592:	b084      	sub	sp, #16
 8003594:	af00      	add	r7, sp, #0
 8003596:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003598:	f001 fc06 	bl	8004da8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a4:	429a      	cmp	r2, r3
 80035a6:	d102      	bne.n	80035ae <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80035a8:	2301      	movs	r3, #1
 80035aa:	60fb      	str	r3, [r7, #12]
 80035ac:	e001      	b.n	80035b2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80035ae:	2300      	movs	r3, #0
 80035b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80035b2:	f001 fc2b 	bl	8004e0c <vPortExitCritical>

	return xReturn;
 80035b6:	68fb      	ldr	r3, [r7, #12]
}
 80035b8:	4618      	mov	r0, r3
 80035ba:	3710      	adds	r7, #16
 80035bc:	46bd      	mov	sp, r7
 80035be:	bd80      	pop	{r7, pc}

080035c0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80035c0:	b480      	push	{r7}
 80035c2:	b085      	sub	sp, #20
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	6078      	str	r0, [r7, #4]
 80035c8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035ca:	2300      	movs	r3, #0
 80035cc:	60fb      	str	r3, [r7, #12]
 80035ce:	e014      	b.n	80035fa <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80035d0:	4a0f      	ldr	r2, [pc, #60]	@ (8003610 <vQueueAddToRegistry+0x50>)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d10b      	bne.n	80035f4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80035dc:	490c      	ldr	r1, [pc, #48]	@ (8003610 <vQueueAddToRegistry+0x50>)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	683a      	ldr	r2, [r7, #0]
 80035e2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80035e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003610 <vQueueAddToRegistry+0x50>)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	00db      	lsls	r3, r3, #3
 80035ec:	4413      	add	r3, r2
 80035ee:	687a      	ldr	r2, [r7, #4]
 80035f0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80035f2:	e006      	b.n	8003602 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	3301      	adds	r3, #1
 80035f8:	60fb      	str	r3, [r7, #12]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2b07      	cmp	r3, #7
 80035fe:	d9e7      	bls.n	80035d0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003600:	bf00      	nop
 8003602:	bf00      	nop
 8003604:	3714      	adds	r7, #20
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	200007bc 	.word	0x200007bc

08003614 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	60f8      	str	r0, [r7, #12]
 800361c:	60b9      	str	r1, [r7, #8]
 800361e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003624:	f001 fbc0 	bl	8004da8 <vPortEnterCritical>
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800362e:	b25b      	sxtb	r3, r3
 8003630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003634:	d103      	bne.n	800363e <vQueueWaitForMessageRestricted+0x2a>
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003644:	b25b      	sxtb	r3, r3
 8003646:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364a:	d103      	bne.n	8003654 <vQueueWaitForMessageRestricted+0x40>
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003654:	f001 fbda 	bl	8004e0c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800365c:	2b00      	cmp	r3, #0
 800365e:	d106      	bne.n	800366e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	3324      	adds	r3, #36	@ 0x24
 8003664:	687a      	ldr	r2, [r7, #4]
 8003666:	68b9      	ldr	r1, [r7, #8]
 8003668:	4618      	mov	r0, r3
 800366a:	f000 fc45 	bl	8003ef8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800366e:	6978      	ldr	r0, [r7, #20]
 8003670:	f7ff ff26 	bl	80034c0 <prvUnlockQueue>
	}
 8003674:	bf00      	nop
 8003676:	3718      	adds	r7, #24
 8003678:	46bd      	mov	sp, r7
 800367a:	bd80      	pop	{r7, pc}

0800367c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800367c:	b580      	push	{r7, lr}
 800367e:	b08e      	sub	sp, #56	@ 0x38
 8003680:	af04      	add	r7, sp, #16
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
 8003688:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800368a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800368c:	2b00      	cmp	r3, #0
 800368e:	d10b      	bne.n	80036a8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003694:	f383 8811 	msr	BASEPRI, r3
 8003698:	f3bf 8f6f 	isb	sy
 800369c:	f3bf 8f4f 	dsb	sy
 80036a0:	623b      	str	r3, [r7, #32]
}
 80036a2:	bf00      	nop
 80036a4:	bf00      	nop
 80036a6:	e7fd      	b.n	80036a4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80036a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d10b      	bne.n	80036c6 <xTaskCreateStatic+0x4a>
	__asm volatile
 80036ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036b2:	f383 8811 	msr	BASEPRI, r3
 80036b6:	f3bf 8f6f 	isb	sy
 80036ba:	f3bf 8f4f 	dsb	sy
 80036be:	61fb      	str	r3, [r7, #28]
}
 80036c0:	bf00      	nop
 80036c2:	bf00      	nop
 80036c4:	e7fd      	b.n	80036c2 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80036c6:	235c      	movs	r3, #92	@ 0x5c
 80036c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	2b5c      	cmp	r3, #92	@ 0x5c
 80036ce:	d00b      	beq.n	80036e8 <xTaskCreateStatic+0x6c>
	__asm volatile
 80036d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036d4:	f383 8811 	msr	BASEPRI, r3
 80036d8:	f3bf 8f6f 	isb	sy
 80036dc:	f3bf 8f4f 	dsb	sy
 80036e0:	61bb      	str	r3, [r7, #24]
}
 80036e2:	bf00      	nop
 80036e4:	bf00      	nop
 80036e6:	e7fd      	b.n	80036e4 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80036e8:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80036ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d01e      	beq.n	800372e <xTaskCreateStatic+0xb2>
 80036f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d01b      	beq.n	800372e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80036f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036f8:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80036fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80036fe:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003702:	2202      	movs	r2, #2
 8003704:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003708:	2300      	movs	r3, #0
 800370a:	9303      	str	r3, [sp, #12]
 800370c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800370e:	9302      	str	r3, [sp, #8]
 8003710:	f107 0314 	add.w	r3, r7, #20
 8003714:	9301      	str	r3, [sp, #4]
 8003716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003718:	9300      	str	r3, [sp, #0]
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	68b9      	ldr	r1, [r7, #8]
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f000 f850 	bl	80037c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003726:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003728:	f000 f8de 	bl	80038e8 <prvAddNewTaskToReadyList>
 800372c:	e001      	b.n	8003732 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800372e:	2300      	movs	r3, #0
 8003730:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003732:	697b      	ldr	r3, [r7, #20]
	}
 8003734:	4618      	mov	r0, r3
 8003736:	3728      	adds	r7, #40	@ 0x28
 8003738:	46bd      	mov	sp, r7
 800373a:	bd80      	pop	{r7, pc}

0800373c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800373c:	b580      	push	{r7, lr}
 800373e:	b08c      	sub	sp, #48	@ 0x30
 8003740:	af04      	add	r7, sp, #16
 8003742:	60f8      	str	r0, [r7, #12]
 8003744:	60b9      	str	r1, [r7, #8]
 8003746:	603b      	str	r3, [r7, #0]
 8003748:	4613      	mov	r3, r2
 800374a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800374c:	88fb      	ldrh	r3, [r7, #6]
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4618      	mov	r0, r3
 8003752:	f001 fc4b 	bl	8004fec <pvPortMalloc>
 8003756:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d00e      	beq.n	800377c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800375e:	205c      	movs	r0, #92	@ 0x5c
 8003760:	f001 fc44 	bl	8004fec <pvPortMalloc>
 8003764:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003766:	69fb      	ldr	r3, [r7, #28]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d003      	beq.n	8003774 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800376c:	69fb      	ldr	r3, [r7, #28]
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	631a      	str	r2, [r3, #48]	@ 0x30
 8003772:	e005      	b.n	8003780 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003774:	6978      	ldr	r0, [r7, #20]
 8003776:	f001 fd07 	bl	8005188 <vPortFree>
 800377a:	e001      	b.n	8003780 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800377c:	2300      	movs	r3, #0
 800377e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d017      	beq.n	80037b6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003786:	69fb      	ldr	r3, [r7, #28]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800378e:	88fa      	ldrh	r2, [r7, #6]
 8003790:	2300      	movs	r3, #0
 8003792:	9303      	str	r3, [sp, #12]
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	9302      	str	r3, [sp, #8]
 8003798:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800379a:	9301      	str	r3, [sp, #4]
 800379c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800379e:	9300      	str	r3, [sp, #0]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	68b9      	ldr	r1, [r7, #8]
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f000 f80e 	bl	80037c6 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80037aa:	69f8      	ldr	r0, [r7, #28]
 80037ac:	f000 f89c 	bl	80038e8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80037b0:	2301      	movs	r3, #1
 80037b2:	61bb      	str	r3, [r7, #24]
 80037b4:	e002      	b.n	80037bc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80037b6:	f04f 33ff 	mov.w	r3, #4294967295
 80037ba:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80037bc:	69bb      	ldr	r3, [r7, #24]
	}
 80037be:	4618      	mov	r0, r3
 80037c0:	3720      	adds	r7, #32
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b088      	sub	sp, #32
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	60f8      	str	r0, [r7, #12]
 80037ce:	60b9      	str	r1, [r7, #8]
 80037d0:	607a      	str	r2, [r7, #4]
 80037d2:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80037d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037d6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	009b      	lsls	r3, r3, #2
 80037dc:	461a      	mov	r2, r3
 80037de:	21a5      	movs	r1, #165	@ 0xa5
 80037e0:	f001 fdf2 	bl	80053c8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80037e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80037ee:	3b01      	subs	r3, #1
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4413      	add	r3, r2
 80037f4:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80037f6:	69bb      	ldr	r3, [r7, #24]
 80037f8:	f023 0307 	bic.w	r3, r3, #7
 80037fc:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	f003 0307 	and.w	r3, r3, #7
 8003804:	2b00      	cmp	r3, #0
 8003806:	d00b      	beq.n	8003820 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8003808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800380c:	f383 8811 	msr	BASEPRI, r3
 8003810:	f3bf 8f6f 	isb	sy
 8003814:	f3bf 8f4f 	dsb	sy
 8003818:	617b      	str	r3, [r7, #20]
}
 800381a:	bf00      	nop
 800381c:	bf00      	nop
 800381e:	e7fd      	b.n	800381c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d01f      	beq.n	8003866 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003826:	2300      	movs	r3, #0
 8003828:	61fb      	str	r3, [r7, #28]
 800382a:	e012      	b.n	8003852 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800382c:	68ba      	ldr	r2, [r7, #8]
 800382e:	69fb      	ldr	r3, [r7, #28]
 8003830:	4413      	add	r3, r2
 8003832:	7819      	ldrb	r1, [r3, #0]
 8003834:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	4413      	add	r3, r2
 800383a:	3334      	adds	r3, #52	@ 0x34
 800383c:	460a      	mov	r2, r1
 800383e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003840:	68ba      	ldr	r2, [r7, #8]
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	4413      	add	r3, r2
 8003846:	781b      	ldrb	r3, [r3, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d006      	beq.n	800385a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800384c:	69fb      	ldr	r3, [r7, #28]
 800384e:	3301      	adds	r3, #1
 8003850:	61fb      	str	r3, [r7, #28]
 8003852:	69fb      	ldr	r3, [r7, #28]
 8003854:	2b0f      	cmp	r3, #15
 8003856:	d9e9      	bls.n	800382c <prvInitialiseNewTask+0x66>
 8003858:	e000      	b.n	800385c <prvInitialiseNewTask+0x96>
			{
				break;
 800385a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800385c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003864:	e003      	b.n	800386e <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003866:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800386e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003870:	2b37      	cmp	r3, #55	@ 0x37
 8003872:	d901      	bls.n	8003878 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003874:	2337      	movs	r3, #55	@ 0x37
 8003876:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800387a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800387c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800387e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003880:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003882:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8003884:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003886:	2200      	movs	r2, #0
 8003888:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800388a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800388c:	3304      	adds	r3, #4
 800388e:	4618      	mov	r0, r3
 8003890:	f7ff f966 	bl	8002b60 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003894:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003896:	3318      	adds	r3, #24
 8003898:	4618      	mov	r0, r3
 800389a:	f7ff f961 	bl	8002b60 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800389e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038a6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80038aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80038ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038b2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80038b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038b6:	2200      	movs	r2, #0
 80038b8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80038ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	68f9      	ldr	r1, [r7, #12]
 80038c6:	69b8      	ldr	r0, [r7, #24]
 80038c8:	f001 f93e 	bl	8004b48 <pxPortInitialiseStack>
 80038cc:	4602      	mov	r2, r0
 80038ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80038d0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80038d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d002      	beq.n	80038de <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80038d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038dc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80038de:	bf00      	nop
 80038e0:	3720      	adds	r7, #32
 80038e2:	46bd      	mov	sp, r7
 80038e4:	bd80      	pop	{r7, pc}
	...

080038e8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80038f0:	f001 fa5a 	bl	8004da8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80038f4:	4b2d      	ldr	r3, [pc, #180]	@ (80039ac <prvAddNewTaskToReadyList+0xc4>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	3301      	adds	r3, #1
 80038fa:	4a2c      	ldr	r2, [pc, #176]	@ (80039ac <prvAddNewTaskToReadyList+0xc4>)
 80038fc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80038fe:	4b2c      	ldr	r3, [pc, #176]	@ (80039b0 <prvAddNewTaskToReadyList+0xc8>)
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d109      	bne.n	800391a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003906:	4a2a      	ldr	r2, [pc, #168]	@ (80039b0 <prvAddNewTaskToReadyList+0xc8>)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800390c:	4b27      	ldr	r3, [pc, #156]	@ (80039ac <prvAddNewTaskToReadyList+0xc4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d110      	bne.n	8003936 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003914:	f000 fc1e 	bl	8004154 <prvInitialiseTaskLists>
 8003918:	e00d      	b.n	8003936 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800391a:	4b26      	ldr	r3, [pc, #152]	@ (80039b4 <prvAddNewTaskToReadyList+0xcc>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d109      	bne.n	8003936 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003922:	4b23      	ldr	r3, [pc, #140]	@ (80039b0 <prvAddNewTaskToReadyList+0xc8>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392c:	429a      	cmp	r2, r3
 800392e:	d802      	bhi.n	8003936 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003930:	4a1f      	ldr	r2, [pc, #124]	@ (80039b0 <prvAddNewTaskToReadyList+0xc8>)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003936:	4b20      	ldr	r3, [pc, #128]	@ (80039b8 <prvAddNewTaskToReadyList+0xd0>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	3301      	adds	r3, #1
 800393c:	4a1e      	ldr	r2, [pc, #120]	@ (80039b8 <prvAddNewTaskToReadyList+0xd0>)
 800393e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003940:	4b1d      	ldr	r3, [pc, #116]	@ (80039b8 <prvAddNewTaskToReadyList+0xd0>)
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800394c:	4b1b      	ldr	r3, [pc, #108]	@ (80039bc <prvAddNewTaskToReadyList+0xd4>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	429a      	cmp	r2, r3
 8003952:	d903      	bls.n	800395c <prvAddNewTaskToReadyList+0x74>
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003958:	4a18      	ldr	r2, [pc, #96]	@ (80039bc <prvAddNewTaskToReadyList+0xd4>)
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003960:	4613      	mov	r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	4a15      	ldr	r2, [pc, #84]	@ (80039c0 <prvAddNewTaskToReadyList+0xd8>)
 800396a:	441a      	add	r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	3304      	adds	r3, #4
 8003970:	4619      	mov	r1, r3
 8003972:	4610      	mov	r0, r2
 8003974:	f7ff f901 	bl	8002b7a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003978:	f001 fa48 	bl	8004e0c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800397c:	4b0d      	ldr	r3, [pc, #52]	@ (80039b4 <prvAddNewTaskToReadyList+0xcc>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	2b00      	cmp	r3, #0
 8003982:	d00e      	beq.n	80039a2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003984:	4b0a      	ldr	r3, [pc, #40]	@ (80039b0 <prvAddNewTaskToReadyList+0xc8>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800398e:	429a      	cmp	r2, r3
 8003990:	d207      	bcs.n	80039a2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003992:	4b0c      	ldr	r3, [pc, #48]	@ (80039c4 <prvAddNewTaskToReadyList+0xdc>)
 8003994:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	f3bf 8f4f 	dsb	sy
 800399e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80039a2:	bf00      	nop
 80039a4:	3708      	adds	r7, #8
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	20000cd0 	.word	0x20000cd0
 80039b0:	200007fc 	.word	0x200007fc
 80039b4:	20000cdc 	.word	0x20000cdc
 80039b8:	20000cec 	.word	0x20000cec
 80039bc:	20000cd8 	.word	0x20000cd8
 80039c0:	20000800 	.word	0x20000800
 80039c4:	e000ed04 	.word	0xe000ed04

080039c8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b084      	sub	sp, #16
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80039d0:	2300      	movs	r3, #0
 80039d2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d018      	beq.n	8003a0c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80039da:	4b14      	ldr	r3, [pc, #80]	@ (8003a2c <vTaskDelay+0x64>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00b      	beq.n	80039fa <vTaskDelay+0x32>
	__asm volatile
 80039e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80039e6:	f383 8811 	msr	BASEPRI, r3
 80039ea:	f3bf 8f6f 	isb	sy
 80039ee:	f3bf 8f4f 	dsb	sy
 80039f2:	60bb      	str	r3, [r7, #8]
}
 80039f4:	bf00      	nop
 80039f6:	bf00      	nop
 80039f8:	e7fd      	b.n	80039f6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80039fa:	f000 f883 	bl	8003b04 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80039fe:	2100      	movs	r1, #0
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f000 fcf3 	bl	80043ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003a06:	f000 f88b 	bl	8003b20 <xTaskResumeAll>
 8003a0a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d107      	bne.n	8003a22 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8003a12:	4b07      	ldr	r3, [pc, #28]	@ (8003a30 <vTaskDelay+0x68>)
 8003a14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	f3bf 8f4f 	dsb	sy
 8003a1e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003a22:	bf00      	nop
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	20000cf8 	.word	0x20000cf8
 8003a30:	e000ed04 	.word	0xe000ed04

08003a34 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003a34:	b580      	push	{r7, lr}
 8003a36:	b08a      	sub	sp, #40	@ 0x28
 8003a38:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003a42:	463a      	mov	r2, r7
 8003a44:	1d39      	adds	r1, r7, #4
 8003a46:	f107 0308 	add.w	r3, r7, #8
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f7ff f834 	bl	8002ab8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003a50:	6839      	ldr	r1, [r7, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	68ba      	ldr	r2, [r7, #8]
 8003a56:	9202      	str	r2, [sp, #8]
 8003a58:	9301      	str	r3, [sp, #4]
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	2300      	movs	r3, #0
 8003a60:	460a      	mov	r2, r1
 8003a62:	4922      	ldr	r1, [pc, #136]	@ (8003aec <vTaskStartScheduler+0xb8>)
 8003a64:	4822      	ldr	r0, [pc, #136]	@ (8003af0 <vTaskStartScheduler+0xbc>)
 8003a66:	f7ff fe09 	bl	800367c <xTaskCreateStatic>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	4a21      	ldr	r2, [pc, #132]	@ (8003af4 <vTaskStartScheduler+0xc0>)
 8003a6e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003a70:	4b20      	ldr	r3, [pc, #128]	@ (8003af4 <vTaskStartScheduler+0xc0>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d002      	beq.n	8003a7e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	617b      	str	r3, [r7, #20]
 8003a7c:	e001      	b.n	8003a82 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d102      	bne.n	8003a8e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003a88:	f000 fd04 	bl	8004494 <xTimerCreateTimerTask>
 8003a8c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d116      	bne.n	8003ac2 <vTaskStartScheduler+0x8e>
	__asm volatile
 8003a94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a98:	f383 8811 	msr	BASEPRI, r3
 8003a9c:	f3bf 8f6f 	isb	sy
 8003aa0:	f3bf 8f4f 	dsb	sy
 8003aa4:	613b      	str	r3, [r7, #16]
}
 8003aa6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003aa8:	4b13      	ldr	r3, [pc, #76]	@ (8003af8 <vTaskStartScheduler+0xc4>)
 8003aaa:	f04f 32ff 	mov.w	r2, #4294967295
 8003aae:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003ab0:	4b12      	ldr	r3, [pc, #72]	@ (8003afc <vTaskStartScheduler+0xc8>)
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003ab6:	4b12      	ldr	r3, [pc, #72]	@ (8003b00 <vTaskStartScheduler+0xcc>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003abc:	f001 f8d0 	bl	8004c60 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003ac0:	e00f      	b.n	8003ae2 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ac8:	d10b      	bne.n	8003ae2 <vTaskStartScheduler+0xae>
	__asm volatile
 8003aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ace:	f383 8811 	msr	BASEPRI, r3
 8003ad2:	f3bf 8f6f 	isb	sy
 8003ad6:	f3bf 8f4f 	dsb	sy
 8003ada:	60fb      	str	r3, [r7, #12]
}
 8003adc:	bf00      	nop
 8003ade:	bf00      	nop
 8003ae0:	e7fd      	b.n	8003ade <vTaskStartScheduler+0xaa>
}
 8003ae2:	bf00      	nop
 8003ae4:	3718      	adds	r7, #24
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	08005468 	.word	0x08005468
 8003af0:	08004125 	.word	0x08004125
 8003af4:	20000cf4 	.word	0x20000cf4
 8003af8:	20000cf0 	.word	0x20000cf0
 8003afc:	20000cdc 	.word	0x20000cdc
 8003b00:	20000cd4 	.word	0x20000cd4

08003b04 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003b04:	b480      	push	{r7}
 8003b06:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8003b08:	4b04      	ldr	r3, [pc, #16]	@ (8003b1c <vTaskSuspendAll+0x18>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	4a03      	ldr	r2, [pc, #12]	@ (8003b1c <vTaskSuspendAll+0x18>)
 8003b10:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003b12:	bf00      	nop
 8003b14:	46bd      	mov	sp, r7
 8003b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1a:	4770      	bx	lr
 8003b1c:	20000cf8 	.word	0x20000cf8

08003b20 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003b26:	2300      	movs	r3, #0
 8003b28:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003b2e:	4b42      	ldr	r3, [pc, #264]	@ (8003c38 <xTaskResumeAll+0x118>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10b      	bne.n	8003b4e <xTaskResumeAll+0x2e>
	__asm volatile
 8003b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b3a:	f383 8811 	msr	BASEPRI, r3
 8003b3e:	f3bf 8f6f 	isb	sy
 8003b42:	f3bf 8f4f 	dsb	sy
 8003b46:	603b      	str	r3, [r7, #0]
}
 8003b48:	bf00      	nop
 8003b4a:	bf00      	nop
 8003b4c:	e7fd      	b.n	8003b4a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003b4e:	f001 f92b 	bl	8004da8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003b52:	4b39      	ldr	r3, [pc, #228]	@ (8003c38 <xTaskResumeAll+0x118>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	3b01      	subs	r3, #1
 8003b58:	4a37      	ldr	r2, [pc, #220]	@ (8003c38 <xTaskResumeAll+0x118>)
 8003b5a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b5c:	4b36      	ldr	r3, [pc, #216]	@ (8003c38 <xTaskResumeAll+0x118>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d162      	bne.n	8003c2a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003b64:	4b35      	ldr	r3, [pc, #212]	@ (8003c3c <xTaskResumeAll+0x11c>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d05e      	beq.n	8003c2a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003b6c:	e02f      	b.n	8003bce <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b6e:	4b34      	ldr	r3, [pc, #208]	@ (8003c40 <xTaskResumeAll+0x120>)
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	3318      	adds	r3, #24
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	f7ff f85a 	bl	8002c34 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	3304      	adds	r3, #4
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7ff f855 	bl	8002c34 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b8e:	4b2d      	ldr	r3, [pc, #180]	@ (8003c44 <xTaskResumeAll+0x124>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	429a      	cmp	r2, r3
 8003b94:	d903      	bls.n	8003b9e <xTaskResumeAll+0x7e>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b9a:	4a2a      	ldr	r2, [pc, #168]	@ (8003c44 <xTaskResumeAll+0x124>)
 8003b9c:	6013      	str	r3, [r2, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	4a27      	ldr	r2, [pc, #156]	@ (8003c48 <xTaskResumeAll+0x128>)
 8003bac:	441a      	add	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	3304      	adds	r3, #4
 8003bb2:	4619      	mov	r1, r3
 8003bb4:	4610      	mov	r0, r2
 8003bb6:	f7fe ffe0 	bl	8002b7a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bbe:	4b23      	ldr	r3, [pc, #140]	@ (8003c4c <xTaskResumeAll+0x12c>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d302      	bcc.n	8003bce <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8003bc8:	4b21      	ldr	r3, [pc, #132]	@ (8003c50 <xTaskResumeAll+0x130>)
 8003bca:	2201      	movs	r2, #1
 8003bcc:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bce:	4b1c      	ldr	r3, [pc, #112]	@ (8003c40 <xTaskResumeAll+0x120>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d1cb      	bne.n	8003b6e <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d001      	beq.n	8003be0 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003bdc:	f000 fb58 	bl	8004290 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003be0:	4b1c      	ldr	r3, [pc, #112]	@ (8003c54 <xTaskResumeAll+0x134>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d010      	beq.n	8003c0e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003bec:	f000 f846 	bl	8003c7c <xTaskIncrementTick>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d002      	beq.n	8003bfc <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8003bf6:	4b16      	ldr	r3, [pc, #88]	@ (8003c50 <xTaskResumeAll+0x130>)
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	3b01      	subs	r3, #1
 8003c00:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d1f1      	bne.n	8003bec <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8003c08:	4b12      	ldr	r3, [pc, #72]	@ (8003c54 <xTaskResumeAll+0x134>)
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003c0e:	4b10      	ldr	r3, [pc, #64]	@ (8003c50 <xTaskResumeAll+0x130>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d009      	beq.n	8003c2a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003c16:	2301      	movs	r3, #1
 8003c18:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003c1a:	4b0f      	ldr	r3, [pc, #60]	@ (8003c58 <xTaskResumeAll+0x138>)
 8003c1c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c20:	601a      	str	r2, [r3, #0]
 8003c22:	f3bf 8f4f 	dsb	sy
 8003c26:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003c2a:	f001 f8ef 	bl	8004e0c <vPortExitCritical>

	return xAlreadyYielded;
 8003c2e:	68bb      	ldr	r3, [r7, #8]
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	20000cf8 	.word	0x20000cf8
 8003c3c:	20000cd0 	.word	0x20000cd0
 8003c40:	20000c90 	.word	0x20000c90
 8003c44:	20000cd8 	.word	0x20000cd8
 8003c48:	20000800 	.word	0x20000800
 8003c4c:	200007fc 	.word	0x200007fc
 8003c50:	20000ce4 	.word	0x20000ce4
 8003c54:	20000ce0 	.word	0x20000ce0
 8003c58:	e000ed04 	.word	0xe000ed04

08003c5c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003c62:	4b05      	ldr	r3, [pc, #20]	@ (8003c78 <xTaskGetTickCount+0x1c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003c68:	687b      	ldr	r3, [r7, #4]
}
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
 8003c76:	bf00      	nop
 8003c78:	20000cd4 	.word	0x20000cd4

08003c7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003c82:	2300      	movs	r3, #0
 8003c84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003c86:	4b4f      	ldr	r3, [pc, #316]	@ (8003dc4 <xTaskIncrementTick+0x148>)
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	f040 8090 	bne.w	8003db0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003c90:	4b4d      	ldr	r3, [pc, #308]	@ (8003dc8 <xTaskIncrementTick+0x14c>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	3301      	adds	r3, #1
 8003c96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003c98:	4a4b      	ldr	r2, [pc, #300]	@ (8003dc8 <xTaskIncrementTick+0x14c>)
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003c9e:	693b      	ldr	r3, [r7, #16]
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d121      	bne.n	8003ce8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8003ca4:	4b49      	ldr	r3, [pc, #292]	@ (8003dcc <xTaskIncrementTick+0x150>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00b      	beq.n	8003cc6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8003cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb2:	f383 8811 	msr	BASEPRI, r3
 8003cb6:	f3bf 8f6f 	isb	sy
 8003cba:	f3bf 8f4f 	dsb	sy
 8003cbe:	603b      	str	r3, [r7, #0]
}
 8003cc0:	bf00      	nop
 8003cc2:	bf00      	nop
 8003cc4:	e7fd      	b.n	8003cc2 <xTaskIncrementTick+0x46>
 8003cc6:	4b41      	ldr	r3, [pc, #260]	@ (8003dcc <xTaskIncrementTick+0x150>)
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	60fb      	str	r3, [r7, #12]
 8003ccc:	4b40      	ldr	r3, [pc, #256]	@ (8003dd0 <xTaskIncrementTick+0x154>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4a3e      	ldr	r2, [pc, #248]	@ (8003dcc <xTaskIncrementTick+0x150>)
 8003cd2:	6013      	str	r3, [r2, #0]
 8003cd4:	4a3e      	ldr	r2, [pc, #248]	@ (8003dd0 <xTaskIncrementTick+0x154>)
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	6013      	str	r3, [r2, #0]
 8003cda:	4b3e      	ldr	r3, [pc, #248]	@ (8003dd4 <xTaskIncrementTick+0x158>)
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	4a3c      	ldr	r2, [pc, #240]	@ (8003dd4 <xTaskIncrementTick+0x158>)
 8003ce2:	6013      	str	r3, [r2, #0]
 8003ce4:	f000 fad4 	bl	8004290 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003ce8:	4b3b      	ldr	r3, [pc, #236]	@ (8003dd8 <xTaskIncrementTick+0x15c>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	693a      	ldr	r2, [r7, #16]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	d349      	bcc.n	8003d86 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003cf2:	4b36      	ldr	r3, [pc, #216]	@ (8003dcc <xTaskIncrementTick+0x150>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d104      	bne.n	8003d06 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003cfc:	4b36      	ldr	r3, [pc, #216]	@ (8003dd8 <xTaskIncrementTick+0x15c>)
 8003cfe:	f04f 32ff 	mov.w	r2, #4294967295
 8003d02:	601a      	str	r2, [r3, #0]
					break;
 8003d04:	e03f      	b.n	8003d86 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d06:	4b31      	ldr	r3, [pc, #196]	@ (8003dcc <xTaskIncrementTick+0x150>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68db      	ldr	r3, [r3, #12]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d203      	bcs.n	8003d26 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003d1e:	4a2e      	ldr	r2, [pc, #184]	@ (8003dd8 <xTaskIncrementTick+0x15c>)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003d24:	e02f      	b.n	8003d86 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	3304      	adds	r3, #4
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f7fe ff82 	bl	8002c34 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d30:	68bb      	ldr	r3, [r7, #8]
 8003d32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d004      	beq.n	8003d42 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	3318      	adds	r3, #24
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7fe ff79 	bl	8002c34 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d46:	4b25      	ldr	r3, [pc, #148]	@ (8003ddc <xTaskIncrementTick+0x160>)
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	429a      	cmp	r2, r3
 8003d4c:	d903      	bls.n	8003d56 <xTaskIncrementTick+0xda>
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d52:	4a22      	ldr	r2, [pc, #136]	@ (8003ddc <xTaskIncrementTick+0x160>)
 8003d54:	6013      	str	r3, [r2, #0]
 8003d56:	68bb      	ldr	r3, [r7, #8]
 8003d58:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	4413      	add	r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	4a1f      	ldr	r2, [pc, #124]	@ (8003de0 <xTaskIncrementTick+0x164>)
 8003d64:	441a      	add	r2, r3
 8003d66:	68bb      	ldr	r3, [r7, #8]
 8003d68:	3304      	adds	r3, #4
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	4610      	mov	r0, r2
 8003d6e:	f7fe ff04 	bl	8002b7a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003d72:	68bb      	ldr	r3, [r7, #8]
 8003d74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d76:	4b1b      	ldr	r3, [pc, #108]	@ (8003de4 <xTaskIncrementTick+0x168>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d3b8      	bcc.n	8003cf2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8003d80:	2301      	movs	r3, #1
 8003d82:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d84:	e7b5      	b.n	8003cf2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d86:	4b17      	ldr	r3, [pc, #92]	@ (8003de4 <xTaskIncrementTick+0x168>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d8c:	4914      	ldr	r1, [pc, #80]	@ (8003de0 <xTaskIncrementTick+0x164>)
 8003d8e:	4613      	mov	r3, r2
 8003d90:	009b      	lsls	r3, r3, #2
 8003d92:	4413      	add	r3, r2
 8003d94:	009b      	lsls	r3, r3, #2
 8003d96:	440b      	add	r3, r1
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d901      	bls.n	8003da2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003da2:	4b11      	ldr	r3, [pc, #68]	@ (8003de8 <xTaskIncrementTick+0x16c>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d007      	beq.n	8003dba <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8003daa:	2301      	movs	r3, #1
 8003dac:	617b      	str	r3, [r7, #20]
 8003dae:	e004      	b.n	8003dba <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003db0:	4b0e      	ldr	r3, [pc, #56]	@ (8003dec <xTaskIncrementTick+0x170>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	3301      	adds	r3, #1
 8003db6:	4a0d      	ldr	r2, [pc, #52]	@ (8003dec <xTaskIncrementTick+0x170>)
 8003db8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003dba:	697b      	ldr	r3, [r7, #20]
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	3718      	adds	r7, #24
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}
 8003dc4:	20000cf8 	.word	0x20000cf8
 8003dc8:	20000cd4 	.word	0x20000cd4
 8003dcc:	20000c88 	.word	0x20000c88
 8003dd0:	20000c8c 	.word	0x20000c8c
 8003dd4:	20000ce8 	.word	0x20000ce8
 8003dd8:	20000cf0 	.word	0x20000cf0
 8003ddc:	20000cd8 	.word	0x20000cd8
 8003de0:	20000800 	.word	0x20000800
 8003de4:	200007fc 	.word	0x200007fc
 8003de8:	20000ce4 	.word	0x20000ce4
 8003dec:	20000ce0 	.word	0x20000ce0

08003df0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003df0:	b480      	push	{r7}
 8003df2:	b085      	sub	sp, #20
 8003df4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003df6:	4b28      	ldr	r3, [pc, #160]	@ (8003e98 <vTaskSwitchContext+0xa8>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003dfe:	4b27      	ldr	r3, [pc, #156]	@ (8003e9c <vTaskSwitchContext+0xac>)
 8003e00:	2201      	movs	r2, #1
 8003e02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003e04:	e042      	b.n	8003e8c <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8003e06:	4b25      	ldr	r3, [pc, #148]	@ (8003e9c <vTaskSwitchContext+0xac>)
 8003e08:	2200      	movs	r2, #0
 8003e0a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e0c:	4b24      	ldr	r3, [pc, #144]	@ (8003ea0 <vTaskSwitchContext+0xb0>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	60fb      	str	r3, [r7, #12]
 8003e12:	e011      	b.n	8003e38 <vTaskSwitchContext+0x48>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10b      	bne.n	8003e32 <vTaskSwitchContext+0x42>
	__asm volatile
 8003e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003e1e:	f383 8811 	msr	BASEPRI, r3
 8003e22:	f3bf 8f6f 	isb	sy
 8003e26:	f3bf 8f4f 	dsb	sy
 8003e2a:	607b      	str	r3, [r7, #4]
}
 8003e2c:	bf00      	nop
 8003e2e:	bf00      	nop
 8003e30:	e7fd      	b.n	8003e2e <vTaskSwitchContext+0x3e>
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	3b01      	subs	r3, #1
 8003e36:	60fb      	str	r3, [r7, #12]
 8003e38:	491a      	ldr	r1, [pc, #104]	@ (8003ea4 <vTaskSwitchContext+0xb4>)
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4613      	mov	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	4413      	add	r3, r2
 8003e42:	009b      	lsls	r3, r3, #2
 8003e44:	440b      	add	r3, r1
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0e3      	beq.n	8003e14 <vTaskSwitchContext+0x24>
 8003e4c:	68fa      	ldr	r2, [r7, #12]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4413      	add	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4a13      	ldr	r2, [pc, #76]	@ (8003ea4 <vTaskSwitchContext+0xb4>)
 8003e58:	4413      	add	r3, r2
 8003e5a:	60bb      	str	r3, [r7, #8]
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	605a      	str	r2, [r3, #4]
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	685a      	ldr	r2, [r3, #4]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	3308      	adds	r3, #8
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d104      	bne.n	8003e7c <vTaskSwitchContext+0x8c>
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	685a      	ldr	r2, [r3, #4]
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	605a      	str	r2, [r3, #4]
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	685b      	ldr	r3, [r3, #4]
 8003e80:	68db      	ldr	r3, [r3, #12]
 8003e82:	4a09      	ldr	r2, [pc, #36]	@ (8003ea8 <vTaskSwitchContext+0xb8>)
 8003e84:	6013      	str	r3, [r2, #0]
 8003e86:	4a06      	ldr	r2, [pc, #24]	@ (8003ea0 <vTaskSwitchContext+0xb0>)
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	6013      	str	r3, [r2, #0]
}
 8003e8c:	bf00      	nop
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	20000cf8 	.word	0x20000cf8
 8003e9c:	20000ce4 	.word	0x20000ce4
 8003ea0:	20000cd8 	.word	0x20000cd8
 8003ea4:	20000800 	.word	0x20000800
 8003ea8:	200007fc 	.word	0x200007fc

08003eac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b084      	sub	sp, #16
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	6078      	str	r0, [r7, #4]
 8003eb4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10b      	bne.n	8003ed4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8003ebc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ec0:	f383 8811 	msr	BASEPRI, r3
 8003ec4:	f3bf 8f6f 	isb	sy
 8003ec8:	f3bf 8f4f 	dsb	sy
 8003ecc:	60fb      	str	r3, [r7, #12]
}
 8003ece:	bf00      	nop
 8003ed0:	bf00      	nop
 8003ed2:	e7fd      	b.n	8003ed0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ed4:	4b07      	ldr	r3, [pc, #28]	@ (8003ef4 <vTaskPlaceOnEventList+0x48>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3318      	adds	r3, #24
 8003eda:	4619      	mov	r1, r3
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7fe fe70 	bl	8002bc2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	6838      	ldr	r0, [r7, #0]
 8003ee6:	f000 fa81 	bl	80043ec <prvAddCurrentTaskToDelayedList>
}
 8003eea:	bf00      	nop
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	200007fc 	.word	0x200007fc

08003ef8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b086      	sub	sp, #24
 8003efc:	af00      	add	r7, sp, #0
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d10b      	bne.n	8003f22 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8003f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f0e:	f383 8811 	msr	BASEPRI, r3
 8003f12:	f3bf 8f6f 	isb	sy
 8003f16:	f3bf 8f4f 	dsb	sy
 8003f1a:	617b      	str	r3, [r7, #20]
}
 8003f1c:	bf00      	nop
 8003f1e:	bf00      	nop
 8003f20:	e7fd      	b.n	8003f1e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003f22:	4b0a      	ldr	r3, [pc, #40]	@ (8003f4c <vTaskPlaceOnEventListRestricted+0x54>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	3318      	adds	r3, #24
 8003f28:	4619      	mov	r1, r3
 8003f2a:	68f8      	ldr	r0, [r7, #12]
 8003f2c:	f7fe fe25 	bl	8002b7a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d002      	beq.n	8003f3c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8003f36:	f04f 33ff 	mov.w	r3, #4294967295
 8003f3a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003f3c:	6879      	ldr	r1, [r7, #4]
 8003f3e:	68b8      	ldr	r0, [r7, #8]
 8003f40:	f000 fa54 	bl	80043ec <prvAddCurrentTaskToDelayedList>
	}
 8003f44:	bf00      	nop
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	200007fc 	.word	0x200007fc

08003f50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b086      	sub	sp, #24
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003f60:	693b      	ldr	r3, [r7, #16]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d10b      	bne.n	8003f7e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8003f66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f6a:	f383 8811 	msr	BASEPRI, r3
 8003f6e:	f3bf 8f6f 	isb	sy
 8003f72:	f3bf 8f4f 	dsb	sy
 8003f76:	60fb      	str	r3, [r7, #12]
}
 8003f78:	bf00      	nop
 8003f7a:	bf00      	nop
 8003f7c:	e7fd      	b.n	8003f7a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	3318      	adds	r3, #24
 8003f82:	4618      	mov	r0, r3
 8003f84:	f7fe fe56 	bl	8002c34 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003f88:	4b1d      	ldr	r3, [pc, #116]	@ (8004000 <xTaskRemoveFromEventList+0xb0>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d11d      	bne.n	8003fcc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003f90:	693b      	ldr	r3, [r7, #16]
 8003f92:	3304      	adds	r3, #4
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7fe fe4d 	bl	8002c34 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f9e:	4b19      	ldr	r3, [pc, #100]	@ (8004004 <xTaskRemoveFromEventList+0xb4>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	429a      	cmp	r2, r3
 8003fa4:	d903      	bls.n	8003fae <xTaskRemoveFromEventList+0x5e>
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003faa:	4a16      	ldr	r2, [pc, #88]	@ (8004004 <xTaskRemoveFromEventList+0xb4>)
 8003fac:	6013      	str	r3, [r2, #0]
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	009b      	lsls	r3, r3, #2
 8003fb6:	4413      	add	r3, r2
 8003fb8:	009b      	lsls	r3, r3, #2
 8003fba:	4a13      	ldr	r2, [pc, #76]	@ (8004008 <xTaskRemoveFromEventList+0xb8>)
 8003fbc:	441a      	add	r2, r3
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	3304      	adds	r3, #4
 8003fc2:	4619      	mov	r1, r3
 8003fc4:	4610      	mov	r0, r2
 8003fc6:	f7fe fdd8 	bl	8002b7a <vListInsertEnd>
 8003fca:	e005      	b.n	8003fd8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	3318      	adds	r3, #24
 8003fd0:	4619      	mov	r1, r3
 8003fd2:	480e      	ldr	r0, [pc, #56]	@ (800400c <xTaskRemoveFromEventList+0xbc>)
 8003fd4:	f7fe fdd1 	bl	8002b7a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8004010 <xTaskRemoveFromEventList+0xc0>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d905      	bls.n	8003ff2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003fea:	4b0a      	ldr	r3, [pc, #40]	@ (8004014 <xTaskRemoveFromEventList+0xc4>)
 8003fec:	2201      	movs	r2, #1
 8003fee:	601a      	str	r2, [r3, #0]
 8003ff0:	e001      	b.n	8003ff6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003ff6:	697b      	ldr	r3, [r7, #20]
}
 8003ff8:	4618      	mov	r0, r3
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	20000cf8 	.word	0x20000cf8
 8004004:	20000cd8 	.word	0x20000cd8
 8004008:	20000800 	.word	0x20000800
 800400c:	20000c90 	.word	0x20000c90
 8004010:	200007fc 	.word	0x200007fc
 8004014:	20000ce4 	.word	0x20000ce4

08004018 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004020:	4b06      	ldr	r3, [pc, #24]	@ (800403c <vTaskInternalSetTimeOutState+0x24>)
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004028:	4b05      	ldr	r3, [pc, #20]	@ (8004040 <vTaskInternalSetTimeOutState+0x28>)
 800402a:	681a      	ldr	r2, [r3, #0]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	605a      	str	r2, [r3, #4]
}
 8004030:	bf00      	nop
 8004032:	370c      	adds	r7, #12
 8004034:	46bd      	mov	sp, r7
 8004036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800403a:	4770      	bx	lr
 800403c:	20000ce8 	.word	0x20000ce8
 8004040:	20000cd4 	.word	0x20000cd4

08004044 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b088      	sub	sp, #32
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d10b      	bne.n	800406c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004058:	f383 8811 	msr	BASEPRI, r3
 800405c:	f3bf 8f6f 	isb	sy
 8004060:	f3bf 8f4f 	dsb	sy
 8004064:	613b      	str	r3, [r7, #16]
}
 8004066:	bf00      	nop
 8004068:	bf00      	nop
 800406a:	e7fd      	b.n	8004068 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d10b      	bne.n	800408a <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004072:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004076:	f383 8811 	msr	BASEPRI, r3
 800407a:	f3bf 8f6f 	isb	sy
 800407e:	f3bf 8f4f 	dsb	sy
 8004082:	60fb      	str	r3, [r7, #12]
}
 8004084:	bf00      	nop
 8004086:	bf00      	nop
 8004088:	e7fd      	b.n	8004086 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800408a:	f000 fe8d 	bl	8004da8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800408e:	4b1d      	ldr	r3, [pc, #116]	@ (8004104 <xTaskCheckForTimeOut+0xc0>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040a6:	d102      	bne.n	80040ae <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80040a8:	2300      	movs	r3, #0
 80040aa:	61fb      	str	r3, [r7, #28]
 80040ac:	e023      	b.n	80040f6 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	4b15      	ldr	r3, [pc, #84]	@ (8004108 <xTaskCheckForTimeOut+0xc4>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d007      	beq.n	80040ca <xTaskCheckForTimeOut+0x86>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	69ba      	ldr	r2, [r7, #24]
 80040c0:	429a      	cmp	r2, r3
 80040c2:	d302      	bcc.n	80040ca <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80040c4:	2301      	movs	r3, #1
 80040c6:	61fb      	str	r3, [r7, #28]
 80040c8:	e015      	b.n	80040f6 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	697a      	ldr	r2, [r7, #20]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d20b      	bcs.n	80040ec <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	697b      	ldr	r3, [r7, #20]
 80040da:	1ad2      	subs	r2, r2, r3
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f7ff ff99 	bl	8004018 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80040e6:	2300      	movs	r3, #0
 80040e8:	61fb      	str	r3, [r7, #28]
 80040ea:	e004      	b.n	80040f6 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	2200      	movs	r2, #0
 80040f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80040f2:	2301      	movs	r3, #1
 80040f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80040f6:	f000 fe89 	bl	8004e0c <vPortExitCritical>

	return xReturn;
 80040fa:	69fb      	ldr	r3, [r7, #28]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	3720      	adds	r7, #32
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	20000cd4 	.word	0x20000cd4
 8004108:	20000ce8 	.word	0x20000ce8

0800410c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004110:	4b03      	ldr	r3, [pc, #12]	@ (8004120 <vTaskMissedYield+0x14>)
 8004112:	2201      	movs	r2, #1
 8004114:	601a      	str	r2, [r3, #0]
}
 8004116:	bf00      	nop
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	20000ce4 	.word	0x20000ce4

08004124 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b082      	sub	sp, #8
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800412c:	f000 f852 	bl	80041d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004130:	4b06      	ldr	r3, [pc, #24]	@ (800414c <prvIdleTask+0x28>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2b01      	cmp	r3, #1
 8004136:	d9f9      	bls.n	800412c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004138:	4b05      	ldr	r3, [pc, #20]	@ (8004150 <prvIdleTask+0x2c>)
 800413a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800413e:	601a      	str	r2, [r3, #0]
 8004140:	f3bf 8f4f 	dsb	sy
 8004144:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004148:	e7f0      	b.n	800412c <prvIdleTask+0x8>
 800414a:	bf00      	nop
 800414c:	20000800 	.word	0x20000800
 8004150:	e000ed04 	.word	0xe000ed04

08004154 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800415a:	2300      	movs	r3, #0
 800415c:	607b      	str	r3, [r7, #4]
 800415e:	e00c      	b.n	800417a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	4613      	mov	r3, r2
 8004164:	009b      	lsls	r3, r3, #2
 8004166:	4413      	add	r3, r2
 8004168:	009b      	lsls	r3, r3, #2
 800416a:	4a12      	ldr	r2, [pc, #72]	@ (80041b4 <prvInitialiseTaskLists+0x60>)
 800416c:	4413      	add	r3, r2
 800416e:	4618      	mov	r0, r3
 8004170:	f7fe fcd6 	bl	8002b20 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3301      	adds	r3, #1
 8004178:	607b      	str	r3, [r7, #4]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2b37      	cmp	r3, #55	@ 0x37
 800417e:	d9ef      	bls.n	8004160 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004180:	480d      	ldr	r0, [pc, #52]	@ (80041b8 <prvInitialiseTaskLists+0x64>)
 8004182:	f7fe fccd 	bl	8002b20 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004186:	480d      	ldr	r0, [pc, #52]	@ (80041bc <prvInitialiseTaskLists+0x68>)
 8004188:	f7fe fcca 	bl	8002b20 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800418c:	480c      	ldr	r0, [pc, #48]	@ (80041c0 <prvInitialiseTaskLists+0x6c>)
 800418e:	f7fe fcc7 	bl	8002b20 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004192:	480c      	ldr	r0, [pc, #48]	@ (80041c4 <prvInitialiseTaskLists+0x70>)
 8004194:	f7fe fcc4 	bl	8002b20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004198:	480b      	ldr	r0, [pc, #44]	@ (80041c8 <prvInitialiseTaskLists+0x74>)
 800419a:	f7fe fcc1 	bl	8002b20 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800419e:	4b0b      	ldr	r3, [pc, #44]	@ (80041cc <prvInitialiseTaskLists+0x78>)
 80041a0:	4a05      	ldr	r2, [pc, #20]	@ (80041b8 <prvInitialiseTaskLists+0x64>)
 80041a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80041a4:	4b0a      	ldr	r3, [pc, #40]	@ (80041d0 <prvInitialiseTaskLists+0x7c>)
 80041a6:	4a05      	ldr	r2, [pc, #20]	@ (80041bc <prvInitialiseTaskLists+0x68>)
 80041a8:	601a      	str	r2, [r3, #0]
}
 80041aa:	bf00      	nop
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	20000800 	.word	0x20000800
 80041b8:	20000c60 	.word	0x20000c60
 80041bc:	20000c74 	.word	0x20000c74
 80041c0:	20000c90 	.word	0x20000c90
 80041c4:	20000ca4 	.word	0x20000ca4
 80041c8:	20000cbc 	.word	0x20000cbc
 80041cc:	20000c88 	.word	0x20000c88
 80041d0:	20000c8c 	.word	0x20000c8c

080041d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041da:	e019      	b.n	8004210 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80041dc:	f000 fde4 	bl	8004da8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80041e0:	4b10      	ldr	r3, [pc, #64]	@ (8004224 <prvCheckTasksWaitingTermination+0x50>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3304      	adds	r3, #4
 80041ec:	4618      	mov	r0, r3
 80041ee:	f7fe fd21 	bl	8002c34 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80041f2:	4b0d      	ldr	r3, [pc, #52]	@ (8004228 <prvCheckTasksWaitingTermination+0x54>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	3b01      	subs	r3, #1
 80041f8:	4a0b      	ldr	r2, [pc, #44]	@ (8004228 <prvCheckTasksWaitingTermination+0x54>)
 80041fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80041fc:	4b0b      	ldr	r3, [pc, #44]	@ (800422c <prvCheckTasksWaitingTermination+0x58>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	3b01      	subs	r3, #1
 8004202:	4a0a      	ldr	r2, [pc, #40]	@ (800422c <prvCheckTasksWaitingTermination+0x58>)
 8004204:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004206:	f000 fe01 	bl	8004e0c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800420a:	6878      	ldr	r0, [r7, #4]
 800420c:	f000 f810 	bl	8004230 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004210:	4b06      	ldr	r3, [pc, #24]	@ (800422c <prvCheckTasksWaitingTermination+0x58>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d1e1      	bne.n	80041dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004218:	bf00      	nop
 800421a:	bf00      	nop
 800421c:	3708      	adds	r7, #8
 800421e:	46bd      	mov	sp, r7
 8004220:	bd80      	pop	{r7, pc}
 8004222:	bf00      	nop
 8004224:	20000ca4 	.word	0x20000ca4
 8004228:	20000cd0 	.word	0x20000cd0
 800422c:	20000cb8 	.word	0x20000cb8

08004230 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800423e:	2b00      	cmp	r3, #0
 8004240:	d108      	bne.n	8004254 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004246:	4618      	mov	r0, r3
 8004248:	f000 ff9e 	bl	8005188 <vPortFree>
				vPortFree( pxTCB );
 800424c:	6878      	ldr	r0, [r7, #4]
 800424e:	f000 ff9b 	bl	8005188 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004252:	e019      	b.n	8004288 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800425a:	2b01      	cmp	r3, #1
 800425c:	d103      	bne.n	8004266 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800425e:	6878      	ldr	r0, [r7, #4]
 8004260:	f000 ff92 	bl	8005188 <vPortFree>
	}
 8004264:	e010      	b.n	8004288 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800426c:	2b02      	cmp	r3, #2
 800426e:	d00b      	beq.n	8004288 <prvDeleteTCB+0x58>
	__asm volatile
 8004270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004274:	f383 8811 	msr	BASEPRI, r3
 8004278:	f3bf 8f6f 	isb	sy
 800427c:	f3bf 8f4f 	dsb	sy
 8004280:	60fb      	str	r3, [r7, #12]
}
 8004282:	bf00      	nop
 8004284:	bf00      	nop
 8004286:	e7fd      	b.n	8004284 <prvDeleteTCB+0x54>
	}
 8004288:	bf00      	nop
 800428a:	3710      	adds	r7, #16
 800428c:	46bd      	mov	sp, r7
 800428e:	bd80      	pop	{r7, pc}

08004290 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004296:	4b0c      	ldr	r3, [pc, #48]	@ (80042c8 <prvResetNextTaskUnblockTime+0x38>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d104      	bne.n	80042aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80042a0:	4b0a      	ldr	r3, [pc, #40]	@ (80042cc <prvResetNextTaskUnblockTime+0x3c>)
 80042a2:	f04f 32ff 	mov.w	r2, #4294967295
 80042a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80042a8:	e008      	b.n	80042bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042aa:	4b07      	ldr	r3, [pc, #28]	@ (80042c8 <prvResetNextTaskUnblockTime+0x38>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	68db      	ldr	r3, [r3, #12]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	685b      	ldr	r3, [r3, #4]
 80042b8:	4a04      	ldr	r2, [pc, #16]	@ (80042cc <prvResetNextTaskUnblockTime+0x3c>)
 80042ba:	6013      	str	r3, [r2, #0]
}
 80042bc:	bf00      	nop
 80042be:	370c      	adds	r7, #12
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr
 80042c8:	20000c88 	.word	0x20000c88
 80042cc:	20000cf0 	.word	0x20000cf0

080042d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80042d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004304 <xTaskGetSchedulerState+0x34>)
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d102      	bne.n	80042e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80042de:	2301      	movs	r3, #1
 80042e0:	607b      	str	r3, [r7, #4]
 80042e2:	e008      	b.n	80042f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80042e4:	4b08      	ldr	r3, [pc, #32]	@ (8004308 <xTaskGetSchedulerState+0x38>)
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d102      	bne.n	80042f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80042ec:	2302      	movs	r3, #2
 80042ee:	607b      	str	r3, [r7, #4]
 80042f0:	e001      	b.n	80042f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80042f2:	2300      	movs	r3, #0
 80042f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80042f6:	687b      	ldr	r3, [r7, #4]
	}
 80042f8:	4618      	mov	r0, r3
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	20000cdc 	.word	0x20000cdc
 8004308:	20000cf8 	.word	0x20000cf8

0800430c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004318:	2300      	movs	r3, #0
 800431a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d058      	beq.n	80043d4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004322:	4b2f      	ldr	r3, [pc, #188]	@ (80043e0 <xTaskPriorityDisinherit+0xd4>)
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	693a      	ldr	r2, [r7, #16]
 8004328:	429a      	cmp	r2, r3
 800432a:	d00b      	beq.n	8004344 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800432c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004330:	f383 8811 	msr	BASEPRI, r3
 8004334:	f3bf 8f6f 	isb	sy
 8004338:	f3bf 8f4f 	dsb	sy
 800433c:	60fb      	str	r3, [r7, #12]
}
 800433e:	bf00      	nop
 8004340:	bf00      	nop
 8004342:	e7fd      	b.n	8004340 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10b      	bne.n	8004364 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800434c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004350:	f383 8811 	msr	BASEPRI, r3
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	60bb      	str	r3, [r7, #8]
}
 800435e:	bf00      	nop
 8004360:	bf00      	nop
 8004362:	e7fd      	b.n	8004360 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004368:	1e5a      	subs	r2, r3, #1
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004376:	429a      	cmp	r2, r3
 8004378:	d02c      	beq.n	80043d4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800437e:	2b00      	cmp	r3, #0
 8004380:	d128      	bne.n	80043d4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004382:	693b      	ldr	r3, [r7, #16]
 8004384:	3304      	adds	r3, #4
 8004386:	4618      	mov	r0, r3
 8004388:	f7fe fc54 	bl	8002c34 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004398:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80043a0:	693b      	ldr	r3, [r7, #16]
 80043a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043a4:	4b0f      	ldr	r3, [pc, #60]	@ (80043e4 <xTaskPriorityDisinherit+0xd8>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d903      	bls.n	80043b4 <xTaskPriorityDisinherit+0xa8>
 80043ac:	693b      	ldr	r3, [r7, #16]
 80043ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043b0:	4a0c      	ldr	r2, [pc, #48]	@ (80043e4 <xTaskPriorityDisinherit+0xd8>)
 80043b2:	6013      	str	r3, [r2, #0]
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043b8:	4613      	mov	r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	4413      	add	r3, r2
 80043be:	009b      	lsls	r3, r3, #2
 80043c0:	4a09      	ldr	r2, [pc, #36]	@ (80043e8 <xTaskPriorityDisinherit+0xdc>)
 80043c2:	441a      	add	r2, r3
 80043c4:	693b      	ldr	r3, [r7, #16]
 80043c6:	3304      	adds	r3, #4
 80043c8:	4619      	mov	r1, r3
 80043ca:	4610      	mov	r0, r2
 80043cc:	f7fe fbd5 	bl	8002b7a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80043d0:	2301      	movs	r3, #1
 80043d2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80043d4:	697b      	ldr	r3, [r7, #20]
	}
 80043d6:	4618      	mov	r0, r3
 80043d8:	3718      	adds	r7, #24
 80043da:	46bd      	mov	sp, r7
 80043dc:	bd80      	pop	{r7, pc}
 80043de:	bf00      	nop
 80043e0:	200007fc 	.word	0x200007fc
 80043e4:	20000cd8 	.word	0x20000cd8
 80043e8:	20000800 	.word	0x20000800

080043ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
 80043f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80043f6:	4b21      	ldr	r3, [pc, #132]	@ (800447c <prvAddCurrentTaskToDelayedList+0x90>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043fc:	4b20      	ldr	r3, [pc, #128]	@ (8004480 <prvAddCurrentTaskToDelayedList+0x94>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	3304      	adds	r3, #4
 8004402:	4618      	mov	r0, r3
 8004404:	f7fe fc16 	bl	8002c34 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800440e:	d10a      	bne.n	8004426 <prvAddCurrentTaskToDelayedList+0x3a>
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d007      	beq.n	8004426 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004416:	4b1a      	ldr	r3, [pc, #104]	@ (8004480 <prvAddCurrentTaskToDelayedList+0x94>)
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	3304      	adds	r3, #4
 800441c:	4619      	mov	r1, r3
 800441e:	4819      	ldr	r0, [pc, #100]	@ (8004484 <prvAddCurrentTaskToDelayedList+0x98>)
 8004420:	f7fe fbab 	bl	8002b7a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004424:	e026      	b.n	8004474 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	4413      	add	r3, r2
 800442c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800442e:	4b14      	ldr	r3, [pc, #80]	@ (8004480 <prvAddCurrentTaskToDelayedList+0x94>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	429a      	cmp	r2, r3
 800443c:	d209      	bcs.n	8004452 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800443e:	4b12      	ldr	r3, [pc, #72]	@ (8004488 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004440:	681a      	ldr	r2, [r3, #0]
 8004442:	4b0f      	ldr	r3, [pc, #60]	@ (8004480 <prvAddCurrentTaskToDelayedList+0x94>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	3304      	adds	r3, #4
 8004448:	4619      	mov	r1, r3
 800444a:	4610      	mov	r0, r2
 800444c:	f7fe fbb9 	bl	8002bc2 <vListInsert>
}
 8004450:	e010      	b.n	8004474 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004452:	4b0e      	ldr	r3, [pc, #56]	@ (800448c <prvAddCurrentTaskToDelayedList+0xa0>)
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	4b0a      	ldr	r3, [pc, #40]	@ (8004480 <prvAddCurrentTaskToDelayedList+0x94>)
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	3304      	adds	r3, #4
 800445c:	4619      	mov	r1, r3
 800445e:	4610      	mov	r0, r2
 8004460:	f7fe fbaf 	bl	8002bc2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004464:	4b0a      	ldr	r3, [pc, #40]	@ (8004490 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	68ba      	ldr	r2, [r7, #8]
 800446a:	429a      	cmp	r2, r3
 800446c:	d202      	bcs.n	8004474 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800446e:	4a08      	ldr	r2, [pc, #32]	@ (8004490 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	6013      	str	r3, [r2, #0]
}
 8004474:	bf00      	nop
 8004476:	3710      	adds	r7, #16
 8004478:	46bd      	mov	sp, r7
 800447a:	bd80      	pop	{r7, pc}
 800447c:	20000cd4 	.word	0x20000cd4
 8004480:	200007fc 	.word	0x200007fc
 8004484:	20000cbc 	.word	0x20000cbc
 8004488:	20000c8c 	.word	0x20000c8c
 800448c:	20000c88 	.word	0x20000c88
 8004490:	20000cf0 	.word	0x20000cf0

08004494 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b08a      	sub	sp, #40	@ 0x28
 8004498:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800449a:	2300      	movs	r3, #0
 800449c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800449e:	f000 fb13 	bl	8004ac8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80044a2:	4b1d      	ldr	r3, [pc, #116]	@ (8004518 <xTimerCreateTimerTask+0x84>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d021      	beq.n	80044ee <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80044aa:	2300      	movs	r3, #0
 80044ac:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80044ae:	2300      	movs	r3, #0
 80044b0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80044b2:	1d3a      	adds	r2, r7, #4
 80044b4:	f107 0108 	add.w	r1, r7, #8
 80044b8:	f107 030c 	add.w	r3, r7, #12
 80044bc:	4618      	mov	r0, r3
 80044be:	f7fe fb15 	bl	8002aec <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80044c2:	6879      	ldr	r1, [r7, #4]
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	9202      	str	r2, [sp, #8]
 80044ca:	9301      	str	r3, [sp, #4]
 80044cc:	2302      	movs	r3, #2
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	2300      	movs	r3, #0
 80044d2:	460a      	mov	r2, r1
 80044d4:	4911      	ldr	r1, [pc, #68]	@ (800451c <xTimerCreateTimerTask+0x88>)
 80044d6:	4812      	ldr	r0, [pc, #72]	@ (8004520 <xTimerCreateTimerTask+0x8c>)
 80044d8:	f7ff f8d0 	bl	800367c <xTaskCreateStatic>
 80044dc:	4603      	mov	r3, r0
 80044de:	4a11      	ldr	r2, [pc, #68]	@ (8004524 <xTimerCreateTimerTask+0x90>)
 80044e0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80044e2:	4b10      	ldr	r3, [pc, #64]	@ (8004524 <xTimerCreateTimerTask+0x90>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80044ea:	2301      	movs	r3, #1
 80044ec:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d10b      	bne.n	800450c <xTimerCreateTimerTask+0x78>
	__asm volatile
 80044f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f8:	f383 8811 	msr	BASEPRI, r3
 80044fc:	f3bf 8f6f 	isb	sy
 8004500:	f3bf 8f4f 	dsb	sy
 8004504:	613b      	str	r3, [r7, #16]
}
 8004506:	bf00      	nop
 8004508:	bf00      	nop
 800450a:	e7fd      	b.n	8004508 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800450c:	697b      	ldr	r3, [r7, #20]
}
 800450e:	4618      	mov	r0, r3
 8004510:	3718      	adds	r7, #24
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	20000d2c 	.word	0x20000d2c
 800451c:	08005470 	.word	0x08005470
 8004520:	08004661 	.word	0x08004661
 8004524:	20000d30 	.word	0x20000d30

08004528 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b08a      	sub	sp, #40	@ 0x28
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
 8004534:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004536:	2300      	movs	r3, #0
 8004538:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d10b      	bne.n	8004558 <xTimerGenericCommand+0x30>
	__asm volatile
 8004540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004544:	f383 8811 	msr	BASEPRI, r3
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	623b      	str	r3, [r7, #32]
}
 8004552:	bf00      	nop
 8004554:	bf00      	nop
 8004556:	e7fd      	b.n	8004554 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004558:	4b19      	ldr	r3, [pc, #100]	@ (80045c0 <xTimerGenericCommand+0x98>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d02a      	beq.n	80045b6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	2b05      	cmp	r3, #5
 8004570:	dc18      	bgt.n	80045a4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004572:	f7ff fead 	bl	80042d0 <xTaskGetSchedulerState>
 8004576:	4603      	mov	r3, r0
 8004578:	2b02      	cmp	r3, #2
 800457a:	d109      	bne.n	8004590 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800457c:	4b10      	ldr	r3, [pc, #64]	@ (80045c0 <xTimerGenericCommand+0x98>)
 800457e:	6818      	ldr	r0, [r3, #0]
 8004580:	f107 0110 	add.w	r1, r7, #16
 8004584:	2300      	movs	r3, #0
 8004586:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004588:	f7fe fc88 	bl	8002e9c <xQueueGenericSend>
 800458c:	6278      	str	r0, [r7, #36]	@ 0x24
 800458e:	e012      	b.n	80045b6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004590:	4b0b      	ldr	r3, [pc, #44]	@ (80045c0 <xTimerGenericCommand+0x98>)
 8004592:	6818      	ldr	r0, [r3, #0]
 8004594:	f107 0110 	add.w	r1, r7, #16
 8004598:	2300      	movs	r3, #0
 800459a:	2200      	movs	r2, #0
 800459c:	f7fe fc7e 	bl	8002e9c <xQueueGenericSend>
 80045a0:	6278      	str	r0, [r7, #36]	@ 0x24
 80045a2:	e008      	b.n	80045b6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80045a4:	4b06      	ldr	r3, [pc, #24]	@ (80045c0 <xTimerGenericCommand+0x98>)
 80045a6:	6818      	ldr	r0, [r3, #0]
 80045a8:	f107 0110 	add.w	r1, r7, #16
 80045ac:	2300      	movs	r3, #0
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	f7fe fd76 	bl	80030a0 <xQueueGenericSendFromISR>
 80045b4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80045b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3728      	adds	r7, #40	@ 0x28
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	20000d2c 	.word	0x20000d2c

080045c4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b088      	sub	sp, #32
 80045c8:	af02      	add	r7, sp, #8
 80045ca:	6078      	str	r0, [r7, #4]
 80045cc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045ce:	4b23      	ldr	r3, [pc, #140]	@ (800465c <prvProcessExpiredTimer+0x98>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	3304      	adds	r3, #4
 80045dc:	4618      	mov	r0, r3
 80045de:	f7fe fb29 	bl	8002c34 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045e2:	697b      	ldr	r3, [r7, #20]
 80045e4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80045e8:	f003 0304 	and.w	r3, r3, #4
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d023      	beq.n	8004638 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	699a      	ldr	r2, [r3, #24]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	18d1      	adds	r1, r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	683a      	ldr	r2, [r7, #0]
 80045fc:	6978      	ldr	r0, [r7, #20]
 80045fe:	f000 f8d5 	bl	80047ac <prvInsertTimerInActiveList>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d020      	beq.n	800464a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004608:	2300      	movs	r3, #0
 800460a:	9300      	str	r3, [sp, #0]
 800460c:	2300      	movs	r3, #0
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	2100      	movs	r1, #0
 8004612:	6978      	ldr	r0, [r7, #20]
 8004614:	f7ff ff88 	bl	8004528 <xTimerGenericCommand>
 8004618:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d114      	bne.n	800464a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004624:	f383 8811 	msr	BASEPRI, r3
 8004628:	f3bf 8f6f 	isb	sy
 800462c:	f3bf 8f4f 	dsb	sy
 8004630:	60fb      	str	r3, [r7, #12]
}
 8004632:	bf00      	nop
 8004634:	bf00      	nop
 8004636:	e7fd      	b.n	8004634 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800463e:	f023 0301 	bic.w	r3, r3, #1
 8004642:	b2da      	uxtb	r2, r3
 8004644:	697b      	ldr	r3, [r7, #20]
 8004646:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	6978      	ldr	r0, [r7, #20]
 8004650:	4798      	blx	r3
}
 8004652:	bf00      	nop
 8004654:	3718      	adds	r7, #24
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}
 800465a:	bf00      	nop
 800465c:	20000d24 	.word	0x20000d24

08004660 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b084      	sub	sp, #16
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004668:	f107 0308 	add.w	r3, r7, #8
 800466c:	4618      	mov	r0, r3
 800466e:	f000 f859 	bl	8004724 <prvGetNextExpireTime>
 8004672:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	4619      	mov	r1, r3
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 f805 	bl	8004688 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800467e:	f000 f8d7 	bl	8004830 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004682:	bf00      	nop
 8004684:	e7f0      	b.n	8004668 <prvTimerTask+0x8>
	...

08004688 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	6078      	str	r0, [r7, #4]
 8004690:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004692:	f7ff fa37 	bl	8003b04 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004696:	f107 0308 	add.w	r3, r7, #8
 800469a:	4618      	mov	r0, r3
 800469c:	f000 f866 	bl	800476c <prvSampleTimeNow>
 80046a0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d130      	bne.n	800470a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d10a      	bne.n	80046c4 <prvProcessTimerOrBlockTask+0x3c>
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d806      	bhi.n	80046c4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80046b6:	f7ff fa33 	bl	8003b20 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80046ba:	68f9      	ldr	r1, [r7, #12]
 80046bc:	6878      	ldr	r0, [r7, #4]
 80046be:	f7ff ff81 	bl	80045c4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80046c2:	e024      	b.n	800470e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d008      	beq.n	80046dc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80046ca:	4b13      	ldr	r3, [pc, #76]	@ (8004718 <prvProcessTimerOrBlockTask+0x90>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <prvProcessTimerOrBlockTask+0x50>
 80046d4:	2301      	movs	r3, #1
 80046d6:	e000      	b.n	80046da <prvProcessTimerOrBlockTask+0x52>
 80046d8:	2300      	movs	r3, #0
 80046da:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80046dc:	4b0f      	ldr	r3, [pc, #60]	@ (800471c <prvProcessTimerOrBlockTask+0x94>)
 80046de:	6818      	ldr	r0, [r3, #0]
 80046e0:	687a      	ldr	r2, [r7, #4]
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	1ad3      	subs	r3, r2, r3
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	4619      	mov	r1, r3
 80046ea:	f7fe ff93 	bl	8003614 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80046ee:	f7ff fa17 	bl	8003b20 <xTaskResumeAll>
 80046f2:	4603      	mov	r3, r0
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10a      	bne.n	800470e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80046f8:	4b09      	ldr	r3, [pc, #36]	@ (8004720 <prvProcessTimerOrBlockTask+0x98>)
 80046fa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80046fe:	601a      	str	r2, [r3, #0]
 8004700:	f3bf 8f4f 	dsb	sy
 8004704:	f3bf 8f6f 	isb	sy
}
 8004708:	e001      	b.n	800470e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800470a:	f7ff fa09 	bl	8003b20 <xTaskResumeAll>
}
 800470e:	bf00      	nop
 8004710:	3710      	adds	r7, #16
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	20000d28 	.word	0x20000d28
 800471c:	20000d2c 	.word	0x20000d2c
 8004720:	e000ed04 	.word	0xe000ed04

08004724 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004724:	b480      	push	{r7}
 8004726:	b085      	sub	sp, #20
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800472c:	4b0e      	ldr	r3, [pc, #56]	@ (8004768 <prvGetNextExpireTime+0x44>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d101      	bne.n	800473a <prvGetNextExpireTime+0x16>
 8004736:	2201      	movs	r2, #1
 8004738:	e000      	b.n	800473c <prvGetNextExpireTime+0x18>
 800473a:	2200      	movs	r2, #0
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d105      	bne.n	8004754 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004748:	4b07      	ldr	r3, [pc, #28]	@ (8004768 <prvGetNextExpireTime+0x44>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68db      	ldr	r3, [r3, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	60fb      	str	r3, [r7, #12]
 8004752:	e001      	b.n	8004758 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004754:	2300      	movs	r3, #0
 8004756:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004758:	68fb      	ldr	r3, [r7, #12]
}
 800475a:	4618      	mov	r0, r3
 800475c:	3714      	adds	r7, #20
 800475e:	46bd      	mov	sp, r7
 8004760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004764:	4770      	bx	lr
 8004766:	bf00      	nop
 8004768:	20000d24 	.word	0x20000d24

0800476c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b084      	sub	sp, #16
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004774:	f7ff fa72 	bl	8003c5c <xTaskGetTickCount>
 8004778:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800477a:	4b0b      	ldr	r3, [pc, #44]	@ (80047a8 <prvSampleTimeNow+0x3c>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	68fa      	ldr	r2, [r7, #12]
 8004780:	429a      	cmp	r2, r3
 8004782:	d205      	bcs.n	8004790 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004784:	f000 f93a 	bl	80049fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	601a      	str	r2, [r3, #0]
 800478e:	e002      	b.n	8004796 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004796:	4a04      	ldr	r2, [pc, #16]	@ (80047a8 <prvSampleTimeNow+0x3c>)
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800479c:	68fb      	ldr	r3, [r7, #12]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	20000d34 	.word	0x20000d34

080047ac <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80047ac:	b580      	push	{r7, lr}
 80047ae:	b086      	sub	sp, #24
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	60f8      	str	r0, [r7, #12]
 80047b4:	60b9      	str	r1, [r7, #8]
 80047b6:	607a      	str	r2, [r7, #4]
 80047b8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80047ba:	2300      	movs	r3, #0
 80047bc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	68ba      	ldr	r2, [r7, #8]
 80047c2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	68fa      	ldr	r2, [r7, #12]
 80047c8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80047ca:	68ba      	ldr	r2, [r7, #8]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	d812      	bhi.n	80047f8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	1ad2      	subs	r2, r2, r3
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d302      	bcc.n	80047e6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80047e0:	2301      	movs	r3, #1
 80047e2:	617b      	str	r3, [r7, #20]
 80047e4:	e01b      	b.n	800481e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80047e6:	4b10      	ldr	r3, [pc, #64]	@ (8004828 <prvInsertTimerInActiveList+0x7c>)
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	3304      	adds	r3, #4
 80047ee:	4619      	mov	r1, r3
 80047f0:	4610      	mov	r0, r2
 80047f2:	f7fe f9e6 	bl	8002bc2 <vListInsert>
 80047f6:	e012      	b.n	800481e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80047f8:	687a      	ldr	r2, [r7, #4]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d206      	bcs.n	800480e <prvInsertTimerInActiveList+0x62>
 8004800:	68ba      	ldr	r2, [r7, #8]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	429a      	cmp	r2, r3
 8004806:	d302      	bcc.n	800480e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004808:	2301      	movs	r3, #1
 800480a:	617b      	str	r3, [r7, #20]
 800480c:	e007      	b.n	800481e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800480e:	4b07      	ldr	r3, [pc, #28]	@ (800482c <prvInsertTimerInActiveList+0x80>)
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	3304      	adds	r3, #4
 8004816:	4619      	mov	r1, r3
 8004818:	4610      	mov	r0, r2
 800481a:	f7fe f9d2 	bl	8002bc2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800481e:	697b      	ldr	r3, [r7, #20]
}
 8004820:	4618      	mov	r0, r3
 8004822:	3718      	adds	r7, #24
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	20000d28 	.word	0x20000d28
 800482c:	20000d24 	.word	0x20000d24

08004830 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b08e      	sub	sp, #56	@ 0x38
 8004834:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004836:	e0ce      	b.n	80049d6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2b00      	cmp	r3, #0
 800483c:	da19      	bge.n	8004872 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800483e:	1d3b      	adds	r3, r7, #4
 8004840:	3304      	adds	r3, #4
 8004842:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10b      	bne.n	8004862 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800484a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800484e:	f383 8811 	msr	BASEPRI, r3
 8004852:	f3bf 8f6f 	isb	sy
 8004856:	f3bf 8f4f 	dsb	sy
 800485a:	61fb      	str	r3, [r7, #28]
}
 800485c:	bf00      	nop
 800485e:	bf00      	nop
 8004860:	e7fd      	b.n	800485e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004868:	6850      	ldr	r0, [r2, #4]
 800486a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800486c:	6892      	ldr	r2, [r2, #8]
 800486e:	4611      	mov	r1, r2
 8004870:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2b00      	cmp	r3, #0
 8004876:	f2c0 80ae 	blt.w	80049d6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800487e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d004      	beq.n	8004890 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004888:	3304      	adds	r3, #4
 800488a:	4618      	mov	r0, r3
 800488c:	f7fe f9d2 	bl	8002c34 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004890:	463b      	mov	r3, r7
 8004892:	4618      	mov	r0, r3
 8004894:	f7ff ff6a 	bl	800476c <prvSampleTimeNow>
 8004898:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b09      	cmp	r3, #9
 800489e:	f200 8097 	bhi.w	80049d0 <prvProcessReceivedCommands+0x1a0>
 80048a2:	a201      	add	r2, pc, #4	@ (adr r2, 80048a8 <prvProcessReceivedCommands+0x78>)
 80048a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048a8:	080048d1 	.word	0x080048d1
 80048ac:	080048d1 	.word	0x080048d1
 80048b0:	080048d1 	.word	0x080048d1
 80048b4:	08004947 	.word	0x08004947
 80048b8:	0800495b 	.word	0x0800495b
 80048bc:	080049a7 	.word	0x080049a7
 80048c0:	080048d1 	.word	0x080048d1
 80048c4:	080048d1 	.word	0x080048d1
 80048c8:	08004947 	.word	0x08004947
 80048cc:	0800495b 	.word	0x0800495b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80048d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80048d6:	f043 0301 	orr.w	r3, r3, #1
 80048da:	b2da      	uxtb	r2, r3
 80048dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048de:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80048e2:	68ba      	ldr	r2, [r7, #8]
 80048e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048e6:	699b      	ldr	r3, [r3, #24]
 80048e8:	18d1      	adds	r1, r2, r3
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80048ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048f0:	f7ff ff5c 	bl	80047ac <prvInsertTimerInActiveList>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d06c      	beq.n	80049d4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048fc:	6a1b      	ldr	r3, [r3, #32]
 80048fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004900:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004902:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004904:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004908:	f003 0304 	and.w	r3, r3, #4
 800490c:	2b00      	cmp	r3, #0
 800490e:	d061      	beq.n	80049d4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004910:	68ba      	ldr	r2, [r7, #8]
 8004912:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004914:	699b      	ldr	r3, [r3, #24]
 8004916:	441a      	add	r2, r3
 8004918:	2300      	movs	r3, #0
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	2300      	movs	r3, #0
 800491e:	2100      	movs	r1, #0
 8004920:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004922:	f7ff fe01 	bl	8004528 <xTimerGenericCommand>
 8004926:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d152      	bne.n	80049d4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800492e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	61bb      	str	r3, [r7, #24]
}
 8004940:	bf00      	nop
 8004942:	bf00      	nop
 8004944:	e7fd      	b.n	8004942 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004948:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800494c:	f023 0301 	bic.w	r3, r3, #1
 8004950:	b2da      	uxtb	r2, r3
 8004952:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004954:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8004958:	e03d      	b.n	80049d6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800495a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800495c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004960:	f043 0301 	orr.w	r3, r3, #1
 8004964:	b2da      	uxtb	r2, r3
 8004966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004968:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800496c:	68ba      	ldr	r2, [r7, #8]
 800496e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004970:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004972:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004974:	699b      	ldr	r3, [r3, #24]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d10b      	bne.n	8004992 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800497a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800497e:	f383 8811 	msr	BASEPRI, r3
 8004982:	f3bf 8f6f 	isb	sy
 8004986:	f3bf 8f4f 	dsb	sy
 800498a:	617b      	str	r3, [r7, #20]
}
 800498c:	bf00      	nop
 800498e:	bf00      	nop
 8004990:	e7fd      	b.n	800498e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004992:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004994:	699a      	ldr	r2, [r3, #24]
 8004996:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004998:	18d1      	adds	r1, r2, r3
 800499a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800499c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800499e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049a0:	f7ff ff04 	bl	80047ac <prvInsertTimerInActiveList>
					break;
 80049a4:	e017      	b.n	80049d6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80049a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049a8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049ac:	f003 0302 	and.w	r3, r3, #2
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d103      	bne.n	80049bc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80049b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80049b6:	f000 fbe7 	bl	8005188 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80049ba:	e00c      	b.n	80049d6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80049c2:	f023 0301 	bic.w	r3, r3, #1
 80049c6:	b2da      	uxtb	r2, r3
 80049c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80049ce:	e002      	b.n	80049d6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80049d0:	bf00      	nop
 80049d2:	e000      	b.n	80049d6 <prvProcessReceivedCommands+0x1a6>
					break;
 80049d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80049d6:	4b08      	ldr	r3, [pc, #32]	@ (80049f8 <prvProcessReceivedCommands+0x1c8>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	1d39      	adds	r1, r7, #4
 80049dc:	2200      	movs	r2, #0
 80049de:	4618      	mov	r0, r3
 80049e0:	f7fe fbfc 	bl	80031dc <xQueueReceive>
 80049e4:	4603      	mov	r3, r0
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	f47f af26 	bne.w	8004838 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80049ec:	bf00      	nop
 80049ee:	bf00      	nop
 80049f0:	3730      	adds	r7, #48	@ 0x30
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	20000d2c 	.word	0x20000d2c

080049fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b088      	sub	sp, #32
 8004a00:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a02:	e049      	b.n	8004a98 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a04:	4b2e      	ldr	r3, [pc, #184]	@ (8004ac0 <prvSwitchTimerLists+0xc4>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a0e:	4b2c      	ldr	r3, [pc, #176]	@ (8004ac0 <prvSwitchTimerLists+0xc4>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	3304      	adds	r3, #4
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f7fe f909 	bl	8002c34 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004a30:	f003 0304 	and.w	r3, r3, #4
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d02f      	beq.n	8004a98 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	699b      	ldr	r3, [r3, #24]
 8004a3c:	693a      	ldr	r2, [r7, #16]
 8004a3e:	4413      	add	r3, r2
 8004a40:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004a42:	68ba      	ldr	r2, [r7, #8]
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	429a      	cmp	r2, r3
 8004a48:	d90e      	bls.n	8004a68 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	68ba      	ldr	r2, [r7, #8]
 8004a4e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a56:	4b1a      	ldr	r3, [pc, #104]	@ (8004ac0 <prvSwitchTimerLists+0xc4>)
 8004a58:	681a      	ldr	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	3304      	adds	r3, #4
 8004a5e:	4619      	mov	r1, r3
 8004a60:	4610      	mov	r0, r2
 8004a62:	f7fe f8ae 	bl	8002bc2 <vListInsert>
 8004a66:	e017      	b.n	8004a98 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a68:	2300      	movs	r3, #0
 8004a6a:	9300      	str	r3, [sp, #0]
 8004a6c:	2300      	movs	r3, #0
 8004a6e:	693a      	ldr	r2, [r7, #16]
 8004a70:	2100      	movs	r1, #0
 8004a72:	68f8      	ldr	r0, [r7, #12]
 8004a74:	f7ff fd58 	bl	8004528 <xTimerGenericCommand>
 8004a78:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d10b      	bne.n	8004a98 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8004a80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a84:	f383 8811 	msr	BASEPRI, r3
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	f3bf 8f4f 	dsb	sy
 8004a90:	603b      	str	r3, [r7, #0]
}
 8004a92:	bf00      	nop
 8004a94:	bf00      	nop
 8004a96:	e7fd      	b.n	8004a94 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a98:	4b09      	ldr	r3, [pc, #36]	@ (8004ac0 <prvSwitchTimerLists+0xc4>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d1b0      	bne.n	8004a04 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004aa2:	4b07      	ldr	r3, [pc, #28]	@ (8004ac0 <prvSwitchTimerLists+0xc4>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004aa8:	4b06      	ldr	r3, [pc, #24]	@ (8004ac4 <prvSwitchTimerLists+0xc8>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	4a04      	ldr	r2, [pc, #16]	@ (8004ac0 <prvSwitchTimerLists+0xc4>)
 8004aae:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004ab0:	4a04      	ldr	r2, [pc, #16]	@ (8004ac4 <prvSwitchTimerLists+0xc8>)
 8004ab2:	697b      	ldr	r3, [r7, #20]
 8004ab4:	6013      	str	r3, [r2, #0]
}
 8004ab6:	bf00      	nop
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	20000d24 	.word	0x20000d24
 8004ac4:	20000d28 	.word	0x20000d28

08004ac8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004ace:	f000 f96b 	bl	8004da8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004ad2:	4b15      	ldr	r3, [pc, #84]	@ (8004b28 <prvCheckForValidListAndQueue+0x60>)
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d120      	bne.n	8004b1c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004ada:	4814      	ldr	r0, [pc, #80]	@ (8004b2c <prvCheckForValidListAndQueue+0x64>)
 8004adc:	f7fe f820 	bl	8002b20 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004ae0:	4813      	ldr	r0, [pc, #76]	@ (8004b30 <prvCheckForValidListAndQueue+0x68>)
 8004ae2:	f7fe f81d 	bl	8002b20 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004ae6:	4b13      	ldr	r3, [pc, #76]	@ (8004b34 <prvCheckForValidListAndQueue+0x6c>)
 8004ae8:	4a10      	ldr	r2, [pc, #64]	@ (8004b2c <prvCheckForValidListAndQueue+0x64>)
 8004aea:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004aec:	4b12      	ldr	r3, [pc, #72]	@ (8004b38 <prvCheckForValidListAndQueue+0x70>)
 8004aee:	4a10      	ldr	r2, [pc, #64]	@ (8004b30 <prvCheckForValidListAndQueue+0x68>)
 8004af0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004af2:	2300      	movs	r3, #0
 8004af4:	9300      	str	r3, [sp, #0]
 8004af6:	4b11      	ldr	r3, [pc, #68]	@ (8004b3c <prvCheckForValidListAndQueue+0x74>)
 8004af8:	4a11      	ldr	r2, [pc, #68]	@ (8004b40 <prvCheckForValidListAndQueue+0x78>)
 8004afa:	2110      	movs	r1, #16
 8004afc:	200a      	movs	r0, #10
 8004afe:	f7fe f92d 	bl	8002d5c <xQueueGenericCreateStatic>
 8004b02:	4603      	mov	r3, r0
 8004b04:	4a08      	ldr	r2, [pc, #32]	@ (8004b28 <prvCheckForValidListAndQueue+0x60>)
 8004b06:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004b08:	4b07      	ldr	r3, [pc, #28]	@ (8004b28 <prvCheckForValidListAndQueue+0x60>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d005      	beq.n	8004b1c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004b10:	4b05      	ldr	r3, [pc, #20]	@ (8004b28 <prvCheckForValidListAndQueue+0x60>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	490b      	ldr	r1, [pc, #44]	@ (8004b44 <prvCheckForValidListAndQueue+0x7c>)
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fe fd52 	bl	80035c0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b1c:	f000 f976 	bl	8004e0c <vPortExitCritical>
}
 8004b20:	bf00      	nop
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	20000d2c 	.word	0x20000d2c
 8004b2c:	20000cfc 	.word	0x20000cfc
 8004b30:	20000d10 	.word	0x20000d10
 8004b34:	20000d24 	.word	0x20000d24
 8004b38:	20000d28 	.word	0x20000d28
 8004b3c:	20000dd8 	.word	0x20000dd8
 8004b40:	20000d38 	.word	0x20000d38
 8004b44:	08005478 	.word	0x08005478

08004b48 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b085      	sub	sp, #20
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	60f8      	str	r0, [r7, #12]
 8004b50:	60b9      	str	r1, [r7, #8]
 8004b52:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	3b04      	subs	r3, #4
 8004b58:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004b60:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	3b04      	subs	r3, #4
 8004b66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	f023 0201 	bic.w	r2, r3, #1
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	3b04      	subs	r3, #4
 8004b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b78:	4a0c      	ldr	r2, [pc, #48]	@ (8004bac <pxPortInitialiseStack+0x64>)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	3b14      	subs	r3, #20
 8004b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	3b04      	subs	r3, #4
 8004b8e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f06f 0202 	mvn.w	r2, #2
 8004b96:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	3b20      	subs	r3, #32
 8004b9c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	08004bb1 	.word	0x08004bb1

08004bb0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004bb0:	b480      	push	{r7}
 8004bb2:	b085      	sub	sp, #20
 8004bb4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004bba:	4b13      	ldr	r3, [pc, #76]	@ (8004c08 <prvTaskExitError+0x58>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc2:	d00b      	beq.n	8004bdc <prvTaskExitError+0x2c>
	__asm volatile
 8004bc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc8:	f383 8811 	msr	BASEPRI, r3
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	60fb      	str	r3, [r7, #12]
}
 8004bd6:	bf00      	nop
 8004bd8:	bf00      	nop
 8004bda:	e7fd      	b.n	8004bd8 <prvTaskExitError+0x28>
	__asm volatile
 8004bdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004be0:	f383 8811 	msr	BASEPRI, r3
 8004be4:	f3bf 8f6f 	isb	sy
 8004be8:	f3bf 8f4f 	dsb	sy
 8004bec:	60bb      	str	r3, [r7, #8]
}
 8004bee:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004bf0:	bf00      	nop
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d0fc      	beq.n	8004bf2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004bf8:	bf00      	nop
 8004bfa:	bf00      	nop
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr
 8004c06:	bf00      	nop
 8004c08:	20000024 	.word	0x20000024
 8004c0c:	00000000 	.word	0x00000000

08004c10 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c10:	4b07      	ldr	r3, [pc, #28]	@ (8004c30 <pxCurrentTCBConst2>)
 8004c12:	6819      	ldr	r1, [r3, #0]
 8004c14:	6808      	ldr	r0, [r1, #0]
 8004c16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c1a:	f380 8809 	msr	PSP, r0
 8004c1e:	f3bf 8f6f 	isb	sy
 8004c22:	f04f 0000 	mov.w	r0, #0
 8004c26:	f380 8811 	msr	BASEPRI, r0
 8004c2a:	4770      	bx	lr
 8004c2c:	f3af 8000 	nop.w

08004c30 <pxCurrentTCBConst2>:
 8004c30:	200007fc 	.word	0x200007fc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004c34:	bf00      	nop
 8004c36:	bf00      	nop

08004c38 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004c38:	4808      	ldr	r0, [pc, #32]	@ (8004c5c <prvPortStartFirstTask+0x24>)
 8004c3a:	6800      	ldr	r0, [r0, #0]
 8004c3c:	6800      	ldr	r0, [r0, #0]
 8004c3e:	f380 8808 	msr	MSP, r0
 8004c42:	f04f 0000 	mov.w	r0, #0
 8004c46:	f380 8814 	msr	CONTROL, r0
 8004c4a:	b662      	cpsie	i
 8004c4c:	b661      	cpsie	f
 8004c4e:	f3bf 8f4f 	dsb	sy
 8004c52:	f3bf 8f6f 	isb	sy
 8004c56:	df00      	svc	0
 8004c58:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c5a:	bf00      	nop
 8004c5c:	e000ed08 	.word	0xe000ed08

08004c60 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c66:	4b47      	ldr	r3, [pc, #284]	@ (8004d84 <xPortStartScheduler+0x124>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	4a47      	ldr	r2, [pc, #284]	@ (8004d88 <xPortStartScheduler+0x128>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d10b      	bne.n	8004c88 <xPortStartScheduler+0x28>
	__asm volatile
 8004c70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c74:	f383 8811 	msr	BASEPRI, r3
 8004c78:	f3bf 8f6f 	isb	sy
 8004c7c:	f3bf 8f4f 	dsb	sy
 8004c80:	613b      	str	r3, [r7, #16]
}
 8004c82:	bf00      	nop
 8004c84:	bf00      	nop
 8004c86:	e7fd      	b.n	8004c84 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c88:	4b3e      	ldr	r3, [pc, #248]	@ (8004d84 <xPortStartScheduler+0x124>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a3f      	ldr	r2, [pc, #252]	@ (8004d8c <xPortStartScheduler+0x12c>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d10b      	bne.n	8004caa <xPortStartScheduler+0x4a>
	__asm volatile
 8004c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c96:	f383 8811 	msr	BASEPRI, r3
 8004c9a:	f3bf 8f6f 	isb	sy
 8004c9e:	f3bf 8f4f 	dsb	sy
 8004ca2:	60fb      	str	r3, [r7, #12]
}
 8004ca4:	bf00      	nop
 8004ca6:	bf00      	nop
 8004ca8:	e7fd      	b.n	8004ca6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004caa:	4b39      	ldr	r3, [pc, #228]	@ (8004d90 <xPortStartScheduler+0x130>)
 8004cac:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004cae:	697b      	ldr	r3, [r7, #20]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	b2db      	uxtb	r3, r3
 8004cb4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	22ff      	movs	r2, #255	@ 0xff
 8004cba:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004cc4:	78fb      	ldrb	r3, [r7, #3]
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8004ccc:	b2da      	uxtb	r2, r3
 8004cce:	4b31      	ldr	r3, [pc, #196]	@ (8004d94 <xPortStartScheduler+0x134>)
 8004cd0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004cd2:	4b31      	ldr	r3, [pc, #196]	@ (8004d98 <xPortStartScheduler+0x138>)
 8004cd4:	2207      	movs	r2, #7
 8004cd6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cd8:	e009      	b.n	8004cee <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8004cda:	4b2f      	ldr	r3, [pc, #188]	@ (8004d98 <xPortStartScheduler+0x138>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	3b01      	subs	r3, #1
 8004ce0:	4a2d      	ldr	r2, [pc, #180]	@ (8004d98 <xPortStartScheduler+0x138>)
 8004ce2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ce4:	78fb      	ldrb	r3, [r7, #3]
 8004ce6:	b2db      	uxtb	r3, r3
 8004ce8:	005b      	lsls	r3, r3, #1
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004cee:	78fb      	ldrb	r3, [r7, #3]
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cf6:	2b80      	cmp	r3, #128	@ 0x80
 8004cf8:	d0ef      	beq.n	8004cda <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004cfa:	4b27      	ldr	r3, [pc, #156]	@ (8004d98 <xPortStartScheduler+0x138>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f1c3 0307 	rsb	r3, r3, #7
 8004d02:	2b04      	cmp	r3, #4
 8004d04:	d00b      	beq.n	8004d1e <xPortStartScheduler+0xbe>
	__asm volatile
 8004d06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d0a:	f383 8811 	msr	BASEPRI, r3
 8004d0e:	f3bf 8f6f 	isb	sy
 8004d12:	f3bf 8f4f 	dsb	sy
 8004d16:	60bb      	str	r3, [r7, #8]
}
 8004d18:	bf00      	nop
 8004d1a:	bf00      	nop
 8004d1c:	e7fd      	b.n	8004d1a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d1e:	4b1e      	ldr	r3, [pc, #120]	@ (8004d98 <xPortStartScheduler+0x138>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	021b      	lsls	r3, r3, #8
 8004d24:	4a1c      	ldr	r2, [pc, #112]	@ (8004d98 <xPortStartScheduler+0x138>)
 8004d26:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004d28:	4b1b      	ldr	r3, [pc, #108]	@ (8004d98 <xPortStartScheduler+0x138>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004d30:	4a19      	ldr	r2, [pc, #100]	@ (8004d98 <xPortStartScheduler+0x138>)
 8004d32:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004d3c:	4b17      	ldr	r3, [pc, #92]	@ (8004d9c <xPortStartScheduler+0x13c>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	4a16      	ldr	r2, [pc, #88]	@ (8004d9c <xPortStartScheduler+0x13c>)
 8004d42:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004d46:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d48:	4b14      	ldr	r3, [pc, #80]	@ (8004d9c <xPortStartScheduler+0x13c>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	4a13      	ldr	r2, [pc, #76]	@ (8004d9c <xPortStartScheduler+0x13c>)
 8004d4e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8004d52:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d54:	f000 f8da 	bl	8004f0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d58:	4b11      	ldr	r3, [pc, #68]	@ (8004da0 <xPortStartScheduler+0x140>)
 8004d5a:	2200      	movs	r2, #0
 8004d5c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d5e:	f000 f8f9 	bl	8004f54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d62:	4b10      	ldr	r3, [pc, #64]	@ (8004da4 <xPortStartScheduler+0x144>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a0f      	ldr	r2, [pc, #60]	@ (8004da4 <xPortStartScheduler+0x144>)
 8004d68:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8004d6c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d6e:	f7ff ff63 	bl	8004c38 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d72:	f7ff f83d 	bl	8003df0 <vTaskSwitchContext>
	prvTaskExitError();
 8004d76:	f7ff ff1b 	bl	8004bb0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3718      	adds	r7, #24
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	e000ed00 	.word	0xe000ed00
 8004d88:	410fc271 	.word	0x410fc271
 8004d8c:	410fc270 	.word	0x410fc270
 8004d90:	e000e400 	.word	0xe000e400
 8004d94:	20000e28 	.word	0x20000e28
 8004d98:	20000e2c 	.word	0x20000e2c
 8004d9c:	e000ed20 	.word	0xe000ed20
 8004da0:	20000024 	.word	0x20000024
 8004da4:	e000ef34 	.word	0xe000ef34

08004da8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
	__asm volatile
 8004dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004db2:	f383 8811 	msr	BASEPRI, r3
 8004db6:	f3bf 8f6f 	isb	sy
 8004dba:	f3bf 8f4f 	dsb	sy
 8004dbe:	607b      	str	r3, [r7, #4]
}
 8004dc0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004dc2:	4b10      	ldr	r3, [pc, #64]	@ (8004e04 <vPortEnterCritical+0x5c>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	3301      	adds	r3, #1
 8004dc8:	4a0e      	ldr	r2, [pc, #56]	@ (8004e04 <vPortEnterCritical+0x5c>)
 8004dca:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004dcc:	4b0d      	ldr	r3, [pc, #52]	@ (8004e04 <vPortEnterCritical+0x5c>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	2b01      	cmp	r3, #1
 8004dd2:	d110      	bne.n	8004df6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004dd4:	4b0c      	ldr	r3, [pc, #48]	@ (8004e08 <vPortEnterCritical+0x60>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	b2db      	uxtb	r3, r3
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00b      	beq.n	8004df6 <vPortEnterCritical+0x4e>
	__asm volatile
 8004dde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de2:	f383 8811 	msr	BASEPRI, r3
 8004de6:	f3bf 8f6f 	isb	sy
 8004dea:	f3bf 8f4f 	dsb	sy
 8004dee:	603b      	str	r3, [r7, #0]
}
 8004df0:	bf00      	nop
 8004df2:	bf00      	nop
 8004df4:	e7fd      	b.n	8004df2 <vPortEnterCritical+0x4a>
	}
}
 8004df6:	bf00      	nop
 8004df8:	370c      	adds	r7, #12
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e00:	4770      	bx	lr
 8004e02:	bf00      	nop
 8004e04:	20000024 	.word	0x20000024
 8004e08:	e000ed04 	.word	0xe000ed04

08004e0c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e12:	4b12      	ldr	r3, [pc, #72]	@ (8004e5c <vPortExitCritical+0x50>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d10b      	bne.n	8004e32 <vPortExitCritical+0x26>
	__asm volatile
 8004e1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e1e:	f383 8811 	msr	BASEPRI, r3
 8004e22:	f3bf 8f6f 	isb	sy
 8004e26:	f3bf 8f4f 	dsb	sy
 8004e2a:	607b      	str	r3, [r7, #4]
}
 8004e2c:	bf00      	nop
 8004e2e:	bf00      	nop
 8004e30:	e7fd      	b.n	8004e2e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004e32:	4b0a      	ldr	r3, [pc, #40]	@ (8004e5c <vPortExitCritical+0x50>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	3b01      	subs	r3, #1
 8004e38:	4a08      	ldr	r2, [pc, #32]	@ (8004e5c <vPortExitCritical+0x50>)
 8004e3a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004e3c:	4b07      	ldr	r3, [pc, #28]	@ (8004e5c <vPortExitCritical+0x50>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d105      	bne.n	8004e50 <vPortExitCritical+0x44>
 8004e44:	2300      	movs	r3, #0
 8004e46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	f383 8811 	msr	BASEPRI, r3
}
 8004e4e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e50:	bf00      	nop
 8004e52:	370c      	adds	r7, #12
 8004e54:	46bd      	mov	sp, r7
 8004e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5a:	4770      	bx	lr
 8004e5c:	20000024 	.word	0x20000024

08004e60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e60:	f3ef 8009 	mrs	r0, PSP
 8004e64:	f3bf 8f6f 	isb	sy
 8004e68:	4b15      	ldr	r3, [pc, #84]	@ (8004ec0 <pxCurrentTCBConst>)
 8004e6a:	681a      	ldr	r2, [r3, #0]
 8004e6c:	f01e 0f10 	tst.w	lr, #16
 8004e70:	bf08      	it	eq
 8004e72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e7a:	6010      	str	r0, [r2, #0]
 8004e7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8004e84:	f380 8811 	msr	BASEPRI, r0
 8004e88:	f3bf 8f4f 	dsb	sy
 8004e8c:	f3bf 8f6f 	isb	sy
 8004e90:	f7fe ffae 	bl	8003df0 <vTaskSwitchContext>
 8004e94:	f04f 0000 	mov.w	r0, #0
 8004e98:	f380 8811 	msr	BASEPRI, r0
 8004e9c:	bc09      	pop	{r0, r3}
 8004e9e:	6819      	ldr	r1, [r3, #0]
 8004ea0:	6808      	ldr	r0, [r1, #0]
 8004ea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ea6:	f01e 0f10 	tst.w	lr, #16
 8004eaa:	bf08      	it	eq
 8004eac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004eb0:	f380 8809 	msr	PSP, r0
 8004eb4:	f3bf 8f6f 	isb	sy
 8004eb8:	4770      	bx	lr
 8004eba:	bf00      	nop
 8004ebc:	f3af 8000 	nop.w

08004ec0 <pxCurrentTCBConst>:
 8004ec0:	200007fc 	.word	0x200007fc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004ec4:	bf00      	nop
 8004ec6:	bf00      	nop

08004ec8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8004ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	607b      	str	r3, [r7, #4]
}
 8004ee0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ee2:	f7fe fecb 	bl	8003c7c <xTaskIncrementTick>
 8004ee6:	4603      	mov	r3, r0
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d003      	beq.n	8004ef4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004eec:	4b06      	ldr	r3, [pc, #24]	@ (8004f08 <xPortSysTickHandler+0x40>)
 8004eee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ef8:	683b      	ldr	r3, [r7, #0]
 8004efa:	f383 8811 	msr	BASEPRI, r3
}
 8004efe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f00:	bf00      	nop
 8004f02:	3708      	adds	r7, #8
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}
 8004f08:	e000ed04 	.word	0xe000ed04

08004f0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f10:	4b0b      	ldr	r3, [pc, #44]	@ (8004f40 <vPortSetupTimerInterrupt+0x34>)
 8004f12:	2200      	movs	r2, #0
 8004f14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f16:	4b0b      	ldr	r3, [pc, #44]	@ (8004f44 <vPortSetupTimerInterrupt+0x38>)
 8004f18:	2200      	movs	r2, #0
 8004f1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f1c:	4b0a      	ldr	r3, [pc, #40]	@ (8004f48 <vPortSetupTimerInterrupt+0x3c>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	4a0a      	ldr	r2, [pc, #40]	@ (8004f4c <vPortSetupTimerInterrupt+0x40>)
 8004f22:	fba2 2303 	umull	r2, r3, r2, r3
 8004f26:	099b      	lsrs	r3, r3, #6
 8004f28:	4a09      	ldr	r2, [pc, #36]	@ (8004f50 <vPortSetupTimerInterrupt+0x44>)
 8004f2a:	3b01      	subs	r3, #1
 8004f2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004f2e:	4b04      	ldr	r3, [pc, #16]	@ (8004f40 <vPortSetupTimerInterrupt+0x34>)
 8004f30:	2207      	movs	r2, #7
 8004f32:	601a      	str	r2, [r3, #0]
}
 8004f34:	bf00      	nop
 8004f36:	46bd      	mov	sp, r7
 8004f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3c:	4770      	bx	lr
 8004f3e:	bf00      	nop
 8004f40:	e000e010 	.word	0xe000e010
 8004f44:	e000e018 	.word	0xe000e018
 8004f48:	20000018 	.word	0x20000018
 8004f4c:	10624dd3 	.word	0x10624dd3
 8004f50:	e000e014 	.word	0xe000e014

08004f54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f54:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8004f64 <vPortEnableVFP+0x10>
 8004f58:	6801      	ldr	r1, [r0, #0]
 8004f5a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8004f5e:	6001      	str	r1, [r0, #0]
 8004f60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f62:	bf00      	nop
 8004f64:	e000ed88 	.word	0xe000ed88

08004f68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004f68:	b480      	push	{r7}
 8004f6a:	b085      	sub	sp, #20
 8004f6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004f6e:	f3ef 8305 	mrs	r3, IPSR
 8004f72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2b0f      	cmp	r3, #15
 8004f78:	d915      	bls.n	8004fa6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f7a:	4a18      	ldr	r2, [pc, #96]	@ (8004fdc <vPortValidateInterruptPriority+0x74>)
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	4413      	add	r3, r2
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f84:	4b16      	ldr	r3, [pc, #88]	@ (8004fe0 <vPortValidateInterruptPriority+0x78>)
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	7afa      	ldrb	r2, [r7, #11]
 8004f8a:	429a      	cmp	r2, r3
 8004f8c:	d20b      	bcs.n	8004fa6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8004f8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f92:	f383 8811 	msr	BASEPRI, r3
 8004f96:	f3bf 8f6f 	isb	sy
 8004f9a:	f3bf 8f4f 	dsb	sy
 8004f9e:	607b      	str	r3, [r7, #4]
}
 8004fa0:	bf00      	nop
 8004fa2:	bf00      	nop
 8004fa4:	e7fd      	b.n	8004fa2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004fa6:	4b0f      	ldr	r3, [pc, #60]	@ (8004fe4 <vPortValidateInterruptPriority+0x7c>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004fae:	4b0e      	ldr	r3, [pc, #56]	@ (8004fe8 <vPortValidateInterruptPriority+0x80>)
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d90b      	bls.n	8004fce <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8004fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fba:	f383 8811 	msr	BASEPRI, r3
 8004fbe:	f3bf 8f6f 	isb	sy
 8004fc2:	f3bf 8f4f 	dsb	sy
 8004fc6:	603b      	str	r3, [r7, #0]
}
 8004fc8:	bf00      	nop
 8004fca:	bf00      	nop
 8004fcc:	e7fd      	b.n	8004fca <vPortValidateInterruptPriority+0x62>
	}
 8004fce:	bf00      	nop
 8004fd0:	3714      	adds	r7, #20
 8004fd2:	46bd      	mov	sp, r7
 8004fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd8:	4770      	bx	lr
 8004fda:	bf00      	nop
 8004fdc:	e000e3f0 	.word	0xe000e3f0
 8004fe0:	20000e28 	.word	0x20000e28
 8004fe4:	e000ed0c 	.word	0xe000ed0c
 8004fe8:	20000e2c 	.word	0x20000e2c

08004fec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b08a      	sub	sp, #40	@ 0x28
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ff8:	f7fe fd84 	bl	8003b04 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ffc:	4b5c      	ldr	r3, [pc, #368]	@ (8005170 <pvPortMalloc+0x184>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d101      	bne.n	8005008 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005004:	f000 f924 	bl	8005250 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005008:	4b5a      	ldr	r3, [pc, #360]	@ (8005174 <pvPortMalloc+0x188>)
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4013      	ands	r3, r2
 8005010:	2b00      	cmp	r3, #0
 8005012:	f040 8095 	bne.w	8005140 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d01e      	beq.n	800505a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800501c:	2208      	movs	r2, #8
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4413      	add	r3, r2
 8005022:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	f003 0307 	and.w	r3, r3, #7
 800502a:	2b00      	cmp	r3, #0
 800502c:	d015      	beq.n	800505a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f023 0307 	bic.w	r3, r3, #7
 8005034:	3308      	adds	r3, #8
 8005036:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	f003 0307 	and.w	r3, r3, #7
 800503e:	2b00      	cmp	r3, #0
 8005040:	d00b      	beq.n	800505a <pvPortMalloc+0x6e>
	__asm volatile
 8005042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005046:	f383 8811 	msr	BASEPRI, r3
 800504a:	f3bf 8f6f 	isb	sy
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	617b      	str	r3, [r7, #20]
}
 8005054:	bf00      	nop
 8005056:	bf00      	nop
 8005058:	e7fd      	b.n	8005056 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d06f      	beq.n	8005140 <pvPortMalloc+0x154>
 8005060:	4b45      	ldr	r3, [pc, #276]	@ (8005178 <pvPortMalloc+0x18c>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	687a      	ldr	r2, [r7, #4]
 8005066:	429a      	cmp	r2, r3
 8005068:	d86a      	bhi.n	8005140 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800506a:	4b44      	ldr	r3, [pc, #272]	@ (800517c <pvPortMalloc+0x190>)
 800506c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800506e:	4b43      	ldr	r3, [pc, #268]	@ (800517c <pvPortMalloc+0x190>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005074:	e004      	b.n	8005080 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005078:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800507a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	429a      	cmp	r2, r3
 8005088:	d903      	bls.n	8005092 <pvPortMalloc+0xa6>
 800508a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1f1      	bne.n	8005076 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005092:	4b37      	ldr	r3, [pc, #220]	@ (8005170 <pvPortMalloc+0x184>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005098:	429a      	cmp	r2, r3
 800509a:	d051      	beq.n	8005140 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800509c:	6a3b      	ldr	r3, [r7, #32]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	2208      	movs	r2, #8
 80050a2:	4413      	add	r3, r2
 80050a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80050a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	6a3b      	ldr	r3, [r7, #32]
 80050ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80050ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b0:	685a      	ldr	r2, [r3, #4]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	1ad2      	subs	r2, r2, r3
 80050b6:	2308      	movs	r3, #8
 80050b8:	005b      	lsls	r3, r3, #1
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d920      	bls.n	8005100 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80050be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	4413      	add	r3, r2
 80050c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	f003 0307 	and.w	r3, r3, #7
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d00b      	beq.n	80050e8 <pvPortMalloc+0xfc>
	__asm volatile
 80050d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050d4:	f383 8811 	msr	BASEPRI, r3
 80050d8:	f3bf 8f6f 	isb	sy
 80050dc:	f3bf 8f4f 	dsb	sy
 80050e0:	613b      	str	r3, [r7, #16]
}
 80050e2:	bf00      	nop
 80050e4:	bf00      	nop
 80050e6:	e7fd      	b.n	80050e4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80050e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	1ad2      	subs	r2, r2, r3
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80050f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050f6:	687a      	ldr	r2, [r7, #4]
 80050f8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80050fa:	69b8      	ldr	r0, [r7, #24]
 80050fc:	f000 f90a 	bl	8005314 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005100:	4b1d      	ldr	r3, [pc, #116]	@ (8005178 <pvPortMalloc+0x18c>)
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	1ad3      	subs	r3, r2, r3
 800510a:	4a1b      	ldr	r2, [pc, #108]	@ (8005178 <pvPortMalloc+0x18c>)
 800510c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800510e:	4b1a      	ldr	r3, [pc, #104]	@ (8005178 <pvPortMalloc+0x18c>)
 8005110:	681a      	ldr	r2, [r3, #0]
 8005112:	4b1b      	ldr	r3, [pc, #108]	@ (8005180 <pvPortMalloc+0x194>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	429a      	cmp	r2, r3
 8005118:	d203      	bcs.n	8005122 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800511a:	4b17      	ldr	r3, [pc, #92]	@ (8005178 <pvPortMalloc+0x18c>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a18      	ldr	r2, [pc, #96]	@ (8005180 <pvPortMalloc+0x194>)
 8005120:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005124:	685a      	ldr	r2, [r3, #4]
 8005126:	4b13      	ldr	r3, [pc, #76]	@ (8005174 <pvPortMalloc+0x188>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	431a      	orrs	r2, r3
 800512c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800512e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005132:	2200      	movs	r2, #0
 8005134:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005136:	4b13      	ldr	r3, [pc, #76]	@ (8005184 <pvPortMalloc+0x198>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	3301      	adds	r3, #1
 800513c:	4a11      	ldr	r2, [pc, #68]	@ (8005184 <pvPortMalloc+0x198>)
 800513e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005140:	f7fe fcee 	bl	8003b20 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	f003 0307 	and.w	r3, r3, #7
 800514a:	2b00      	cmp	r3, #0
 800514c:	d00b      	beq.n	8005166 <pvPortMalloc+0x17a>
	__asm volatile
 800514e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005152:	f383 8811 	msr	BASEPRI, r3
 8005156:	f3bf 8f6f 	isb	sy
 800515a:	f3bf 8f4f 	dsb	sy
 800515e:	60fb      	str	r3, [r7, #12]
}
 8005160:	bf00      	nop
 8005162:	bf00      	nop
 8005164:	e7fd      	b.n	8005162 <pvPortMalloc+0x176>
	return pvReturn;
 8005166:	69fb      	ldr	r3, [r7, #28]
}
 8005168:	4618      	mov	r0, r3
 800516a:	3728      	adds	r7, #40	@ 0x28
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}
 8005170:	20004a38 	.word	0x20004a38
 8005174:	20004a4c 	.word	0x20004a4c
 8005178:	20004a3c 	.word	0x20004a3c
 800517c:	20004a30 	.word	0x20004a30
 8005180:	20004a40 	.word	0x20004a40
 8005184:	20004a44 	.word	0x20004a44

08005188 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d04f      	beq.n	800523a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800519a:	2308      	movs	r3, #8
 800519c:	425b      	negs	r3, r3
 800519e:	697a      	ldr	r2, [r7, #20]
 80051a0:	4413      	add	r3, r2
 80051a2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	685a      	ldr	r2, [r3, #4]
 80051ac:	4b25      	ldr	r3, [pc, #148]	@ (8005244 <vPortFree+0xbc>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4013      	ands	r3, r2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d10b      	bne.n	80051ce <vPortFree+0x46>
	__asm volatile
 80051b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051ba:	f383 8811 	msr	BASEPRI, r3
 80051be:	f3bf 8f6f 	isb	sy
 80051c2:	f3bf 8f4f 	dsb	sy
 80051c6:	60fb      	str	r3, [r7, #12]
}
 80051c8:	bf00      	nop
 80051ca:	bf00      	nop
 80051cc:	e7fd      	b.n	80051ca <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00b      	beq.n	80051ee <vPortFree+0x66>
	__asm volatile
 80051d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051da:	f383 8811 	msr	BASEPRI, r3
 80051de:	f3bf 8f6f 	isb	sy
 80051e2:	f3bf 8f4f 	dsb	sy
 80051e6:	60bb      	str	r3, [r7, #8]
}
 80051e8:	bf00      	nop
 80051ea:	bf00      	nop
 80051ec:	e7fd      	b.n	80051ea <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	4b14      	ldr	r3, [pc, #80]	@ (8005244 <vPortFree+0xbc>)
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4013      	ands	r3, r2
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d01e      	beq.n	800523a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d11a      	bne.n	800523a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005204:	693b      	ldr	r3, [r7, #16]
 8005206:	685a      	ldr	r2, [r3, #4]
 8005208:	4b0e      	ldr	r3, [pc, #56]	@ (8005244 <vPortFree+0xbc>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	43db      	mvns	r3, r3
 800520e:	401a      	ands	r2, r3
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005214:	f7fe fc76 	bl	8003b04 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	685a      	ldr	r2, [r3, #4]
 800521c:	4b0a      	ldr	r3, [pc, #40]	@ (8005248 <vPortFree+0xc0>)
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	4413      	add	r3, r2
 8005222:	4a09      	ldr	r2, [pc, #36]	@ (8005248 <vPortFree+0xc0>)
 8005224:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005226:	6938      	ldr	r0, [r7, #16]
 8005228:	f000 f874 	bl	8005314 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800522c:	4b07      	ldr	r3, [pc, #28]	@ (800524c <vPortFree+0xc4>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	3301      	adds	r3, #1
 8005232:	4a06      	ldr	r2, [pc, #24]	@ (800524c <vPortFree+0xc4>)
 8005234:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005236:	f7fe fc73 	bl	8003b20 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800523a:	bf00      	nop
 800523c:	3718      	adds	r7, #24
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	20004a4c 	.word	0x20004a4c
 8005248:	20004a3c 	.word	0x20004a3c
 800524c:	20004a48 	.word	0x20004a48

08005250 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005250:	b480      	push	{r7}
 8005252:	b085      	sub	sp, #20
 8005254:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005256:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800525a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800525c:	4b27      	ldr	r3, [pc, #156]	@ (80052fc <prvHeapInit+0xac>)
 800525e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	f003 0307 	and.w	r3, r3, #7
 8005266:	2b00      	cmp	r3, #0
 8005268:	d00c      	beq.n	8005284 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	3307      	adds	r3, #7
 800526e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f023 0307 	bic.w	r3, r3, #7
 8005276:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005278:	68ba      	ldr	r2, [r7, #8]
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	4a1f      	ldr	r2, [pc, #124]	@ (80052fc <prvHeapInit+0xac>)
 8005280:	4413      	add	r3, r2
 8005282:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005288:	4a1d      	ldr	r2, [pc, #116]	@ (8005300 <prvHeapInit+0xb0>)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800528e:	4b1c      	ldr	r3, [pc, #112]	@ (8005300 <prvHeapInit+0xb0>)
 8005290:	2200      	movs	r2, #0
 8005292:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	68ba      	ldr	r2, [r7, #8]
 8005298:	4413      	add	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800529c:	2208      	movs	r2, #8
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	1a9b      	subs	r3, r3, r2
 80052a2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	f023 0307 	bic.w	r3, r3, #7
 80052aa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4a15      	ldr	r2, [pc, #84]	@ (8005304 <prvHeapInit+0xb4>)
 80052b0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80052b2:	4b14      	ldr	r3, [pc, #80]	@ (8005304 <prvHeapInit+0xb4>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	2200      	movs	r2, #0
 80052b8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80052ba:	4b12      	ldr	r3, [pc, #72]	@ (8005304 <prvHeapInit+0xb4>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2200      	movs	r2, #0
 80052c0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80052c6:	683b      	ldr	r3, [r7, #0]
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	1ad2      	subs	r2, r2, r3
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80052d0:	4b0c      	ldr	r3, [pc, #48]	@ (8005304 <prvHeapInit+0xb4>)
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	4a0a      	ldr	r2, [pc, #40]	@ (8005308 <prvHeapInit+0xb8>)
 80052de:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	4a09      	ldr	r2, [pc, #36]	@ (800530c <prvHeapInit+0xbc>)
 80052e6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80052e8:	4b09      	ldr	r3, [pc, #36]	@ (8005310 <prvHeapInit+0xc0>)
 80052ea:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80052ee:	601a      	str	r2, [r3, #0]
}
 80052f0:	bf00      	nop
 80052f2:	3714      	adds	r7, #20
 80052f4:	46bd      	mov	sp, r7
 80052f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fa:	4770      	bx	lr
 80052fc:	20000e30 	.word	0x20000e30
 8005300:	20004a30 	.word	0x20004a30
 8005304:	20004a38 	.word	0x20004a38
 8005308:	20004a40 	.word	0x20004a40
 800530c:	20004a3c 	.word	0x20004a3c
 8005310:	20004a4c 	.word	0x20004a4c

08005314 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005314:	b480      	push	{r7}
 8005316:	b085      	sub	sp, #20
 8005318:	af00      	add	r7, sp, #0
 800531a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800531c:	4b28      	ldr	r3, [pc, #160]	@ (80053c0 <prvInsertBlockIntoFreeList+0xac>)
 800531e:	60fb      	str	r3, [r7, #12]
 8005320:	e002      	b.n	8005328 <prvInsertBlockIntoFreeList+0x14>
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	60fb      	str	r3, [r7, #12]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	687a      	ldr	r2, [r7, #4]
 800532e:	429a      	cmp	r2, r3
 8005330:	d8f7      	bhi.n	8005322 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	685b      	ldr	r3, [r3, #4]
 800533a:	68ba      	ldr	r2, [r7, #8]
 800533c:	4413      	add	r3, r2
 800533e:	687a      	ldr	r2, [r7, #4]
 8005340:	429a      	cmp	r2, r3
 8005342:	d108      	bne.n	8005356 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	685a      	ldr	r2, [r3, #4]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	685b      	ldr	r3, [r3, #4]
 800534c:	441a      	add	r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	441a      	add	r2, r3
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	429a      	cmp	r2, r3
 8005368:	d118      	bne.n	800539c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	4b15      	ldr	r3, [pc, #84]	@ (80053c4 <prvInsertBlockIntoFreeList+0xb0>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	429a      	cmp	r2, r3
 8005374:	d00d      	beq.n	8005392 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	685a      	ldr	r2, [r3, #4]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	685b      	ldr	r3, [r3, #4]
 8005380:	441a      	add	r2, r3
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	601a      	str	r2, [r3, #0]
 8005390:	e008      	b.n	80053a4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005392:	4b0c      	ldr	r3, [pc, #48]	@ (80053c4 <prvInsertBlockIntoFreeList+0xb0>)
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	e003      	b.n	80053a4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80053a4:	68fa      	ldr	r2, [r7, #12]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	d002      	beq.n	80053b2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80053b2:	bf00      	nop
 80053b4:	3714      	adds	r7, #20
 80053b6:	46bd      	mov	sp, r7
 80053b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053bc:	4770      	bx	lr
 80053be:	bf00      	nop
 80053c0:	20004a30 	.word	0x20004a30
 80053c4:	20004a38 	.word	0x20004a38

080053c8 <memset>:
 80053c8:	4402      	add	r2, r0
 80053ca:	4603      	mov	r3, r0
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d100      	bne.n	80053d2 <memset+0xa>
 80053d0:	4770      	bx	lr
 80053d2:	f803 1b01 	strb.w	r1, [r3], #1
 80053d6:	e7f9      	b.n	80053cc <memset+0x4>

080053d8 <__libc_init_array>:
 80053d8:	b570      	push	{r4, r5, r6, lr}
 80053da:	4d0d      	ldr	r5, [pc, #52]	@ (8005410 <__libc_init_array+0x38>)
 80053dc:	4c0d      	ldr	r4, [pc, #52]	@ (8005414 <__libc_init_array+0x3c>)
 80053de:	1b64      	subs	r4, r4, r5
 80053e0:	10a4      	asrs	r4, r4, #2
 80053e2:	2600      	movs	r6, #0
 80053e4:	42a6      	cmp	r6, r4
 80053e6:	d109      	bne.n	80053fc <__libc_init_array+0x24>
 80053e8:	4d0b      	ldr	r5, [pc, #44]	@ (8005418 <__libc_init_array+0x40>)
 80053ea:	4c0c      	ldr	r4, [pc, #48]	@ (800541c <__libc_init_array+0x44>)
 80053ec:	f000 f826 	bl	800543c <_init>
 80053f0:	1b64      	subs	r4, r4, r5
 80053f2:	10a4      	asrs	r4, r4, #2
 80053f4:	2600      	movs	r6, #0
 80053f6:	42a6      	cmp	r6, r4
 80053f8:	d105      	bne.n	8005406 <__libc_init_array+0x2e>
 80053fa:	bd70      	pop	{r4, r5, r6, pc}
 80053fc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005400:	4798      	blx	r3
 8005402:	3601      	adds	r6, #1
 8005404:	e7ee      	b.n	80053e4 <__libc_init_array+0xc>
 8005406:	f855 3b04 	ldr.w	r3, [r5], #4
 800540a:	4798      	blx	r3
 800540c:	3601      	adds	r6, #1
 800540e:	e7f2      	b.n	80053f6 <__libc_init_array+0x1e>
 8005410:	080054c4 	.word	0x080054c4
 8005414:	080054c4 	.word	0x080054c4
 8005418:	080054c4 	.word	0x080054c4
 800541c:	080054c8 	.word	0x080054c8

08005420 <memcpy>:
 8005420:	440a      	add	r2, r1
 8005422:	4291      	cmp	r1, r2
 8005424:	f100 33ff 	add.w	r3, r0, #4294967295
 8005428:	d100      	bne.n	800542c <memcpy+0xc>
 800542a:	4770      	bx	lr
 800542c:	b510      	push	{r4, lr}
 800542e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005432:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005436:	4291      	cmp	r1, r2
 8005438:	d1f9      	bne.n	800542e <memcpy+0xe>
 800543a:	bd10      	pop	{r4, pc}

0800543c <_init>:
 800543c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800543e:	bf00      	nop
 8005440:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005442:	bc08      	pop	{r3}
 8005444:	469e      	mov	lr, r3
 8005446:	4770      	bx	lr

08005448 <_fini>:
 8005448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800544a:	bf00      	nop
 800544c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800544e:	bc08      	pop	{r3}
 8005450:	469e      	mov	lr, r3
 8005452:	4770      	bx	lr
