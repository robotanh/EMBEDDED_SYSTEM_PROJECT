
KPL_STM32F411RE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005af4  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08005c94  08005c94  00006c94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cf4  08005cf4  00007028  2**0
                  CONTENTS
  4 .ARM          00000008  08005cf4  08005cf4  00006cf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005cfc  08005cfc  00007028  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005cfc  08005cfc  00006cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005d00  08005d00  00006d00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000028  20000000  08005d04  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b10  20000028  08005d2c  00007028  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b38  08005d2c  00007b38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007028  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017fb8  00000000  00000000  00007058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033fb  00000000  00000000  0001f010  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015c8  00000000  00000000  00022410  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010fe  00000000  00000000  000239d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003778  00000000  00000000  00024ad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000176a7  00000000  00000000  0002824e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009a3ba  00000000  00000000  0003f8f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d9caf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cb0  00000000  00000000  000d9cf4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000043  00000000  00000000  000df9a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000028 	.word	0x20000028
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08005c7c 	.word	0x08005c7c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000002c 	.word	0x2000002c
 80001dc:	08005c7c 	.word	0x08005c7c

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b96a 	b.w	80004cc <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	460c      	mov	r4, r1
 8000218:	2b00      	cmp	r3, #0
 800021a:	d14e      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021c:	4694      	mov	ip, r2
 800021e:	458c      	cmp	ip, r1
 8000220:	4686      	mov	lr, r0
 8000222:	fab2 f282 	clz	r2, r2
 8000226:	d962      	bls.n	80002ee <__udivmoddi4+0xde>
 8000228:	b14a      	cbz	r2, 800023e <__udivmoddi4+0x2e>
 800022a:	f1c2 0320 	rsb	r3, r2, #32
 800022e:	4091      	lsls	r1, r2
 8000230:	fa20 f303 	lsr.w	r3, r0, r3
 8000234:	fa0c fc02 	lsl.w	ip, ip, r2
 8000238:	4319      	orrs	r1, r3
 800023a:	fa00 fe02 	lsl.w	lr, r0, r2
 800023e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000242:	fa1f f68c 	uxth.w	r6, ip
 8000246:	fbb1 f4f7 	udiv	r4, r1, r7
 800024a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800024e:	fb07 1114 	mls	r1, r7, r4, r1
 8000252:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000256:	fb04 f106 	mul.w	r1, r4, r6
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f104 30ff 	add.w	r0, r4, #4294967295
 8000266:	f080 8112 	bcs.w	800048e <__udivmoddi4+0x27e>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 810f 	bls.w	800048e <__udivmoddi4+0x27e>
 8000270:	3c02      	subs	r4, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a59      	subs	r1, r3, r1
 8000276:	fa1f f38e 	uxth.w	r3, lr
 800027a:	fbb1 f0f7 	udiv	r0, r1, r7
 800027e:	fb07 1110 	mls	r1, r7, r0, r1
 8000282:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000286:	fb00 f606 	mul.w	r6, r0, r6
 800028a:	429e      	cmp	r6, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x94>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f100 31ff 	add.w	r1, r0, #4294967295
 8000296:	f080 80fc 	bcs.w	8000492 <__udivmoddi4+0x282>
 800029a:	429e      	cmp	r6, r3
 800029c:	f240 80f9 	bls.w	8000492 <__udivmoddi4+0x282>
 80002a0:	4463      	add	r3, ip
 80002a2:	3802      	subs	r0, #2
 80002a4:	1b9b      	subs	r3, r3, r6
 80002a6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002aa:	2100      	movs	r1, #0
 80002ac:	b11d      	cbz	r5, 80002b6 <__udivmoddi4+0xa6>
 80002ae:	40d3      	lsrs	r3, r2
 80002b0:	2200      	movs	r2, #0
 80002b2:	e9c5 3200 	strd	r3, r2, [r5]
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d905      	bls.n	80002ca <__udivmoddi4+0xba>
 80002be:	b10d      	cbz	r5, 80002c4 <__udivmoddi4+0xb4>
 80002c0:	e9c5 0100 	strd	r0, r1, [r5]
 80002c4:	2100      	movs	r1, #0
 80002c6:	4608      	mov	r0, r1
 80002c8:	e7f5      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ca:	fab3 f183 	clz	r1, r3
 80002ce:	2900      	cmp	r1, #0
 80002d0:	d146      	bne.n	8000360 <__udivmoddi4+0x150>
 80002d2:	42a3      	cmp	r3, r4
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xcc>
 80002d6:	4290      	cmp	r0, r2
 80002d8:	f0c0 80f0 	bcc.w	80004bc <__udivmoddi4+0x2ac>
 80002dc:	1a86      	subs	r6, r0, r2
 80002de:	eb64 0303 	sbc.w	r3, r4, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	2d00      	cmp	r5, #0
 80002e6:	d0e6      	beq.n	80002b6 <__udivmoddi4+0xa6>
 80002e8:	e9c5 6300 	strd	r6, r3, [r5]
 80002ec:	e7e3      	b.n	80002b6 <__udivmoddi4+0xa6>
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x204>
 80002f4:	eba1 040c 	sub.w	r4, r1, ip
 80002f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002fc:	fa1f f78c 	uxth.w	r7, ip
 8000300:	2101      	movs	r1, #1
 8000302:	fbb4 f6f8 	udiv	r6, r4, r8
 8000306:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800030a:	fb08 4416 	mls	r4, r8, r6, r4
 800030e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000312:	fb07 f006 	mul.w	r0, r7, r6
 8000316:	4298      	cmp	r0, r3
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x11c>
 800031a:	eb1c 0303 	adds.w	r3, ip, r3
 800031e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x11a>
 8000324:	4298      	cmp	r0, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2b4>
 800032a:	4626      	mov	r6, r4
 800032c:	1a1c      	subs	r4, r3, r0
 800032e:	fa1f f38e 	uxth.w	r3, lr
 8000332:	fbb4 f0f8 	udiv	r0, r4, r8
 8000336:	fb08 4410 	mls	r4, r8, r0, r4
 800033a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800033e:	fb00 f707 	mul.w	r7, r0, r7
 8000342:	429f      	cmp	r7, r3
 8000344:	d908      	bls.n	8000358 <__udivmoddi4+0x148>
 8000346:	eb1c 0303 	adds.w	r3, ip, r3
 800034a:	f100 34ff 	add.w	r4, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x146>
 8000350:	429f      	cmp	r7, r3
 8000352:	f200 80b0 	bhi.w	80004b6 <__udivmoddi4+0x2a6>
 8000356:	4620      	mov	r0, r4
 8000358:	1bdb      	subs	r3, r3, r7
 800035a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800035e:	e7a5      	b.n	80002ac <__udivmoddi4+0x9c>
 8000360:	f1c1 0620 	rsb	r6, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 f706 	lsr.w	r7, r2, r6
 800036a:	431f      	orrs	r7, r3
 800036c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000370:	fa04 f301 	lsl.w	r3, r4, r1
 8000374:	ea43 030c 	orr.w	r3, r3, ip
 8000378:	40f4      	lsrs	r4, r6
 800037a:	fa00 f801 	lsl.w	r8, r0, r1
 800037e:	0c38      	lsrs	r0, r7, #16
 8000380:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000384:	fbb4 fef0 	udiv	lr, r4, r0
 8000388:	fa1f fc87 	uxth.w	ip, r7
 800038c:	fb00 441e 	mls	r4, r0, lr, r4
 8000390:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000394:	fb0e f90c 	mul.w	r9, lr, ip
 8000398:	45a1      	cmp	r9, r4
 800039a:	fa02 f201 	lsl.w	r2, r2, r1
 800039e:	d90a      	bls.n	80003b6 <__udivmoddi4+0x1a6>
 80003a0:	193c      	adds	r4, r7, r4
 80003a2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80003a6:	f080 8084 	bcs.w	80004b2 <__udivmoddi4+0x2a2>
 80003aa:	45a1      	cmp	r9, r4
 80003ac:	f240 8081 	bls.w	80004b2 <__udivmoddi4+0x2a2>
 80003b0:	f1ae 0e02 	sub.w	lr, lr, #2
 80003b4:	443c      	add	r4, r7
 80003b6:	eba4 0409 	sub.w	r4, r4, r9
 80003ba:	fa1f f983 	uxth.w	r9, r3
 80003be:	fbb4 f3f0 	udiv	r3, r4, r0
 80003c2:	fb00 4413 	mls	r4, r0, r3, r4
 80003c6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003ca:	fb03 fc0c 	mul.w	ip, r3, ip
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1d2>
 80003d2:	193c      	adds	r4, r7, r4
 80003d4:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d8:	d267      	bcs.n	80004aa <__udivmoddi4+0x29a>
 80003da:	45a4      	cmp	ip, r4
 80003dc:	d965      	bls.n	80004aa <__udivmoddi4+0x29a>
 80003de:	3b02      	subs	r3, #2
 80003e0:	443c      	add	r4, r7
 80003e2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003e6:	fba0 9302 	umull	r9, r3, r0, r2
 80003ea:	eba4 040c 	sub.w	r4, r4, ip
 80003ee:	429c      	cmp	r4, r3
 80003f0:	46ce      	mov	lr, r9
 80003f2:	469c      	mov	ip, r3
 80003f4:	d351      	bcc.n	800049a <__udivmoddi4+0x28a>
 80003f6:	d04e      	beq.n	8000496 <__udivmoddi4+0x286>
 80003f8:	b155      	cbz	r5, 8000410 <__udivmoddi4+0x200>
 80003fa:	ebb8 030e 	subs.w	r3, r8, lr
 80003fe:	eb64 040c 	sbc.w	r4, r4, ip
 8000402:	fa04 f606 	lsl.w	r6, r4, r6
 8000406:	40cb      	lsrs	r3, r1
 8000408:	431e      	orrs	r6, r3
 800040a:	40cc      	lsrs	r4, r1
 800040c:	e9c5 6400 	strd	r6, r4, [r5]
 8000410:	2100      	movs	r1, #0
 8000412:	e750      	b.n	80002b6 <__udivmoddi4+0xa6>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f103 	lsr.w	r1, r0, r3
 800041c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000420:	fa24 f303 	lsr.w	r3, r4, r3
 8000424:	4094      	lsls	r4, r2
 8000426:	430c      	orrs	r4, r1
 8000428:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800042c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000430:	fa1f f78c 	uxth.w	r7, ip
 8000434:	fbb3 f0f8 	udiv	r0, r3, r8
 8000438:	fb08 3110 	mls	r1, r8, r0, r3
 800043c:	0c23      	lsrs	r3, r4, #16
 800043e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000442:	fb00 f107 	mul.w	r1, r0, r7
 8000446:	4299      	cmp	r1, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x24c>
 800044a:	eb1c 0303 	adds.w	r3, ip, r3
 800044e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000452:	d22c      	bcs.n	80004ae <__udivmoddi4+0x29e>
 8000454:	4299      	cmp	r1, r3
 8000456:	d92a      	bls.n	80004ae <__udivmoddi4+0x29e>
 8000458:	3802      	subs	r0, #2
 800045a:	4463      	add	r3, ip
 800045c:	1a5b      	subs	r3, r3, r1
 800045e:	b2a4      	uxth	r4, r4
 8000460:	fbb3 f1f8 	udiv	r1, r3, r8
 8000464:	fb08 3311 	mls	r3, r8, r1, r3
 8000468:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800046c:	fb01 f307 	mul.w	r3, r1, r7
 8000470:	42a3      	cmp	r3, r4
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x276>
 8000474:	eb1c 0404 	adds.w	r4, ip, r4
 8000478:	f101 36ff 	add.w	r6, r1, #4294967295
 800047c:	d213      	bcs.n	80004a6 <__udivmoddi4+0x296>
 800047e:	42a3      	cmp	r3, r4
 8000480:	d911      	bls.n	80004a6 <__udivmoddi4+0x296>
 8000482:	3902      	subs	r1, #2
 8000484:	4464      	add	r4, ip
 8000486:	1ae4      	subs	r4, r4, r3
 8000488:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800048c:	e739      	b.n	8000302 <__udivmoddi4+0xf2>
 800048e:	4604      	mov	r4, r0
 8000490:	e6f0      	b.n	8000274 <__udivmoddi4+0x64>
 8000492:	4608      	mov	r0, r1
 8000494:	e706      	b.n	80002a4 <__udivmoddi4+0x94>
 8000496:	45c8      	cmp	r8, r9
 8000498:	d2ae      	bcs.n	80003f8 <__udivmoddi4+0x1e8>
 800049a:	ebb9 0e02 	subs.w	lr, r9, r2
 800049e:	eb63 0c07 	sbc.w	ip, r3, r7
 80004a2:	3801      	subs	r0, #1
 80004a4:	e7a8      	b.n	80003f8 <__udivmoddi4+0x1e8>
 80004a6:	4631      	mov	r1, r6
 80004a8:	e7ed      	b.n	8000486 <__udivmoddi4+0x276>
 80004aa:	4603      	mov	r3, r0
 80004ac:	e799      	b.n	80003e2 <__udivmoddi4+0x1d2>
 80004ae:	4630      	mov	r0, r6
 80004b0:	e7d4      	b.n	800045c <__udivmoddi4+0x24c>
 80004b2:	46d6      	mov	lr, sl
 80004b4:	e77f      	b.n	80003b6 <__udivmoddi4+0x1a6>
 80004b6:	4463      	add	r3, ip
 80004b8:	3802      	subs	r0, #2
 80004ba:	e74d      	b.n	8000358 <__udivmoddi4+0x148>
 80004bc:	4606      	mov	r6, r0
 80004be:	4623      	mov	r3, r4
 80004c0:	4608      	mov	r0, r1
 80004c2:	e70f      	b.n	80002e4 <__udivmoddi4+0xd4>
 80004c4:	3e02      	subs	r6, #2
 80004c6:	4463      	add	r3, ip
 80004c8:	e730      	b.n	800032c <__udivmoddi4+0x11c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <ShiftOut_SPI>:

uint8_t displayBuffer[2][4];  // Double buffer
volatile uint8_t currentBufferIndex = 0;

void ShiftOut_SPI(uint8_t *data, size_t size)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	6078      	str	r0, [r7, #4]
 80004d8:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(Latch_SPI2_GPIO_Port, Latch_SPI2_Pin, GPIO_PIN_RESET); // Pull STCP (Latch) low
 80004da:	2200      	movs	r2, #0
 80004dc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80004e0:	4813      	ldr	r0, [pc, #76]	@ (8000530 <ShiftOut_SPI+0x60>)
 80004e2:	f001 f949 	bl	8001778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_SET);
 80004e6:	2201      	movs	r2, #1
 80004e8:	2180      	movs	r1, #128	@ 0x80
 80004ea:	4812      	ldr	r0, [pc, #72]	@ (8000534 <ShiftOut_SPI+0x64>)
 80004ec:	f001 f944 	bl	8001778 <HAL_GPIO_WritePin>

    if (HAL_SPI_Transmit(&hspi2, data, size, HAL_MAX_DELAY) != HAL_OK)
 80004f0:	683b      	ldr	r3, [r7, #0]
 80004f2:	b29a      	uxth	r2, r3
 80004f4:	f04f 33ff 	mov.w	r3, #4294967295
 80004f8:	6879      	ldr	r1, [r7, #4]
 80004fa:	480f      	ldr	r0, [pc, #60]	@ (8000538 <ShiftOut_SPI+0x68>)
 80004fc:	f001 fe69 	bl	80021d2 <HAL_SPI_Transmit>
 8000500:	4603      	mov	r3, r0
 8000502:	2b00      	cmp	r3, #0
 8000504:	d001      	beq.n	800050a <ShiftOut_SPI+0x3a>
    {
    	Error_Handler();
 8000506:	f000 fc47 	bl	8000d98 <Error_Handler>
    }
//    osDelay(10);
    HAL_GPIO_WritePin(Latch_SPI2_GPIO_Port, Latch_SPI2_Pin, GPIO_PIN_SET); // Pull STCP (Latch) high
 800050a:	2201      	movs	r2, #1
 800050c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000510:	4807      	ldr	r0, [pc, #28]	@ (8000530 <ShiftOut_SPI+0x60>)
 8000512:	f001 f931 	bl	8001778 <HAL_GPIO_WritePin>
    osDelay(1);
 8000516:	2001      	movs	r0, #1
 8000518:	f002 fed2 	bl	80032c0 <osDelay>
    HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 800051c:	2200      	movs	r2, #0
 800051e:	2180      	movs	r1, #128	@ 0x80
 8000520:	4804      	ldr	r0, [pc, #16]	@ (8000534 <ShiftOut_SPI+0x64>)
 8000522:	f001 f929 	bl	8001778 <HAL_GPIO_WritePin>
}
 8000526:	bf00      	nop
 8000528:	3708      	adds	r7, #8
 800052a:	46bd      	mov	sp, r7
 800052c:	bd80      	pop	{r7, pc}
 800052e:	bf00      	nop
 8000530:	40020400 	.word	0x40020400
 8000534:	40020800 	.word	0x40020800
 8000538:	20000044 	.word	0x20000044

0800053c <SevenSegLEDsHandler>:
uint8_t* SevenSegLEDsHandler(uint32_t* buffer, uint8_t scan_state) {
 800053c:	b480      	push	{r7}
 800053e:	b083      	sub	sp, #12
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
 8000544:	460b      	mov	r3, r1
 8000546:	70fb      	strb	r3, [r7, #3]
    static uint8_t output[3];
    switch (scan_state) {
 8000548:	78fb      	ldrb	r3, [r7, #3]
 800054a:	2b05      	cmp	r3, #5
 800054c:	f200 815d 	bhi.w	800080a <SevenSegLEDsHandler+0x2ce>
 8000550:	a201      	add	r2, pc, #4	@ (adr r2, 8000558 <SevenSegLEDsHandler+0x1c>)
 8000552:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000556:	bf00      	nop
 8000558:	08000571 	.word	0x08000571
 800055c:	080005cb 	.word	0x080005cb
 8000560:	0800063d 	.word	0x0800063d
 8000564:	080006af 	.word	0x080006af
 8000568:	08000721 	.word	0x08000721
 800056c:	08000793 	.word	0x08000793
        case 0:
            output[0] = buffer[0] % 10;
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	6819      	ldr	r1, [r3, #0]
 8000574:	4ba8      	ldr	r3, [pc, #672]	@ (8000818 <SevenSegLEDsHandler+0x2dc>)
 8000576:	fba3 2301 	umull	r2, r3, r3, r1
 800057a:	08da      	lsrs	r2, r3, #3
 800057c:	4613      	mov	r3, r2
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	4413      	add	r3, r2
 8000582:	005b      	lsls	r3, r3, #1
 8000584:	1aca      	subs	r2, r1, r3
 8000586:	b2d2      	uxtb	r2, r2
 8000588:	4ba4      	ldr	r3, [pc, #656]	@ (800081c <SevenSegLEDsHandler+0x2e0>)
 800058a:	701a      	strb	r2, [r3, #0]
            output[1] = buffer[1] % 10;
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	3304      	adds	r3, #4
 8000590:	6819      	ldr	r1, [r3, #0]
 8000592:	4ba1      	ldr	r3, [pc, #644]	@ (8000818 <SevenSegLEDsHandler+0x2dc>)
 8000594:	fba3 2301 	umull	r2, r3, r3, r1
 8000598:	08da      	lsrs	r2, r3, #3
 800059a:	4613      	mov	r3, r2
 800059c:	009b      	lsls	r3, r3, #2
 800059e:	4413      	add	r3, r2
 80005a0:	005b      	lsls	r3, r3, #1
 80005a2:	1aca      	subs	r2, r1, r3
 80005a4:	b2d2      	uxtb	r2, r2
 80005a6:	4b9d      	ldr	r3, [pc, #628]	@ (800081c <SevenSegLEDsHandler+0x2e0>)
 80005a8:	705a      	strb	r2, [r3, #1]
            output[2] = buffer[2] % 10;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	3308      	adds	r3, #8
 80005ae:	6819      	ldr	r1, [r3, #0]
 80005b0:	4b99      	ldr	r3, [pc, #612]	@ (8000818 <SevenSegLEDsHandler+0x2dc>)
 80005b2:	fba3 2301 	umull	r2, r3, r3, r1
 80005b6:	08da      	lsrs	r2, r3, #3
 80005b8:	4613      	mov	r3, r2
 80005ba:	009b      	lsls	r3, r3, #2
 80005bc:	4413      	add	r3, r2
 80005be:	005b      	lsls	r3, r3, #1
 80005c0:	1aca      	subs	r2, r1, r3
 80005c2:	b2d2      	uxtb	r2, r2
 80005c4:	4b95      	ldr	r3, [pc, #596]	@ (800081c <SevenSegLEDsHandler+0x2e0>)
 80005c6:	709a      	strb	r2, [r3, #2]
            break;
 80005c8:	e11f      	b.n	800080a <SevenSegLEDsHandler+0x2ce>
        case 1:
            output[0] = (buffer[0] / 10) % 10;
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	4a92      	ldr	r2, [pc, #584]	@ (8000818 <SevenSegLEDsHandler+0x2dc>)
 80005d0:	fba2 2303 	umull	r2, r3, r2, r3
 80005d4:	08d9      	lsrs	r1, r3, #3
 80005d6:	4b90      	ldr	r3, [pc, #576]	@ (8000818 <SevenSegLEDsHandler+0x2dc>)
 80005d8:	fba3 2301 	umull	r2, r3, r3, r1
 80005dc:	08da      	lsrs	r2, r3, #3
 80005de:	4613      	mov	r3, r2
 80005e0:	009b      	lsls	r3, r3, #2
 80005e2:	4413      	add	r3, r2
 80005e4:	005b      	lsls	r3, r3, #1
 80005e6:	1aca      	subs	r2, r1, r3
 80005e8:	b2d2      	uxtb	r2, r2
 80005ea:	4b8c      	ldr	r3, [pc, #560]	@ (800081c <SevenSegLEDsHandler+0x2e0>)
 80005ec:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 10) % 10;
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	3304      	adds	r3, #4
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a88      	ldr	r2, [pc, #544]	@ (8000818 <SevenSegLEDsHandler+0x2dc>)
 80005f6:	fba2 2303 	umull	r2, r3, r2, r3
 80005fa:	08d9      	lsrs	r1, r3, #3
 80005fc:	4b86      	ldr	r3, [pc, #536]	@ (8000818 <SevenSegLEDsHandler+0x2dc>)
 80005fe:	fba3 2301 	umull	r2, r3, r3, r1
 8000602:	08da      	lsrs	r2, r3, #3
 8000604:	4613      	mov	r3, r2
 8000606:	009b      	lsls	r3, r3, #2
 8000608:	4413      	add	r3, r2
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	1aca      	subs	r2, r1, r3
 800060e:	b2d2      	uxtb	r2, r2
 8000610:	4b82      	ldr	r3, [pc, #520]	@ (800081c <SevenSegLEDsHandler+0x2e0>)
 8000612:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 10) % 10;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	3308      	adds	r3, #8
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	4a7f      	ldr	r2, [pc, #508]	@ (8000818 <SevenSegLEDsHandler+0x2dc>)
 800061c:	fba2 2303 	umull	r2, r3, r2, r3
 8000620:	08d9      	lsrs	r1, r3, #3
 8000622:	4b7d      	ldr	r3, [pc, #500]	@ (8000818 <SevenSegLEDsHandler+0x2dc>)
 8000624:	fba3 2301 	umull	r2, r3, r3, r1
 8000628:	08da      	lsrs	r2, r3, #3
 800062a:	4613      	mov	r3, r2
 800062c:	009b      	lsls	r3, r3, #2
 800062e:	4413      	add	r3, r2
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	1aca      	subs	r2, r1, r3
 8000634:	b2d2      	uxtb	r2, r2
 8000636:	4b79      	ldr	r3, [pc, #484]	@ (800081c <SevenSegLEDsHandler+0x2e0>)
 8000638:	709a      	strb	r2, [r3, #2]
            break;
 800063a:	e0e6      	b.n	800080a <SevenSegLEDsHandler+0x2ce>
        case 2:
            output[0] = (buffer[0] / 100) % 10;
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	4a77      	ldr	r2, [pc, #476]	@ (8000820 <SevenSegLEDsHandler+0x2e4>)
 8000642:	fba2 2303 	umull	r2, r3, r2, r3
 8000646:	0959      	lsrs	r1, r3, #5
 8000648:	4b73      	ldr	r3, [pc, #460]	@ (8000818 <SevenSegLEDsHandler+0x2dc>)
 800064a:	fba3 2301 	umull	r2, r3, r3, r1
 800064e:	08da      	lsrs	r2, r3, #3
 8000650:	4613      	mov	r3, r2
 8000652:	009b      	lsls	r3, r3, #2
 8000654:	4413      	add	r3, r2
 8000656:	005b      	lsls	r3, r3, #1
 8000658:	1aca      	subs	r2, r1, r3
 800065a:	b2d2      	uxtb	r2, r2
 800065c:	4b6f      	ldr	r3, [pc, #444]	@ (800081c <SevenSegLEDsHandler+0x2e0>)
 800065e:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 100) % 10;
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	3304      	adds	r3, #4
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	4a6e      	ldr	r2, [pc, #440]	@ (8000820 <SevenSegLEDsHandler+0x2e4>)
 8000668:	fba2 2303 	umull	r2, r3, r2, r3
 800066c:	0959      	lsrs	r1, r3, #5
 800066e:	4b6a      	ldr	r3, [pc, #424]	@ (8000818 <SevenSegLEDsHandler+0x2dc>)
 8000670:	fba3 2301 	umull	r2, r3, r3, r1
 8000674:	08da      	lsrs	r2, r3, #3
 8000676:	4613      	mov	r3, r2
 8000678:	009b      	lsls	r3, r3, #2
 800067a:	4413      	add	r3, r2
 800067c:	005b      	lsls	r3, r3, #1
 800067e:	1aca      	subs	r2, r1, r3
 8000680:	b2d2      	uxtb	r2, r2
 8000682:	4b66      	ldr	r3, [pc, #408]	@ (800081c <SevenSegLEDsHandler+0x2e0>)
 8000684:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 100) % 10;
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	3308      	adds	r3, #8
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	4a64      	ldr	r2, [pc, #400]	@ (8000820 <SevenSegLEDsHandler+0x2e4>)
 800068e:	fba2 2303 	umull	r2, r3, r2, r3
 8000692:	0959      	lsrs	r1, r3, #5
 8000694:	4b60      	ldr	r3, [pc, #384]	@ (8000818 <SevenSegLEDsHandler+0x2dc>)
 8000696:	fba3 2301 	umull	r2, r3, r3, r1
 800069a:	08da      	lsrs	r2, r3, #3
 800069c:	4613      	mov	r3, r2
 800069e:	009b      	lsls	r3, r3, #2
 80006a0:	4413      	add	r3, r2
 80006a2:	005b      	lsls	r3, r3, #1
 80006a4:	1aca      	subs	r2, r1, r3
 80006a6:	b2d2      	uxtb	r2, r2
 80006a8:	4b5c      	ldr	r3, [pc, #368]	@ (800081c <SevenSegLEDsHandler+0x2e0>)
 80006aa:	709a      	strb	r2, [r3, #2]
            break;
 80006ac:	e0ad      	b.n	800080a <SevenSegLEDsHandler+0x2ce>
        case 3:
            output[0] = (buffer[0] / 1000) % 10;
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	4a5c      	ldr	r2, [pc, #368]	@ (8000824 <SevenSegLEDsHandler+0x2e8>)
 80006b4:	fba2 2303 	umull	r2, r3, r2, r3
 80006b8:	0999      	lsrs	r1, r3, #6
 80006ba:	4b57      	ldr	r3, [pc, #348]	@ (8000818 <SevenSegLEDsHandler+0x2dc>)
 80006bc:	fba3 2301 	umull	r2, r3, r3, r1
 80006c0:	08da      	lsrs	r2, r3, #3
 80006c2:	4613      	mov	r3, r2
 80006c4:	009b      	lsls	r3, r3, #2
 80006c6:	4413      	add	r3, r2
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	1aca      	subs	r2, r1, r3
 80006cc:	b2d2      	uxtb	r2, r2
 80006ce:	4b53      	ldr	r3, [pc, #332]	@ (800081c <SevenSegLEDsHandler+0x2e0>)
 80006d0:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 1000) % 10;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	3304      	adds	r3, #4
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a52      	ldr	r2, [pc, #328]	@ (8000824 <SevenSegLEDsHandler+0x2e8>)
 80006da:	fba2 2303 	umull	r2, r3, r2, r3
 80006de:	0999      	lsrs	r1, r3, #6
 80006e0:	4b4d      	ldr	r3, [pc, #308]	@ (8000818 <SevenSegLEDsHandler+0x2dc>)
 80006e2:	fba3 2301 	umull	r2, r3, r3, r1
 80006e6:	08da      	lsrs	r2, r3, #3
 80006e8:	4613      	mov	r3, r2
 80006ea:	009b      	lsls	r3, r3, #2
 80006ec:	4413      	add	r3, r2
 80006ee:	005b      	lsls	r3, r3, #1
 80006f0:	1aca      	subs	r2, r1, r3
 80006f2:	b2d2      	uxtb	r2, r2
 80006f4:	4b49      	ldr	r3, [pc, #292]	@ (800081c <SevenSegLEDsHandler+0x2e0>)
 80006f6:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 1000) % 10;
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	3308      	adds	r3, #8
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	4a49      	ldr	r2, [pc, #292]	@ (8000824 <SevenSegLEDsHandler+0x2e8>)
 8000700:	fba2 2303 	umull	r2, r3, r2, r3
 8000704:	0999      	lsrs	r1, r3, #6
 8000706:	4b44      	ldr	r3, [pc, #272]	@ (8000818 <SevenSegLEDsHandler+0x2dc>)
 8000708:	fba3 2301 	umull	r2, r3, r3, r1
 800070c:	08da      	lsrs	r2, r3, #3
 800070e:	4613      	mov	r3, r2
 8000710:	009b      	lsls	r3, r3, #2
 8000712:	4413      	add	r3, r2
 8000714:	005b      	lsls	r3, r3, #1
 8000716:	1aca      	subs	r2, r1, r3
 8000718:	b2d2      	uxtb	r2, r2
 800071a:	4b40      	ldr	r3, [pc, #256]	@ (800081c <SevenSegLEDsHandler+0x2e0>)
 800071c:	709a      	strb	r2, [r3, #2]
            break;
 800071e:	e074      	b.n	800080a <SevenSegLEDsHandler+0x2ce>
        case 4:
            output[0] = (buffer[0] / 10000) % 10;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	681b      	ldr	r3, [r3, #0]
 8000724:	4a40      	ldr	r2, [pc, #256]	@ (8000828 <SevenSegLEDsHandler+0x2ec>)
 8000726:	fba2 2303 	umull	r2, r3, r2, r3
 800072a:	0b59      	lsrs	r1, r3, #13
 800072c:	4b3a      	ldr	r3, [pc, #232]	@ (8000818 <SevenSegLEDsHandler+0x2dc>)
 800072e:	fba3 2301 	umull	r2, r3, r3, r1
 8000732:	08da      	lsrs	r2, r3, #3
 8000734:	4613      	mov	r3, r2
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	4413      	add	r3, r2
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	1aca      	subs	r2, r1, r3
 800073e:	b2d2      	uxtb	r2, r2
 8000740:	4b36      	ldr	r3, [pc, #216]	@ (800081c <SevenSegLEDsHandler+0x2e0>)
 8000742:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 10000) % 10;
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	3304      	adds	r3, #4
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	4a37      	ldr	r2, [pc, #220]	@ (8000828 <SevenSegLEDsHandler+0x2ec>)
 800074c:	fba2 2303 	umull	r2, r3, r2, r3
 8000750:	0b59      	lsrs	r1, r3, #13
 8000752:	4b31      	ldr	r3, [pc, #196]	@ (8000818 <SevenSegLEDsHandler+0x2dc>)
 8000754:	fba3 2301 	umull	r2, r3, r3, r1
 8000758:	08da      	lsrs	r2, r3, #3
 800075a:	4613      	mov	r3, r2
 800075c:	009b      	lsls	r3, r3, #2
 800075e:	4413      	add	r3, r2
 8000760:	005b      	lsls	r3, r3, #1
 8000762:	1aca      	subs	r2, r1, r3
 8000764:	b2d2      	uxtb	r2, r2
 8000766:	4b2d      	ldr	r3, [pc, #180]	@ (800081c <SevenSegLEDsHandler+0x2e0>)
 8000768:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 10000) % 10;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	3308      	adds	r3, #8
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	4a2d      	ldr	r2, [pc, #180]	@ (8000828 <SevenSegLEDsHandler+0x2ec>)
 8000772:	fba2 2303 	umull	r2, r3, r2, r3
 8000776:	0b59      	lsrs	r1, r3, #13
 8000778:	4b27      	ldr	r3, [pc, #156]	@ (8000818 <SevenSegLEDsHandler+0x2dc>)
 800077a:	fba3 2301 	umull	r2, r3, r3, r1
 800077e:	08da      	lsrs	r2, r3, #3
 8000780:	4613      	mov	r3, r2
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	4413      	add	r3, r2
 8000786:	005b      	lsls	r3, r3, #1
 8000788:	1aca      	subs	r2, r1, r3
 800078a:	b2d2      	uxtb	r2, r2
 800078c:	4b23      	ldr	r3, [pc, #140]	@ (800081c <SevenSegLEDsHandler+0x2e0>)
 800078e:	709a      	strb	r2, [r3, #2]
            break;
 8000790:	e03b      	b.n	800080a <SevenSegLEDsHandler+0x2ce>
        case 5:
            output[0] = (buffer[0] / 100000) % 10;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	095b      	lsrs	r3, r3, #5
 8000798:	4a24      	ldr	r2, [pc, #144]	@ (800082c <SevenSegLEDsHandler+0x2f0>)
 800079a:	fba2 2303 	umull	r2, r3, r2, r3
 800079e:	09d9      	lsrs	r1, r3, #7
 80007a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000818 <SevenSegLEDsHandler+0x2dc>)
 80007a2:	fba3 2301 	umull	r2, r3, r3, r1
 80007a6:	08da      	lsrs	r2, r3, #3
 80007a8:	4613      	mov	r3, r2
 80007aa:	009b      	lsls	r3, r3, #2
 80007ac:	4413      	add	r3, r2
 80007ae:	005b      	lsls	r3, r3, #1
 80007b0:	1aca      	subs	r2, r1, r3
 80007b2:	b2d2      	uxtb	r2, r2
 80007b4:	4b19      	ldr	r3, [pc, #100]	@ (800081c <SevenSegLEDsHandler+0x2e0>)
 80007b6:	701a      	strb	r2, [r3, #0]
            output[1] = (buffer[1] / 100000) % 10;
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	3304      	adds	r3, #4
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	095b      	lsrs	r3, r3, #5
 80007c0:	4a1a      	ldr	r2, [pc, #104]	@ (800082c <SevenSegLEDsHandler+0x2f0>)
 80007c2:	fba2 2303 	umull	r2, r3, r2, r3
 80007c6:	09d9      	lsrs	r1, r3, #7
 80007c8:	4b13      	ldr	r3, [pc, #76]	@ (8000818 <SevenSegLEDsHandler+0x2dc>)
 80007ca:	fba3 2301 	umull	r2, r3, r3, r1
 80007ce:	08da      	lsrs	r2, r3, #3
 80007d0:	4613      	mov	r3, r2
 80007d2:	009b      	lsls	r3, r3, #2
 80007d4:	4413      	add	r3, r2
 80007d6:	005b      	lsls	r3, r3, #1
 80007d8:	1aca      	subs	r2, r1, r3
 80007da:	b2d2      	uxtb	r2, r2
 80007dc:	4b0f      	ldr	r3, [pc, #60]	@ (800081c <SevenSegLEDsHandler+0x2e0>)
 80007de:	705a      	strb	r2, [r3, #1]
            output[2] = (buffer[2] / 100000) % 10;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	3308      	adds	r3, #8
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	095b      	lsrs	r3, r3, #5
 80007e8:	4a10      	ldr	r2, [pc, #64]	@ (800082c <SevenSegLEDsHandler+0x2f0>)
 80007ea:	fba2 2303 	umull	r2, r3, r2, r3
 80007ee:	09d9      	lsrs	r1, r3, #7
 80007f0:	4b09      	ldr	r3, [pc, #36]	@ (8000818 <SevenSegLEDsHandler+0x2dc>)
 80007f2:	fba3 2301 	umull	r2, r3, r3, r1
 80007f6:	08da      	lsrs	r2, r3, #3
 80007f8:	4613      	mov	r3, r2
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	4413      	add	r3, r2
 80007fe:	005b      	lsls	r3, r3, #1
 8000800:	1aca      	subs	r2, r1, r3
 8000802:	b2d2      	uxtb	r2, r2
 8000804:	4b05      	ldr	r3, [pc, #20]	@ (800081c <SevenSegLEDsHandler+0x2e0>)
 8000806:	709a      	strb	r2, [r3, #2]
            break;
 8000808:	bf00      	nop
    }
    return output;
 800080a:	4b04      	ldr	r3, [pc, #16]	@ (800081c <SevenSegLEDsHandler+0x2e0>)
}
 800080c:	4618      	mov	r0, r3
 800080e:	370c      	adds	r7, #12
 8000810:	46bd      	mov	sp, r7
 8000812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000816:	4770      	bx	lr
 8000818:	cccccccd 	.word	0xcccccccd
 800081c:	20000198 	.word	0x20000198
 8000820:	51eb851f 	.word	0x51eb851f
 8000824:	10624dd3 	.word	0x10624dd3
 8000828:	d1b71759 	.word	0xd1b71759
 800082c:	0a7c5ac5 	.word	0x0a7c5ac5

08000830 <UpdateDisplayBuffer>:

void UpdateDisplayBuffer(uint32_t* buffer, uint8_t scan_state, uint8_t bufferIndex) {
 8000830:	b580      	push	{r7, lr}
 8000832:	b084      	sub	sp, #16
 8000834:	af00      	add	r7, sp, #0
 8000836:	6078      	str	r0, [r7, #4]
 8000838:	460b      	mov	r3, r1
 800083a:	70fb      	strb	r3, [r7, #3]
 800083c:	4613      	mov	r3, r2
 800083e:	70bb      	strb	r3, [r7, #2]
    uint8_t* curr_digit = SevenSegLEDsHandler(buffer, scan_state);
 8000840:	78fb      	ldrb	r3, [r7, #3]
 8000842:	4619      	mov	r1, r3
 8000844:	6878      	ldr	r0, [r7, #4]
 8000846:	f7ff fe79 	bl	800053c <SevenSegLEDsHandler>
 800084a:	60b8      	str	r0, [r7, #8]
    uint8_t curr_scan;
    switch (scan_state) {
 800084c:	78fb      	ldrb	r3, [r7, #3]
 800084e:	2b05      	cmp	r3, #5
 8000850:	d820      	bhi.n	8000894 <UpdateDisplayBuffer+0x64>
 8000852:	a201      	add	r2, pc, #4	@ (adr r2, 8000858 <UpdateDisplayBuffer+0x28>)
 8000854:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000858:	08000871 	.word	0x08000871
 800085c:	08000877 	.word	0x08000877
 8000860:	0800087d 	.word	0x0800087d
 8000864:	08000883 	.word	0x08000883
 8000868:	08000889 	.word	0x08000889
 800086c:	0800088f 	.word	0x0800088f
        case 0:
            curr_scan = 0b11111110;
 8000870:	23fe      	movs	r3, #254	@ 0xfe
 8000872:	73fb      	strb	r3, [r7, #15]
            break;
 8000874:	e011      	b.n	800089a <UpdateDisplayBuffer+0x6a>
        case 1:
            curr_scan = 0b11111101;
 8000876:	23fd      	movs	r3, #253	@ 0xfd
 8000878:	73fb      	strb	r3, [r7, #15]
            break;
 800087a:	e00e      	b.n	800089a <UpdateDisplayBuffer+0x6a>
        case 2:
            curr_scan = 0b11111011;
 800087c:	23fb      	movs	r3, #251	@ 0xfb
 800087e:	73fb      	strb	r3, [r7, #15]
            break;
 8000880:	e00b      	b.n	800089a <UpdateDisplayBuffer+0x6a>
        case 3:
            curr_scan = 0b11110111;
 8000882:	23f7      	movs	r3, #247	@ 0xf7
 8000884:	73fb      	strb	r3, [r7, #15]
            break;
 8000886:	e008      	b.n	800089a <UpdateDisplayBuffer+0x6a>
        case 4:
            curr_scan = 0b11101111;
 8000888:	23ef      	movs	r3, #239	@ 0xef
 800088a:	73fb      	strb	r3, [r7, #15]
            break;
 800088c:	e005      	b.n	800089a <UpdateDisplayBuffer+0x6a>
        case 5:
            curr_scan = 0b11011111;
 800088e:	23df      	movs	r3, #223	@ 0xdf
 8000890:	73fb      	strb	r3, [r7, #15]
            break;
 8000892:	e002      	b.n	800089a <UpdateDisplayBuffer+0x6a>
        default:
            curr_scan = 0b11111111;
 8000894:	23ff      	movs	r3, #255	@ 0xff
 8000896:	73fb      	strb	r3, [r7, #15]
            break;
 8000898:	bf00      	nop
    }

    displayBuffer[bufferIndex][0] = digitMapWithDP[curr_digit[2]];
 800089a:	68bb      	ldr	r3, [r7, #8]
 800089c:	3302      	adds	r3, #2
 800089e:	781b      	ldrb	r3, [r3, #0]
 80008a0:	4619      	mov	r1, r3
 80008a2:	78bb      	ldrb	r3, [r7, #2]
 80008a4:	4a12      	ldr	r2, [pc, #72]	@ (80008f0 <UpdateDisplayBuffer+0xc0>)
 80008a6:	5c51      	ldrb	r1, [r2, r1]
 80008a8:	4a12      	ldr	r2, [pc, #72]	@ (80008f4 <UpdateDisplayBuffer+0xc4>)
 80008aa:	f802 1023 	strb.w	r1, [r2, r3, lsl #2]
    displayBuffer[bufferIndex][1] = curr_scan;
 80008ae:	78bb      	ldrb	r3, [r7, #2]
 80008b0:	4a10      	ldr	r2, [pc, #64]	@ (80008f4 <UpdateDisplayBuffer+0xc4>)
 80008b2:	009b      	lsls	r3, r3, #2
 80008b4:	4413      	add	r3, r2
 80008b6:	7bfa      	ldrb	r2, [r7, #15]
 80008b8:	705a      	strb	r2, [r3, #1]
    displayBuffer[bufferIndex][2] = digitMapWithDP[curr_digit[1]];
 80008ba:	68bb      	ldr	r3, [r7, #8]
 80008bc:	3301      	adds	r3, #1
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4619      	mov	r1, r3
 80008c2:	78bb      	ldrb	r3, [r7, #2]
 80008c4:	4a0a      	ldr	r2, [pc, #40]	@ (80008f0 <UpdateDisplayBuffer+0xc0>)
 80008c6:	5c51      	ldrb	r1, [r2, r1]
 80008c8:	4a0a      	ldr	r2, [pc, #40]	@ (80008f4 <UpdateDisplayBuffer+0xc4>)
 80008ca:	009b      	lsls	r3, r3, #2
 80008cc:	4413      	add	r3, r2
 80008ce:	460a      	mov	r2, r1
 80008d0:	709a      	strb	r2, [r3, #2]
    displayBuffer[bufferIndex][3] = digitMapWithDP[curr_digit[0]];
 80008d2:	68bb      	ldr	r3, [r7, #8]
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	4619      	mov	r1, r3
 80008d8:	78bb      	ldrb	r3, [r7, #2]
 80008da:	4a05      	ldr	r2, [pc, #20]	@ (80008f0 <UpdateDisplayBuffer+0xc0>)
 80008dc:	5c51      	ldrb	r1, [r2, r1]
 80008de:	4a05      	ldr	r2, [pc, #20]	@ (80008f4 <UpdateDisplayBuffer+0xc4>)
 80008e0:	009b      	lsls	r3, r3, #2
 80008e2:	4413      	add	r3, r2
 80008e4:	460a      	mov	r2, r1
 80008e6:	70da      	strb	r2, [r3, #3]
}
 80008e8:	bf00      	nop
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	20000000 	.word	0x20000000
 80008f4:	2000018c 	.word	0x2000018c

080008f8 <SevenSegLEDsScan>:

void SevenSegLEDsScan() {
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
    uint8_t bufferIndex = (currentBufferIndex + 1) % 2;
 80008fe:	4b1c      	ldr	r3, [pc, #112]	@ (8000970 <SevenSegLEDsScan+0x78>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	b2db      	uxtb	r3, r3
 8000904:	3301      	adds	r3, #1
 8000906:	2b00      	cmp	r3, #0
 8000908:	f003 0301 	and.w	r3, r3, #1
 800090c:	bfb8      	it	lt
 800090e:	425b      	neglt	r3, r3
 8000910:	71fb      	strb	r3, [r7, #7]
    UpdateDisplayBuffer(SevenSegBuffer, SevenSegScanState, bufferIndex);
 8000912:	4b18      	ldr	r3, [pc, #96]	@ (8000974 <SevenSegLEDsScan+0x7c>)
 8000914:	781b      	ldrb	r3, [r3, #0]
 8000916:	b2db      	uxtb	r3, r3
 8000918:	79fa      	ldrb	r2, [r7, #7]
 800091a:	4619      	mov	r1, r3
 800091c:	4816      	ldr	r0, [pc, #88]	@ (8000978 <SevenSegLEDsScan+0x80>)
 800091e:	f7ff ff87 	bl	8000830 <UpdateDisplayBuffer>
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000922:	b672      	cpsid	i
}
 8000924:	bf00      	nop

    __disable_irq();  // Disable interrupts
    ShiftOut_SPI(displayBuffer[currentBufferIndex], 4);
 8000926:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <SevenSegLEDsScan+0x78>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	b2db      	uxtb	r3, r3
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	4a13      	ldr	r2, [pc, #76]	@ (800097c <SevenSegLEDsScan+0x84>)
 8000930:	4413      	add	r3, r2
 8000932:	2104      	movs	r1, #4
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff fdcb 	bl	80004d0 <ShiftOut_SPI>
    currentBufferIndex = bufferIndex;  // Swap buffers
 800093a:	4a0d      	ldr	r2, [pc, #52]	@ (8000970 <SevenSegLEDsScan+0x78>)
 800093c:	79fb      	ldrb	r3, [r7, #7]
 800093e:	7013      	strb	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000940:	b662      	cpsie	i
}
 8000942:	bf00      	nop
    __enable_irq();   // Enable interrupts

    SevenSegScanState = (SevenSegScanState + 1) % 6;
 8000944:	4b0b      	ldr	r3, [pc, #44]	@ (8000974 <SevenSegLEDsScan+0x7c>)
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	1c5a      	adds	r2, r3, #1
 800094c:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <SevenSegLEDsScan+0x88>)
 800094e:	fb83 3102 	smull	r3, r1, r3, r2
 8000952:	17d3      	asrs	r3, r2, #31
 8000954:	1ac9      	subs	r1, r1, r3
 8000956:	460b      	mov	r3, r1
 8000958:	005b      	lsls	r3, r3, #1
 800095a:	440b      	add	r3, r1
 800095c:	005b      	lsls	r3, r3, #1
 800095e:	1ad1      	subs	r1, r2, r3
 8000960:	b2ca      	uxtb	r2, r1
 8000962:	4b04      	ldr	r3, [pc, #16]	@ (8000974 <SevenSegLEDsScan+0x7c>)
 8000964:	701a      	strb	r2, [r3, #0]
}
 8000966:	bf00      	nop
 8000968:	3708      	adds	r7, #8
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	20000194 	.word	0x20000194
 8000974:	20000188 	.word	0x20000188
 8000978:	2000000c 	.word	0x2000000c
 800097c:	2000018c 	.word	0x2000018c
 8000980:	2aaaaaab 	.word	0x2aaaaaab

08000984 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000988:	f000 fc4e 	bl	8001228 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800098c:	f000 f81e 	bl	80009cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000990:	f000 f944 	bl	8000c1c <MX_GPIO_Init>
  MX_SPI2_Init();
 8000994:	f000 f882 	bl	8000a9c <MX_SPI2_Init>
  MX_USART1_UART_Init();
 8000998:	f000 f8ec 	bl	8000b74 <MX_USART1_UART_Init>
  MX_SPI3_Init();
 800099c:	f000 f8b4 	bl	8000b08 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 80009a0:	f000 f912 	bl	8000bc8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80009a4:	f002 fbb0 	bl	8003108 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Led3x6Task */
  Led3x6TaskHandle = osThreadNew(Led3x6Run, NULL, &Led3x6Task_attributes);
 80009a8:	4a05      	ldr	r2, [pc, #20]	@ (80009c0 <main+0x3c>)
 80009aa:	2100      	movs	r1, #0
 80009ac:	4805      	ldr	r0, [pc, #20]	@ (80009c4 <main+0x40>)
 80009ae:	f002 fbf5 	bl	800319c <osThreadNew>
 80009b2:	4603      	mov	r3, r0
 80009b4:	4a04      	ldr	r2, [pc, #16]	@ (80009c8 <main+0x44>)
 80009b6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80009b8:	f002 fbca 	bl	8003150 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <main+0x38>
 80009c0:	08005cb8 	.word	0x08005cb8
 80009c4:	08000d65 	.word	0x08000d65
 80009c8:	20000184 	.word	0x20000184

080009cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b094      	sub	sp, #80	@ 0x50
 80009d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009d2:	f107 0320 	add.w	r3, r7, #32
 80009d6:	2230      	movs	r2, #48	@ 0x30
 80009d8:	2100      	movs	r1, #0
 80009da:	4618      	mov	r0, r3
 80009dc:	f005 f914 	bl	8005c08 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009e0:	f107 030c 	add.w	r3, r7, #12
 80009e4:	2200      	movs	r2, #0
 80009e6:	601a      	str	r2, [r3, #0]
 80009e8:	605a      	str	r2, [r3, #4]
 80009ea:	609a      	str	r2, [r3, #8]
 80009ec:	60da      	str	r2, [r3, #12]
 80009ee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009f0:	2300      	movs	r3, #0
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	4b27      	ldr	r3, [pc, #156]	@ (8000a94 <SystemClock_Config+0xc8>)
 80009f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f8:	4a26      	ldr	r2, [pc, #152]	@ (8000a94 <SystemClock_Config+0xc8>)
 80009fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a00:	4b24      	ldr	r3, [pc, #144]	@ (8000a94 <SystemClock_Config+0xc8>)
 8000a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a04:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	4b21      	ldr	r3, [pc, #132]	@ (8000a98 <SystemClock_Config+0xcc>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	4a20      	ldr	r2, [pc, #128]	@ (8000a98 <SystemClock_Config+0xcc>)
 8000a16:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a1a:	6013      	str	r3, [r2, #0]
 8000a1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000a98 <SystemClock_Config+0xcc>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a24:	607b      	str	r3, [r7, #4]
 8000a26:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000a2c:	2301      	movs	r3, #1
 8000a2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a30:	2310      	movs	r3, #16
 8000a32:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a34:	2302      	movs	r3, #2
 8000a36:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000a3c:	2308      	movs	r3, #8
 8000a3e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8000a40:	2364      	movs	r3, #100	@ 0x64
 8000a42:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a44:	2302      	movs	r3, #2
 8000a46:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a48:	2304      	movs	r3, #4
 8000a4a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a4c:	f107 0320 	add.w	r3, r7, #32
 8000a50:	4618      	mov	r0, r3
 8000a52:	f000 feab 	bl	80017ac <HAL_RCC_OscConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000a5c:	f000 f99c 	bl	8000d98 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a60:	230f      	movs	r3, #15
 8000a62:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a64:	2302      	movs	r3, #2
 8000a66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a70:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000a76:	f107 030c 	add.w	r3, r7, #12
 8000a7a:	2103      	movs	r1, #3
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f001 f90d 	bl	8001c9c <HAL_RCC_ClockConfig>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d001      	beq.n	8000a8c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000a88:	f000 f986 	bl	8000d98 <Error_Handler>
  }
}
 8000a8c:	bf00      	nop
 8000a8e:	3750      	adds	r7, #80	@ 0x50
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40007000 	.word	0x40007000

08000a9c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000aa0:	4b17      	ldr	r3, [pc, #92]	@ (8000b00 <MX_SPI2_Init+0x64>)
 8000aa2:	4a18      	ldr	r2, [pc, #96]	@ (8000b04 <MX_SPI2_Init+0x68>)
 8000aa4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000aa6:	4b16      	ldr	r3, [pc, #88]	@ (8000b00 <MX_SPI2_Init+0x64>)
 8000aa8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000aac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000aae:	4b14      	ldr	r3, [pc, #80]	@ (8000b00 <MX_SPI2_Init+0x64>)
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ab4:	4b12      	ldr	r3, [pc, #72]	@ (8000b00 <MX_SPI2_Init+0x64>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000aba:	4b11      	ldr	r3, [pc, #68]	@ (8000b00 <MX_SPI2_Init+0x64>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	@ (8000b00 <MX_SPI2_Init+0x64>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	@ (8000b00 <MX_SPI2_Init+0x64>)
 8000ac8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000acc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000ace:	4b0c      	ldr	r3, [pc, #48]	@ (8000b00 <MX_SPI2_Init+0x64>)
 8000ad0:	2228      	movs	r2, #40	@ 0x28
 8000ad2:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8000b00 <MX_SPI2_Init+0x64>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ada:	4b09      	ldr	r3, [pc, #36]	@ (8000b00 <MX_SPI2_Init+0x64>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ae0:	4b07      	ldr	r3, [pc, #28]	@ (8000b00 <MX_SPI2_Init+0x64>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000ae6:	4b06      	ldr	r3, [pc, #24]	@ (8000b00 <MX_SPI2_Init+0x64>)
 8000ae8:	220a      	movs	r2, #10
 8000aea:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000aec:	4804      	ldr	r0, [pc, #16]	@ (8000b00 <MX_SPI2_Init+0x64>)
 8000aee:	f001 fae7 	bl	80020c0 <HAL_SPI_Init>
 8000af2:	4603      	mov	r3, r0
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d001      	beq.n	8000afc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000af8:	f000 f94e 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000afc:	bf00      	nop
 8000afe:	bd80      	pop	{r7, pc}
 8000b00:	20000044 	.word	0x20000044
 8000b04:	40003800 	.word	0x40003800

08000b08 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000b0c:	4b17      	ldr	r3, [pc, #92]	@ (8000b6c <MX_SPI3_Init+0x64>)
 8000b0e:	4a18      	ldr	r2, [pc, #96]	@ (8000b70 <MX_SPI3_Init+0x68>)
 8000b10:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000b12:	4b16      	ldr	r3, [pc, #88]	@ (8000b6c <MX_SPI3_Init+0x64>)
 8000b14:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b18:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000b1a:	4b14      	ldr	r3, [pc, #80]	@ (8000b6c <MX_SPI3_Init+0x64>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b20:	4b12      	ldr	r3, [pc, #72]	@ (8000b6c <MX_SPI3_Init+0x64>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b26:	4b11      	ldr	r3, [pc, #68]	@ (8000b6c <MX_SPI3_Init+0x64>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b2c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <MX_SPI3_Init+0x64>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000b32:	4b0e      	ldr	r3, [pc, #56]	@ (8000b6c <MX_SPI3_Init+0x64>)
 8000b34:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b38:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <MX_SPI3_Init+0x64>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b40:	4b0a      	ldr	r3, [pc, #40]	@ (8000b6c <MX_SPI3_Init+0x64>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b46:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <MX_SPI3_Init+0x64>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b4c:	4b07      	ldr	r3, [pc, #28]	@ (8000b6c <MX_SPI3_Init+0x64>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8000b52:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <MX_SPI3_Init+0x64>)
 8000b54:	220a      	movs	r2, #10
 8000b56:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000b58:	4804      	ldr	r0, [pc, #16]	@ (8000b6c <MX_SPI3_Init+0x64>)
 8000b5a:	f001 fab1 	bl	80020c0 <HAL_SPI_Init>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8000b64:	f000 f918 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000b68:	bf00      	nop
 8000b6a:	bd80      	pop	{r7, pc}
 8000b6c:	2000009c 	.word	0x2000009c
 8000b70:	40003c00 	.word	0x40003c00

08000b74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b78:	4b11      	ldr	r3, [pc, #68]	@ (8000bc0 <MX_USART1_UART_Init+0x4c>)
 8000b7a:	4a12      	ldr	r2, [pc, #72]	@ (8000bc4 <MX_USART1_UART_Init+0x50>)
 8000b7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000b7e:	4b10      	ldr	r3, [pc, #64]	@ (8000bc0 <MX_USART1_UART_Init+0x4c>)
 8000b80:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000b84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b86:	4b0e      	ldr	r3, [pc, #56]	@ (8000bc0 <MX_USART1_UART_Init+0x4c>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000bc0 <MX_USART1_UART_Init+0x4c>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b92:	4b0b      	ldr	r3, [pc, #44]	@ (8000bc0 <MX_USART1_UART_Init+0x4c>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b98:	4b09      	ldr	r3, [pc, #36]	@ (8000bc0 <MX_USART1_UART_Init+0x4c>)
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b9e:	4b08      	ldr	r3, [pc, #32]	@ (8000bc0 <MX_USART1_UART_Init+0x4c>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	@ (8000bc0 <MX_USART1_UART_Init+0x4c>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000baa:	4805      	ldr	r0, [pc, #20]	@ (8000bc0 <MX_USART1_UART_Init+0x4c>)
 8000bac:	f001 ffa4 	bl	8002af8 <HAL_UART_Init>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bb6:	f000 f8ef 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bba:	bf00      	nop
 8000bbc:	bd80      	pop	{r7, pc}
 8000bbe:	bf00      	nop
 8000bc0:	200000f4 	.word	0x200000f4
 8000bc4:	40011000 	.word	0x40011000

08000bc8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000bcc:	4b11      	ldr	r3, [pc, #68]	@ (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000bce:	4a12      	ldr	r2, [pc, #72]	@ (8000c18 <MX_USART2_UART_Init+0x50>)
 8000bd0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000bd2:	4b10      	ldr	r3, [pc, #64]	@ (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000bd4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000bd8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bda:	4b0e      	ldr	r3, [pc, #56]	@ (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000be0:	4b0c      	ldr	r3, [pc, #48]	@ (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000be6:	4b0b      	ldr	r3, [pc, #44]	@ (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000bec:	4b09      	ldr	r3, [pc, #36]	@ (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000bee:	220c      	movs	r2, #12
 8000bf0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bf2:	4b08      	ldr	r3, [pc, #32]	@ (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	@ (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bfe:	4805      	ldr	r0, [pc, #20]	@ (8000c14 <MX_USART2_UART_Init+0x4c>)
 8000c00:	f001 ff7a 	bl	8002af8 <HAL_UART_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c0a:	f000 f8c5 	bl	8000d98 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	2000013c 	.word	0x2000013c
 8000c18:	40004400 	.word	0x40004400

08000c1c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	@ 0x28
 8000c20:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]
 8000c2c:	609a      	str	r2, [r3, #8]
 8000c2e:	60da      	str	r2, [r3, #12]
 8000c30:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	4b47      	ldr	r3, [pc, #284]	@ (8000d54 <MX_GPIO_Init+0x138>)
 8000c38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3a:	4a46      	ldr	r2, [pc, #280]	@ (8000d54 <MX_GPIO_Init+0x138>)
 8000c3c:	f043 0304 	orr.w	r3, r3, #4
 8000c40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c42:	4b44      	ldr	r3, [pc, #272]	@ (8000d54 <MX_GPIO_Init+0x138>)
 8000c44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c46:	f003 0304 	and.w	r3, r3, #4
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b40      	ldr	r3, [pc, #256]	@ (8000d54 <MX_GPIO_Init+0x138>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c56:	4a3f      	ldr	r2, [pc, #252]	@ (8000d54 <MX_GPIO_Init+0x138>)
 8000c58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c5e:	4b3d      	ldr	r3, [pc, #244]	@ (8000d54 <MX_GPIO_Init+0x138>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	60bb      	str	r3, [r7, #8]
 8000c6e:	4b39      	ldr	r3, [pc, #228]	@ (8000d54 <MX_GPIO_Init+0x138>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c72:	4a38      	ldr	r2, [pc, #224]	@ (8000d54 <MX_GPIO_Init+0x138>)
 8000c74:	f043 0301 	orr.w	r3, r3, #1
 8000c78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7a:	4b36      	ldr	r3, [pc, #216]	@ (8000d54 <MX_GPIO_Init+0x138>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c7e:	f003 0301 	and.w	r3, r3, #1
 8000c82:	60bb      	str	r3, [r7, #8]
 8000c84:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c86:	2300      	movs	r3, #0
 8000c88:	607b      	str	r3, [r7, #4]
 8000c8a:	4b32      	ldr	r3, [pc, #200]	@ (8000d54 <MX_GPIO_Init+0x138>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8e:	4a31      	ldr	r2, [pc, #196]	@ (8000d54 <MX_GPIO_Init+0x138>)
 8000c90:	f043 0302 	orr.w	r3, r3, #2
 8000c94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c96:	4b2f      	ldr	r3, [pc, #188]	@ (8000d54 <MX_GPIO_Init+0x138>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9a:	f003 0302 	and.w	r3, r3, #2
 8000c9e:	607b      	str	r3, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2120      	movs	r1, #32
 8000ca6:	482c      	ldr	r0, [pc, #176]	@ (8000d58 <MX_GPIO_Init+0x13c>)
 8000ca8:	f000 fd66 	bl	8001778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Latch_SPI2_Pin|Latch_SPI3_Pin|OUT0_Pin|OUT1_Pin
 8000cac:	2200      	movs	r2, #0
 8000cae:	f24c 31c0 	movw	r1, #50112	@ 0xc3c0
 8000cb2:	482a      	ldr	r0, [pc, #168]	@ (8000d5c <MX_GPIO_Init+0x140>)
 8000cb4:	f000 fd60 	bl	8001778 <HAL_GPIO_WritePin>
                          |OUT2_Pin|OUT3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OE_GPIO_Port, OE_Pin, GPIO_PIN_RESET);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	2180      	movs	r1, #128	@ 0x80
 8000cbc:	4828      	ldr	r0, [pc, #160]	@ (8000d60 <MX_GPIO_Init+0x144>)
 8000cbe:	f000 fd5b 	bl	8001778 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 8000cc2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000cc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 8000cd0:	f107 0314 	add.w	r3, r7, #20
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	4822      	ldr	r0, [pc, #136]	@ (8000d60 <MX_GPIO_Init+0x144>)
 8000cd8:	f000 fbca 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000cdc:	2320      	movs	r3, #32
 8000cde:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000cec:	f107 0314 	add.w	r3, r7, #20
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4819      	ldr	r0, [pc, #100]	@ (8000d58 <MX_GPIO_Init+0x13c>)
 8000cf4:	f000 fbbc 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pins : D0_Pin D1_Pin D2_Pin D3_Pin
                           D4_Pin */
  GPIO_InitStruct.Pin = D0_Pin|D1_Pin|D2_Pin|D3_Pin
 8000cf8:	231f      	movs	r3, #31
 8000cfa:	617b      	str	r3, [r7, #20]
                          |D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d00:	2302      	movs	r3, #2
 8000d02:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d04:	f107 0314 	add.w	r3, r7, #20
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4814      	ldr	r0, [pc, #80]	@ (8000d5c <MX_GPIO_Init+0x140>)
 8000d0c:	f000 fbb0 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pins : Latch_SPI2_Pin Latch_SPI3_Pin OUT0_Pin OUT1_Pin
                           OUT2_Pin OUT3_Pin */
  GPIO_InitStruct.Pin = Latch_SPI2_Pin|Latch_SPI3_Pin|OUT0_Pin|OUT1_Pin
 8000d10:	f24c 33c0 	movw	r3, #50112	@ 0xc3c0
 8000d14:	617b      	str	r3, [r7, #20]
                          |OUT2_Pin|OUT3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d16:	2301      	movs	r3, #1
 8000d18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d22:	f107 0314 	add.w	r3, r7, #20
 8000d26:	4619      	mov	r1, r3
 8000d28:	480c      	ldr	r0, [pc, #48]	@ (8000d5c <MX_GPIO_Init+0x140>)
 8000d2a:	f000 fba1 	bl	8001470 <HAL_GPIO_Init>

  /*Configure GPIO pin : OE_Pin */
  GPIO_InitStruct.Pin = OE_Pin;
 8000d2e:	2380      	movs	r3, #128	@ 0x80
 8000d30:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d32:	2301      	movs	r3, #1
 8000d34:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d36:	2300      	movs	r3, #0
 8000d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OE_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	4619      	mov	r1, r3
 8000d44:	4806      	ldr	r0, [pc, #24]	@ (8000d60 <MX_GPIO_Init+0x144>)
 8000d46:	f000 fb93 	bl	8001470 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d4a:	bf00      	nop
 8000d4c:	3728      	adds	r7, #40	@ 0x28
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800
 8000d58:	40020000 	.word	0x40020000
 8000d5c:	40020400 	.word	0x40020400
 8000d60:	40020800 	.word	0x40020800

08000d64 <Led3x6Run>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Led3x6Run */
void Led3x6Run(void *argument)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
//	  led_buffer[1] = 0b11000000;
//	  led_buffer[2] = digitMapWithDP[(i+1)%10];
//	  led_buffer[3] = digitMapWithDP[(i+2)%10];
//	  ShiftOut_SPI(led_buffer, 4);
//	  i++;
	  SevenSegLEDsScan();
 8000d6c:	f7ff fdc4 	bl	80008f8 <SevenSegLEDsScan>
	  osDelay(1);
 8000d70:	2001      	movs	r0, #1
 8000d72:	f002 faa5 	bl	80032c0 <osDelay>
	  SevenSegLEDsScan();
 8000d76:	bf00      	nop
 8000d78:	e7f8      	b.n	8000d6c <Led3x6Run+0x8>

08000d7a <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d8a:	d101      	bne.n	8000d90 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d8c:	f000 fa6e 	bl	800126c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000d9c:	b672      	cpsid	i
}
 8000d9e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da0:	bf00      	nop
 8000da2:	e7fd      	b.n	8000da0 <Error_Handler+0x8>

08000da4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
 8000dae:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <HAL_MspInit+0x54>)
 8000db0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db2:	4a11      	ldr	r2, [pc, #68]	@ (8000df8 <HAL_MspInit+0x54>)
 8000db4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000db8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000dba:	4b0f      	ldr	r3, [pc, #60]	@ (8000df8 <HAL_MspInit+0x54>)
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000dbe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dc2:	607b      	str	r3, [r7, #4]
 8000dc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	603b      	str	r3, [r7, #0]
 8000dca:	4b0b      	ldr	r3, [pc, #44]	@ (8000df8 <HAL_MspInit+0x54>)
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dce:	4a0a      	ldr	r2, [pc, #40]	@ (8000df8 <HAL_MspInit+0x54>)
 8000dd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dd4:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dd6:	4b08      	ldr	r3, [pc, #32]	@ (8000df8 <HAL_MspInit+0x54>)
 8000dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dde:	603b      	str	r3, [r7, #0]
 8000de0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000de2:	2200      	movs	r2, #0
 8000de4:	210f      	movs	r1, #15
 8000de6:	f06f 0001 	mvn.w	r0, #1
 8000dea:	f000 fb17 	bl	800141c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	40023800 	.word	0x40023800

08000dfc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08e      	sub	sp, #56	@ 0x38
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a51      	ldr	r2, [pc, #324]	@ (8000f60 <HAL_SPI_MspInit+0x164>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d14b      	bne.n	8000eb6 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	623b      	str	r3, [r7, #32]
 8000e22:	4b50      	ldr	r3, [pc, #320]	@ (8000f64 <HAL_SPI_MspInit+0x168>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e26:	4a4f      	ldr	r2, [pc, #316]	@ (8000f64 <HAL_SPI_MspInit+0x168>)
 8000e28:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e2e:	4b4d      	ldr	r3, [pc, #308]	@ (8000f64 <HAL_SPI_MspInit+0x168>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e32:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e36:	623b      	str	r3, [r7, #32]
 8000e38:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
 8000e3e:	4b49      	ldr	r3, [pc, #292]	@ (8000f64 <HAL_SPI_MspInit+0x168>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	4a48      	ldr	r2, [pc, #288]	@ (8000f64 <HAL_SPI_MspInit+0x168>)
 8000e44:	f043 0304 	orr.w	r3, r3, #4
 8000e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4a:	4b46      	ldr	r3, [pc, #280]	@ (8000f64 <HAL_SPI_MspInit+0x168>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	f003 0304 	and.w	r3, r3, #4
 8000e52:	61fb      	str	r3, [r7, #28]
 8000e54:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e56:	2300      	movs	r3, #0
 8000e58:	61bb      	str	r3, [r7, #24]
 8000e5a:	4b42      	ldr	r3, [pc, #264]	@ (8000f64 <HAL_SPI_MspInit+0x168>)
 8000e5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5e:	4a41      	ldr	r2, [pc, #260]	@ (8000f64 <HAL_SPI_MspInit+0x168>)
 8000e60:	f043 0302 	orr.w	r3, r3, #2
 8000e64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e66:	4b3f      	ldr	r3, [pc, #252]	@ (8000f64 <HAL_SPI_MspInit+0x168>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e6a:	f003 0302 	and.w	r3, r3, #2
 8000e6e:	61bb      	str	r3, [r7, #24]
 8000e70:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB10     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e72:	2308      	movs	r3, #8
 8000e74:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e76:	2302      	movs	r3, #2
 8000e78:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e7e:	2303      	movs	r3, #3
 8000e80:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e82:	2305      	movs	r3, #5
 8000e84:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e86:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4836      	ldr	r0, [pc, #216]	@ (8000f68 <HAL_SPI_MspInit+0x16c>)
 8000e8e:	f000 faef 	bl	8001470 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000e92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e96:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e98:	2302      	movs	r3, #2
 8000e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ea0:	2303      	movs	r3, #3
 8000ea2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ea4:	2305      	movs	r3, #5
 8000ea6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ea8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eac:	4619      	mov	r1, r3
 8000eae:	482f      	ldr	r0, [pc, #188]	@ (8000f6c <HAL_SPI_MspInit+0x170>)
 8000eb0:	f000 fade 	bl	8001470 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000eb4:	e050      	b.n	8000f58 <HAL_SPI_MspInit+0x15c>
  else if(hspi->Instance==SPI3)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	4a2d      	ldr	r2, [pc, #180]	@ (8000f70 <HAL_SPI_MspInit+0x174>)
 8000ebc:	4293      	cmp	r3, r2
 8000ebe:	d14b      	bne.n	8000f58 <HAL_SPI_MspInit+0x15c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	617b      	str	r3, [r7, #20]
 8000ec4:	4b27      	ldr	r3, [pc, #156]	@ (8000f64 <HAL_SPI_MspInit+0x168>)
 8000ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ec8:	4a26      	ldr	r2, [pc, #152]	@ (8000f64 <HAL_SPI_MspInit+0x168>)
 8000eca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000ece:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ed0:	4b24      	ldr	r3, [pc, #144]	@ (8000f64 <HAL_SPI_MspInit+0x168>)
 8000ed2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ed4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000edc:	2300      	movs	r3, #0
 8000ede:	613b      	str	r3, [r7, #16]
 8000ee0:	4b20      	ldr	r3, [pc, #128]	@ (8000f64 <HAL_SPI_MspInit+0x168>)
 8000ee2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ee4:	4a1f      	ldr	r2, [pc, #124]	@ (8000f64 <HAL_SPI_MspInit+0x168>)
 8000ee6:	f043 0302 	orr.w	r3, r3, #2
 8000eea:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eec:	4b1d      	ldr	r3, [pc, #116]	@ (8000f64 <HAL_SPI_MspInit+0x168>)
 8000eee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef0:	f003 0302 	and.w	r3, r3, #2
 8000ef4:	613b      	str	r3, [r7, #16]
 8000ef6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef8:	2300      	movs	r3, #0
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	4b19      	ldr	r3, [pc, #100]	@ (8000f64 <HAL_SPI_MspInit+0x168>)
 8000efe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f00:	4a18      	ldr	r2, [pc, #96]	@ (8000f64 <HAL_SPI_MspInit+0x168>)
 8000f02:	f043 0304 	orr.w	r3, r3, #4
 8000f06:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f08:	4b16      	ldr	r3, [pc, #88]	@ (8000f64 <HAL_SPI_MspInit+0x168>)
 8000f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f0c:	f003 0304 	and.w	r3, r3, #4
 8000f10:	60fb      	str	r3, [r7, #12]
 8000f12:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f14:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f18:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f22:	2303      	movs	r3, #3
 8000f24:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8000f26:	2307      	movs	r3, #7
 8000f28:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f2e:	4619      	mov	r1, r3
 8000f30:	480e      	ldr	r0, [pc, #56]	@ (8000f6c <HAL_SPI_MspInit+0x170>)
 8000f32:	f000 fa9d 	bl	8001470 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000f36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f3a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f40:	2300      	movs	r3, #0
 8000f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f44:	2303      	movs	r3, #3
 8000f46:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f48:	2306      	movs	r3, #6
 8000f4a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f50:	4619      	mov	r1, r3
 8000f52:	4805      	ldr	r0, [pc, #20]	@ (8000f68 <HAL_SPI_MspInit+0x16c>)
 8000f54:	f000 fa8c 	bl	8001470 <HAL_GPIO_Init>
}
 8000f58:	bf00      	nop
 8000f5a:	3738      	adds	r7, #56	@ 0x38
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40003800 	.word	0x40003800
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40020800 	.word	0x40020800
 8000f6c:	40020400 	.word	0x40020400
 8000f70:	40003c00 	.word	0x40003c00

08000f74 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08c      	sub	sp, #48	@ 0x30
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f7c:	f107 031c 	add.w	r3, r7, #28
 8000f80:	2200      	movs	r2, #0
 8000f82:	601a      	str	r2, [r3, #0]
 8000f84:	605a      	str	r2, [r3, #4]
 8000f86:	609a      	str	r2, [r3, #8]
 8000f88:	60da      	str	r2, [r3, #12]
 8000f8a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a32      	ldr	r2, [pc, #200]	@ (800105c <HAL_UART_MspInit+0xe8>)
 8000f92:	4293      	cmp	r3, r2
 8000f94:	d12d      	bne.n	8000ff2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	61bb      	str	r3, [r7, #24]
 8000f9a:	4b31      	ldr	r3, [pc, #196]	@ (8001060 <HAL_UART_MspInit+0xec>)
 8000f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f9e:	4a30      	ldr	r2, [pc, #192]	@ (8001060 <HAL_UART_MspInit+0xec>)
 8000fa0:	f043 0310 	orr.w	r3, r3, #16
 8000fa4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fa6:	4b2e      	ldr	r3, [pc, #184]	@ (8001060 <HAL_UART_MspInit+0xec>)
 8000fa8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000faa:	f003 0310 	and.w	r3, r3, #16
 8000fae:	61bb      	str	r3, [r7, #24]
 8000fb0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	617b      	str	r3, [r7, #20]
 8000fb6:	4b2a      	ldr	r3, [pc, #168]	@ (8001060 <HAL_UART_MspInit+0xec>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fba:	4a29      	ldr	r2, [pc, #164]	@ (8001060 <HAL_UART_MspInit+0xec>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fc2:	4b27      	ldr	r3, [pc, #156]	@ (8001060 <HAL_UART_MspInit+0xec>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc6:	f003 0301 	and.w	r3, r3, #1
 8000fca:	617b      	str	r3, [r7, #20]
 8000fcc:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000fce:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000fd2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd4:	2302      	movs	r3, #2
 8000fd6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fdc:	2303      	movs	r3, #3
 8000fde:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000fe0:	2307      	movs	r3, #7
 8000fe2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fe4:	f107 031c 	add.w	r3, r7, #28
 8000fe8:	4619      	mov	r1, r3
 8000fea:	481e      	ldr	r0, [pc, #120]	@ (8001064 <HAL_UART_MspInit+0xf0>)
 8000fec:	f000 fa40 	bl	8001470 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000ff0:	e030      	b.n	8001054 <HAL_UART_MspInit+0xe0>
  else if(huart->Instance==USART2)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	4a1c      	ldr	r2, [pc, #112]	@ (8001068 <HAL_UART_MspInit+0xf4>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d12b      	bne.n	8001054 <HAL_UART_MspInit+0xe0>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	613b      	str	r3, [r7, #16]
 8001000:	4b17      	ldr	r3, [pc, #92]	@ (8001060 <HAL_UART_MspInit+0xec>)
 8001002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001004:	4a16      	ldr	r2, [pc, #88]	@ (8001060 <HAL_UART_MspInit+0xec>)
 8001006:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800100a:	6413      	str	r3, [r2, #64]	@ 0x40
 800100c:	4b14      	ldr	r3, [pc, #80]	@ (8001060 <HAL_UART_MspInit+0xec>)
 800100e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001010:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001018:	2300      	movs	r3, #0
 800101a:	60fb      	str	r3, [r7, #12]
 800101c:	4b10      	ldr	r3, [pc, #64]	@ (8001060 <HAL_UART_MspInit+0xec>)
 800101e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001020:	4a0f      	ldr	r2, [pc, #60]	@ (8001060 <HAL_UART_MspInit+0xec>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6313      	str	r3, [r2, #48]	@ 0x30
 8001028:	4b0d      	ldr	r3, [pc, #52]	@ (8001060 <HAL_UART_MspInit+0xec>)
 800102a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001034:	230c      	movs	r3, #12
 8001036:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001040:	2303      	movs	r3, #3
 8001042:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001044:	2307      	movs	r3, #7
 8001046:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001048:	f107 031c 	add.w	r3, r7, #28
 800104c:	4619      	mov	r1, r3
 800104e:	4805      	ldr	r0, [pc, #20]	@ (8001064 <HAL_UART_MspInit+0xf0>)
 8001050:	f000 fa0e 	bl	8001470 <HAL_GPIO_Init>
}
 8001054:	bf00      	nop
 8001056:	3730      	adds	r7, #48	@ 0x30
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	40011000 	.word	0x40011000
 8001060:	40023800 	.word	0x40023800
 8001064:	40020000 	.word	0x40020000
 8001068:	40004400 	.word	0x40004400

0800106c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08e      	sub	sp, #56	@ 0x38
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001074:	2300      	movs	r3, #0
 8001076:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001078:	2300      	movs	r3, #0
 800107a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 800107c:	2300      	movs	r3, #0
 800107e:	60fb      	str	r3, [r7, #12]
 8001080:	4b34      	ldr	r3, [pc, #208]	@ (8001154 <HAL_InitTick+0xe8>)
 8001082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001084:	4a33      	ldr	r2, [pc, #204]	@ (8001154 <HAL_InitTick+0xe8>)
 8001086:	f043 0301 	orr.w	r3, r3, #1
 800108a:	6413      	str	r3, [r2, #64]	@ 0x40
 800108c:	4b31      	ldr	r3, [pc, #196]	@ (8001154 <HAL_InitTick+0xe8>)
 800108e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001090:	f003 0301 	and.w	r3, r3, #1
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001098:	f107 0210 	add.w	r2, r7, #16
 800109c:	f107 0314 	add.w	r3, r7, #20
 80010a0:	4611      	mov	r1, r2
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 ffda 	bl	800205c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80010a8:	6a3b      	ldr	r3, [r7, #32]
 80010aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM2 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80010ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d103      	bne.n	80010ba <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80010b2:	f000 ffab 	bl	800200c <HAL_RCC_GetPCLK1Freq>
 80010b6:	6378      	str	r0, [r7, #52]	@ 0x34
 80010b8:	e004      	b.n	80010c4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80010ba:	f000 ffa7 	bl	800200c <HAL_RCC_GetPCLK1Freq>
 80010be:	4603      	mov	r3, r0
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80010c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010c6:	4a24      	ldr	r2, [pc, #144]	@ (8001158 <HAL_InitTick+0xec>)
 80010c8:	fba2 2303 	umull	r2, r3, r2, r3
 80010cc:	0c9b      	lsrs	r3, r3, #18
 80010ce:	3b01      	subs	r3, #1
 80010d0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 80010d2:	4b22      	ldr	r3, [pc, #136]	@ (800115c <HAL_InitTick+0xf0>)
 80010d4:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80010d8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000U / 1000U) - 1U;
 80010da:	4b20      	ldr	r3, [pc, #128]	@ (800115c <HAL_InitTick+0xf0>)
 80010dc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80010e0:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 80010e2:	4a1e      	ldr	r2, [pc, #120]	@ (800115c <HAL_InitTick+0xf0>)
 80010e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80010e6:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 80010e8:	4b1c      	ldr	r3, [pc, #112]	@ (800115c <HAL_InitTick+0xf0>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ee:	4b1b      	ldr	r3, [pc, #108]	@ (800115c <HAL_InitTick+0xf0>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	609a      	str	r2, [r3, #8]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010f4:	4b19      	ldr	r3, [pc, #100]	@ (800115c <HAL_InitTick+0xf0>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim2);
 80010fa:	4818      	ldr	r0, [pc, #96]	@ (800115c <HAL_InitTick+0xf0>)
 80010fc:	f001 fa88 	bl	8002610 <HAL_TIM_Base_Init>
 8001100:	4603      	mov	r3, r0
 8001102:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001106:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800110a:	2b00      	cmp	r3, #0
 800110c:	d11b      	bne.n	8001146 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim2);
 800110e:	4813      	ldr	r0, [pc, #76]	@ (800115c <HAL_InitTick+0xf0>)
 8001110:	f001 fad8 	bl	80026c4 <HAL_TIM_Base_Start_IT>
 8001114:	4603      	mov	r3, r0
 8001116:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800111a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800111e:	2b00      	cmp	r3, #0
 8001120:	d111      	bne.n	8001146 <HAL_InitTick+0xda>
    {
    /* Enable the TIM2 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001122:	201c      	movs	r0, #28
 8001124:	f000 f996 	bl	8001454 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2b0f      	cmp	r3, #15
 800112c:	d808      	bhi.n	8001140 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority, 0U);
 800112e:	2200      	movs	r2, #0
 8001130:	6879      	ldr	r1, [r7, #4]
 8001132:	201c      	movs	r0, #28
 8001134:	f000 f972 	bl	800141c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001138:	4a09      	ldr	r2, [pc, #36]	@ (8001160 <HAL_InitTick+0xf4>)
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	e002      	b.n	8001146 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001140:	2301      	movs	r3, #1
 8001142:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001146:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800114a:	4618      	mov	r0, r3
 800114c:	3738      	adds	r7, #56	@ 0x38
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40023800 	.word	0x40023800
 8001158:	431bde83 	.word	0x431bde83
 800115c:	2000019c 	.word	0x2000019c
 8001160:	2000001c 	.word	0x2000001c

08001164 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001168:	bf00      	nop
 800116a:	e7fd      	b.n	8001168 <NMI_Handler+0x4>

0800116c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001170:	bf00      	nop
 8001172:	e7fd      	b.n	8001170 <HardFault_Handler+0x4>

08001174 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001174:	b480      	push	{r7}
 8001176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001178:	bf00      	nop
 800117a:	e7fd      	b.n	8001178 <MemManage_Handler+0x4>

0800117c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001180:	bf00      	nop
 8001182:	e7fd      	b.n	8001180 <BusFault_Handler+0x4>

08001184 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001188:	bf00      	nop
 800118a:	e7fd      	b.n	8001188 <UsageFault_Handler+0x4>

0800118c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800118c:	b480      	push	{r7}
 800118e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
	...

0800119c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80011a0:	4802      	ldr	r0, [pc, #8]	@ (80011ac <TIM2_IRQHandler+0x10>)
 80011a2:	f001 faf1 	bl	8002788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	2000019c 	.word	0x2000019c

080011b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80011b0:	b480      	push	{r7}
 80011b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011b4:	4b06      	ldr	r3, [pc, #24]	@ (80011d0 <SystemInit+0x20>)
 80011b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80011ba:	4a05      	ldr	r2, [pc, #20]	@ (80011d0 <SystemInit+0x20>)
 80011bc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80011c0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	e000ed00 	.word	0xe000ed00

080011d4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80011d4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800120c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011d8:	f7ff ffea 	bl	80011b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011dc:	480c      	ldr	r0, [pc, #48]	@ (8001210 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80011de:	490d      	ldr	r1, [pc, #52]	@ (8001214 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80011e0:	4a0d      	ldr	r2, [pc, #52]	@ (8001218 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e4:	e002      	b.n	80011ec <LoopCopyDataInit>

080011e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ea:	3304      	adds	r3, #4

080011ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f0:	d3f9      	bcc.n	80011e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f2:	4a0a      	ldr	r2, [pc, #40]	@ (800121c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80011f4:	4c0a      	ldr	r4, [pc, #40]	@ (8001220 <LoopFillZerobss+0x22>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f8:	e001      	b.n	80011fe <LoopFillZerobss>

080011fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011fc:	3204      	adds	r2, #4

080011fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001200:	d3fb      	bcc.n	80011fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001202:	f004 fd09 	bl	8005c18 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001206:	f7ff fbbd 	bl	8000984 <main>
  bx  lr    
 800120a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800120c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001210:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001214:	20000028 	.word	0x20000028
  ldr r2, =_sidata
 8001218:	08005d04 	.word	0x08005d04
  ldr r2, =_sbss
 800121c:	20000028 	.word	0x20000028
  ldr r4, =_ebss
 8001220:	20004b38 	.word	0x20004b38

08001224 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001224:	e7fe      	b.n	8001224 <ADC_IRQHandler>
	...

08001228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800122c:	4b0e      	ldr	r3, [pc, #56]	@ (8001268 <HAL_Init+0x40>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	4a0d      	ldr	r2, [pc, #52]	@ (8001268 <HAL_Init+0x40>)
 8001232:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001236:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001238:	4b0b      	ldr	r3, [pc, #44]	@ (8001268 <HAL_Init+0x40>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	4a0a      	ldr	r2, [pc, #40]	@ (8001268 <HAL_Init+0x40>)
 800123e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001242:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001244:	4b08      	ldr	r3, [pc, #32]	@ (8001268 <HAL_Init+0x40>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a07      	ldr	r2, [pc, #28]	@ (8001268 <HAL_Init+0x40>)
 800124a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800124e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001250:	2003      	movs	r0, #3
 8001252:	f000 f8d8 	bl	8001406 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001256:	200f      	movs	r0, #15
 8001258:	f7ff ff08 	bl	800106c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800125c:	f7ff fda2 	bl	8000da4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	40023c00 	.word	0x40023c00

0800126c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <HAL_IncTick+0x20>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	461a      	mov	r2, r3
 8001276:	4b06      	ldr	r3, [pc, #24]	@ (8001290 <HAL_IncTick+0x24>)
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	4413      	add	r3, r2
 800127c:	4a04      	ldr	r2, [pc, #16]	@ (8001290 <HAL_IncTick+0x24>)
 800127e:	6013      	str	r3, [r2, #0]
}
 8001280:	bf00      	nop
 8001282:	46bd      	mov	sp, r7
 8001284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001288:	4770      	bx	lr
 800128a:	bf00      	nop
 800128c:	20000020 	.word	0x20000020
 8001290:	200001e4 	.word	0x200001e4

08001294 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  return uwTick;
 8001298:	4b03      	ldr	r3, [pc, #12]	@ (80012a8 <HAL_GetTick+0x14>)
 800129a:	681b      	ldr	r3, [r3, #0]
}
 800129c:	4618      	mov	r0, r3
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop
 80012a8:	200001e4 	.word	0x200001e4

080012ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012bc:	4b0c      	ldr	r3, [pc, #48]	@ (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012be:	68db      	ldr	r3, [r3, #12]
 80012c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012c2:	68ba      	ldr	r2, [r7, #8]
 80012c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80012c8:	4013      	ands	r3, r2
 80012ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012d0:	68bb      	ldr	r3, [r7, #8]
 80012d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80012d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80012dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012de:	4a04      	ldr	r2, [pc, #16]	@ (80012f0 <__NVIC_SetPriorityGrouping+0x44>)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	60d3      	str	r3, [r2, #12]
}
 80012e4:	bf00      	nop
 80012e6:	3714      	adds	r7, #20
 80012e8:	46bd      	mov	sp, r7
 80012ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ee:	4770      	bx	lr
 80012f0:	e000ed00 	.word	0xe000ed00

080012f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012f8:	4b04      	ldr	r3, [pc, #16]	@ (800130c <__NVIC_GetPriorityGrouping+0x18>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	0a1b      	lsrs	r3, r3, #8
 80012fe:	f003 0307 	and.w	r3, r3, #7
}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00

08001310 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001310:	b480      	push	{r7}
 8001312:	b083      	sub	sp, #12
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800131a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131e:	2b00      	cmp	r3, #0
 8001320:	db0b      	blt.n	800133a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001322:	79fb      	ldrb	r3, [r7, #7]
 8001324:	f003 021f 	and.w	r2, r3, #31
 8001328:	4907      	ldr	r1, [pc, #28]	@ (8001348 <__NVIC_EnableIRQ+0x38>)
 800132a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132e:	095b      	lsrs	r3, r3, #5
 8001330:	2001      	movs	r0, #1
 8001332:	fa00 f202 	lsl.w	r2, r0, r2
 8001336:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800133a:	bf00      	nop
 800133c:	370c      	adds	r7, #12
 800133e:	46bd      	mov	sp, r7
 8001340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	e000e100 	.word	0xe000e100

0800134c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800134c:	b480      	push	{r7}
 800134e:	b083      	sub	sp, #12
 8001350:	af00      	add	r7, sp, #0
 8001352:	4603      	mov	r3, r0
 8001354:	6039      	str	r1, [r7, #0]
 8001356:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800135c:	2b00      	cmp	r3, #0
 800135e:	db0a      	blt.n	8001376 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001360:	683b      	ldr	r3, [r7, #0]
 8001362:	b2da      	uxtb	r2, r3
 8001364:	490c      	ldr	r1, [pc, #48]	@ (8001398 <__NVIC_SetPriority+0x4c>)
 8001366:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136a:	0112      	lsls	r2, r2, #4
 800136c:	b2d2      	uxtb	r2, r2
 800136e:	440b      	add	r3, r1
 8001370:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001374:	e00a      	b.n	800138c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	b2da      	uxtb	r2, r3
 800137a:	4908      	ldr	r1, [pc, #32]	@ (800139c <__NVIC_SetPriority+0x50>)
 800137c:	79fb      	ldrb	r3, [r7, #7]
 800137e:	f003 030f 	and.w	r3, r3, #15
 8001382:	3b04      	subs	r3, #4
 8001384:	0112      	lsls	r2, r2, #4
 8001386:	b2d2      	uxtb	r2, r2
 8001388:	440b      	add	r3, r1
 800138a:	761a      	strb	r2, [r3, #24]
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr
 8001398:	e000e100 	.word	0xe000e100
 800139c:	e000ed00 	.word	0xe000ed00

080013a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b089      	sub	sp, #36	@ 0x24
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	f003 0307 	and.w	r3, r3, #7
 80013b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80013b4:	69fb      	ldr	r3, [r7, #28]
 80013b6:	f1c3 0307 	rsb	r3, r3, #7
 80013ba:	2b04      	cmp	r3, #4
 80013bc:	bf28      	it	cs
 80013be:	2304      	movcs	r3, #4
 80013c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013c2:	69fb      	ldr	r3, [r7, #28]
 80013c4:	3304      	adds	r3, #4
 80013c6:	2b06      	cmp	r3, #6
 80013c8:	d902      	bls.n	80013d0 <NVIC_EncodePriority+0x30>
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	3b03      	subs	r3, #3
 80013ce:	e000      	b.n	80013d2 <NVIC_EncodePriority+0x32>
 80013d0:	2300      	movs	r3, #0
 80013d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d4:	f04f 32ff 	mov.w	r2, #4294967295
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	fa02 f303 	lsl.w	r3, r2, r3
 80013de:	43da      	mvns	r2, r3
 80013e0:	68bb      	ldr	r3, [r7, #8]
 80013e2:	401a      	ands	r2, r3
 80013e4:	697b      	ldr	r3, [r7, #20]
 80013e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013e8:	f04f 31ff 	mov.w	r1, #4294967295
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	fa01 f303 	lsl.w	r3, r1, r3
 80013f2:	43d9      	mvns	r1, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013f8:	4313      	orrs	r3, r2
         );
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3724      	adds	r7, #36	@ 0x24
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr

08001406 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001406:	b580      	push	{r7, lr}
 8001408:	b082      	sub	sp, #8
 800140a:	af00      	add	r7, sp, #0
 800140c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f7ff ff4c 	bl	80012ac <__NVIC_SetPriorityGrouping>
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}

0800141c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	4603      	mov	r3, r0
 8001424:	60b9      	str	r1, [r7, #8]
 8001426:	607a      	str	r2, [r7, #4]
 8001428:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800142a:	2300      	movs	r3, #0
 800142c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800142e:	f7ff ff61 	bl	80012f4 <__NVIC_GetPriorityGrouping>
 8001432:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001434:	687a      	ldr	r2, [r7, #4]
 8001436:	68b9      	ldr	r1, [r7, #8]
 8001438:	6978      	ldr	r0, [r7, #20]
 800143a:	f7ff ffb1 	bl	80013a0 <NVIC_EncodePriority>
 800143e:	4602      	mov	r2, r0
 8001440:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001444:	4611      	mov	r1, r2
 8001446:	4618      	mov	r0, r3
 8001448:	f7ff ff80 	bl	800134c <__NVIC_SetPriority>
}
 800144c:	bf00      	nop
 800144e:	3718      	adds	r7, #24
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}

08001454 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	4603      	mov	r3, r0
 800145c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800145e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff ff54 	bl	8001310 <__NVIC_EnableIRQ>
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}

08001470 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001470:	b480      	push	{r7}
 8001472:	b089      	sub	sp, #36	@ 0x24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001482:	2300      	movs	r3, #0
 8001484:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001486:	2300      	movs	r3, #0
 8001488:	61fb      	str	r3, [r7, #28]
 800148a:	e159      	b.n	8001740 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800148c:	2201      	movs	r2, #1
 800148e:	69fb      	ldr	r3, [r7, #28]
 8001490:	fa02 f303 	lsl.w	r3, r2, r3
 8001494:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	4013      	ands	r3, r2
 800149e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014a0:	693a      	ldr	r2, [r7, #16]
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	429a      	cmp	r2, r3
 80014a6:	f040 8148 	bne.w	800173a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	f003 0303 	and.w	r3, r3, #3
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d005      	beq.n	80014c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d130      	bne.n	8001524 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	689b      	ldr	r3, [r3, #8]
 80014c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	2203      	movs	r2, #3
 80014ce:	fa02 f303 	lsl.w	r3, r2, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	69ba      	ldr	r2, [r7, #24]
 80014d6:	4013      	ands	r3, r2
 80014d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	68da      	ldr	r2, [r3, #12]
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	fa02 f303 	lsl.w	r3, r2, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	69ba      	ldr	r2, [r7, #24]
 80014f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014f8:	2201      	movs	r2, #1
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001500:	43db      	mvns	r3, r3
 8001502:	69ba      	ldr	r2, [r7, #24]
 8001504:	4013      	ands	r3, r2
 8001506:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	091b      	lsrs	r3, r3, #4
 800150e:	f003 0201 	and.w	r2, r3, #1
 8001512:	69fb      	ldr	r3, [r7, #28]
 8001514:	fa02 f303 	lsl.w	r3, r2, r3
 8001518:	69ba      	ldr	r2, [r7, #24]
 800151a:	4313      	orrs	r3, r2
 800151c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	69ba      	ldr	r2, [r7, #24]
 8001522:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	685b      	ldr	r3, [r3, #4]
 8001528:	f003 0303 	and.w	r3, r3, #3
 800152c:	2b03      	cmp	r3, #3
 800152e:	d017      	beq.n	8001560 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001536:	69fb      	ldr	r3, [r7, #28]
 8001538:	005b      	lsls	r3, r3, #1
 800153a:	2203      	movs	r2, #3
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	fa02 f303 	lsl.w	r3, r2, r3
 8001554:	69ba      	ldr	r2, [r7, #24]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	f003 0303 	and.w	r3, r3, #3
 8001568:	2b02      	cmp	r3, #2
 800156a:	d123      	bne.n	80015b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800156c:	69fb      	ldr	r3, [r7, #28]
 800156e:	08da      	lsrs	r2, r3, #3
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	3208      	adds	r2, #8
 8001574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001578:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800157a:	69fb      	ldr	r3, [r7, #28]
 800157c:	f003 0307 	and.w	r3, r3, #7
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	220f      	movs	r2, #15
 8001584:	fa02 f303 	lsl.w	r3, r2, r3
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	691a      	ldr	r2, [r3, #16]
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	009b      	lsls	r3, r3, #2
 800159c:	fa02 f303 	lsl.w	r3, r2, r3
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	4313      	orrs	r3, r2
 80015a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015a6:	69fb      	ldr	r3, [r7, #28]
 80015a8:	08da      	lsrs	r2, r3, #3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	3208      	adds	r2, #8
 80015ae:	69b9      	ldr	r1, [r7, #24]
 80015b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	005b      	lsls	r3, r3, #1
 80015be:	2203      	movs	r2, #3
 80015c0:	fa02 f303 	lsl.w	r3, r2, r3
 80015c4:	43db      	mvns	r3, r3
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	4013      	ands	r3, r2
 80015ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f003 0203 	and.w	r2, r3, #3
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	005b      	lsls	r3, r3, #1
 80015d8:	fa02 f303 	lsl.w	r3, r2, r3
 80015dc:	69ba      	ldr	r2, [r7, #24]
 80015de:	4313      	orrs	r3, r2
 80015e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69ba      	ldr	r2, [r7, #24]
 80015e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	f000 80a2 	beq.w	800173a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015f6:	2300      	movs	r3, #0
 80015f8:	60fb      	str	r3, [r7, #12]
 80015fa:	4b57      	ldr	r3, [pc, #348]	@ (8001758 <HAL_GPIO_Init+0x2e8>)
 80015fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015fe:	4a56      	ldr	r2, [pc, #344]	@ (8001758 <HAL_GPIO_Init+0x2e8>)
 8001600:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001604:	6453      	str	r3, [r2, #68]	@ 0x44
 8001606:	4b54      	ldr	r3, [pc, #336]	@ (8001758 <HAL_GPIO_Init+0x2e8>)
 8001608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001612:	4a52      	ldr	r2, [pc, #328]	@ (800175c <HAL_GPIO_Init+0x2ec>)
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	089b      	lsrs	r3, r3, #2
 8001618:	3302      	adds	r3, #2
 800161a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800161e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	220f      	movs	r2, #15
 800162a:	fa02 f303 	lsl.w	r3, r2, r3
 800162e:	43db      	mvns	r3, r3
 8001630:	69ba      	ldr	r2, [r7, #24]
 8001632:	4013      	ands	r3, r2
 8001634:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	4a49      	ldr	r2, [pc, #292]	@ (8001760 <HAL_GPIO_Init+0x2f0>)
 800163a:	4293      	cmp	r3, r2
 800163c:	d019      	beq.n	8001672 <HAL_GPIO_Init+0x202>
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	4a48      	ldr	r2, [pc, #288]	@ (8001764 <HAL_GPIO_Init+0x2f4>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d013      	beq.n	800166e <HAL_GPIO_Init+0x1fe>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	4a47      	ldr	r2, [pc, #284]	@ (8001768 <HAL_GPIO_Init+0x2f8>)
 800164a:	4293      	cmp	r3, r2
 800164c:	d00d      	beq.n	800166a <HAL_GPIO_Init+0x1fa>
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	4a46      	ldr	r2, [pc, #280]	@ (800176c <HAL_GPIO_Init+0x2fc>)
 8001652:	4293      	cmp	r3, r2
 8001654:	d007      	beq.n	8001666 <HAL_GPIO_Init+0x1f6>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a45      	ldr	r2, [pc, #276]	@ (8001770 <HAL_GPIO_Init+0x300>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d101      	bne.n	8001662 <HAL_GPIO_Init+0x1f2>
 800165e:	2304      	movs	r3, #4
 8001660:	e008      	b.n	8001674 <HAL_GPIO_Init+0x204>
 8001662:	2307      	movs	r3, #7
 8001664:	e006      	b.n	8001674 <HAL_GPIO_Init+0x204>
 8001666:	2303      	movs	r3, #3
 8001668:	e004      	b.n	8001674 <HAL_GPIO_Init+0x204>
 800166a:	2302      	movs	r3, #2
 800166c:	e002      	b.n	8001674 <HAL_GPIO_Init+0x204>
 800166e:	2301      	movs	r3, #1
 8001670:	e000      	b.n	8001674 <HAL_GPIO_Init+0x204>
 8001672:	2300      	movs	r3, #0
 8001674:	69fa      	ldr	r2, [r7, #28]
 8001676:	f002 0203 	and.w	r2, r2, #3
 800167a:	0092      	lsls	r2, r2, #2
 800167c:	4093      	lsls	r3, r2
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4313      	orrs	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001684:	4935      	ldr	r1, [pc, #212]	@ (800175c <HAL_GPIO_Init+0x2ec>)
 8001686:	69fb      	ldr	r3, [r7, #28]
 8001688:	089b      	lsrs	r3, r3, #2
 800168a:	3302      	adds	r3, #2
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001692:	4b38      	ldr	r3, [pc, #224]	@ (8001774 <HAL_GPIO_Init+0x304>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	43db      	mvns	r3, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016b6:	4a2f      	ldr	r2, [pc, #188]	@ (8001774 <HAL_GPIO_Init+0x304>)
 80016b8:	69bb      	ldr	r3, [r7, #24]
 80016ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016bc:	4b2d      	ldr	r3, [pc, #180]	@ (8001774 <HAL_GPIO_Init+0x304>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016c2:	693b      	ldr	r3, [r7, #16]
 80016c4:	43db      	mvns	r3, r3
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	4013      	ands	r3, r2
 80016ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d003      	beq.n	80016e0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	4313      	orrs	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016e0:	4a24      	ldr	r2, [pc, #144]	@ (8001774 <HAL_GPIO_Init+0x304>)
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016e6:	4b23      	ldr	r3, [pc, #140]	@ (8001774 <HAL_GPIO_Init+0x304>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	43db      	mvns	r3, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4013      	ands	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d003      	beq.n	800170a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001702:	69ba      	ldr	r2, [r7, #24]
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	4313      	orrs	r3, r2
 8001708:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800170a:	4a1a      	ldr	r2, [pc, #104]	@ (8001774 <HAL_GPIO_Init+0x304>)
 800170c:	69bb      	ldr	r3, [r7, #24]
 800170e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001710:	4b18      	ldr	r3, [pc, #96]	@ (8001774 <HAL_GPIO_Init+0x304>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001728:	2b00      	cmp	r3, #0
 800172a:	d003      	beq.n	8001734 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	4313      	orrs	r3, r2
 8001732:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001734:	4a0f      	ldr	r2, [pc, #60]	@ (8001774 <HAL_GPIO_Init+0x304>)
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	3301      	adds	r3, #1
 800173e:	61fb      	str	r3, [r7, #28]
 8001740:	69fb      	ldr	r3, [r7, #28]
 8001742:	2b0f      	cmp	r3, #15
 8001744:	f67f aea2 	bls.w	800148c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001748:	bf00      	nop
 800174a:	bf00      	nop
 800174c:	3724      	adds	r7, #36	@ 0x24
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	40023800 	.word	0x40023800
 800175c:	40013800 	.word	0x40013800
 8001760:	40020000 	.word	0x40020000
 8001764:	40020400 	.word	0x40020400
 8001768:	40020800 	.word	0x40020800
 800176c:	40020c00 	.word	0x40020c00
 8001770:	40021000 	.word	0x40021000
 8001774:	40013c00 	.word	0x40013c00

08001778 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
 8001780:	460b      	mov	r3, r1
 8001782:	807b      	strh	r3, [r7, #2]
 8001784:	4613      	mov	r3, r2
 8001786:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001788:	787b      	ldrb	r3, [r7, #1]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d003      	beq.n	8001796 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800178e:	887a      	ldrh	r2, [r7, #2]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001794:	e003      	b.n	800179e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001796:	887b      	ldrh	r3, [r7, #2]
 8001798:	041a      	lsls	r2, r3, #16
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	619a      	str	r2, [r3, #24]
}
 800179e:	bf00      	nop
 80017a0:	370c      	adds	r7, #12
 80017a2:	46bd      	mov	sp, r7
 80017a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a8:	4770      	bx	lr
	...

080017ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b086      	sub	sp, #24
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d101      	bne.n	80017be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017ba:	2301      	movs	r3, #1
 80017bc:	e267      	b.n	8001c8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d075      	beq.n	80018b6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017ca:	4b88      	ldr	r3, [pc, #544]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	f003 030c 	and.w	r3, r3, #12
 80017d2:	2b04      	cmp	r3, #4
 80017d4:	d00c      	beq.n	80017f0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017d6:	4b85      	ldr	r3, [pc, #532]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80017de:	2b08      	cmp	r3, #8
 80017e0:	d112      	bne.n	8001808 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80017e2:	4b82      	ldr	r3, [pc, #520]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80017ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80017ee:	d10b      	bne.n	8001808 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f0:	4b7e      	ldr	r3, [pc, #504]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d05b      	beq.n	80018b4 <HAL_RCC_OscConfig+0x108>
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	685b      	ldr	r3, [r3, #4]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d157      	bne.n	80018b4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e242      	b.n	8001c8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001810:	d106      	bne.n	8001820 <HAL_RCC_OscConfig+0x74>
 8001812:	4b76      	ldr	r3, [pc, #472]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4a75      	ldr	r2, [pc, #468]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 8001818:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800181c:	6013      	str	r3, [r2, #0]
 800181e:	e01d      	b.n	800185c <HAL_RCC_OscConfig+0xb0>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001828:	d10c      	bne.n	8001844 <HAL_RCC_OscConfig+0x98>
 800182a:	4b70      	ldr	r3, [pc, #448]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a6f      	ldr	r2, [pc, #444]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 8001830:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001834:	6013      	str	r3, [r2, #0]
 8001836:	4b6d      	ldr	r3, [pc, #436]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a6c      	ldr	r2, [pc, #432]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 800183c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001840:	6013      	str	r3, [r2, #0]
 8001842:	e00b      	b.n	800185c <HAL_RCC_OscConfig+0xb0>
 8001844:	4b69      	ldr	r3, [pc, #420]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a68      	ldr	r2, [pc, #416]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 800184a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800184e:	6013      	str	r3, [r2, #0]
 8001850:	4b66      	ldr	r3, [pc, #408]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4a65      	ldr	r2, [pc, #404]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 8001856:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800185a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d013      	beq.n	800188c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001864:	f7ff fd16 	bl	8001294 <HAL_GetTick>
 8001868:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800186a:	e008      	b.n	800187e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800186c:	f7ff fd12 	bl	8001294 <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	2b64      	cmp	r3, #100	@ 0x64
 8001878:	d901      	bls.n	800187e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800187a:	2303      	movs	r3, #3
 800187c:	e207      	b.n	8001c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800187e:	4b5b      	ldr	r3, [pc, #364]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001886:	2b00      	cmp	r3, #0
 8001888:	d0f0      	beq.n	800186c <HAL_RCC_OscConfig+0xc0>
 800188a:	e014      	b.n	80018b6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800188c:	f7ff fd02 	bl	8001294 <HAL_GetTick>
 8001890:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001892:	e008      	b.n	80018a6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001894:	f7ff fcfe 	bl	8001294 <HAL_GetTick>
 8001898:	4602      	mov	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	2b64      	cmp	r3, #100	@ 0x64
 80018a0:	d901      	bls.n	80018a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e1f3      	b.n	8001c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018a6:	4b51      	ldr	r3, [pc, #324]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d1f0      	bne.n	8001894 <HAL_RCC_OscConfig+0xe8>
 80018b2:	e000      	b.n	80018b6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d063      	beq.n	800198a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018c2:	4b4a      	ldr	r3, [pc, #296]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 80018c4:	689b      	ldr	r3, [r3, #8]
 80018c6:	f003 030c 	and.w	r3, r3, #12
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d00b      	beq.n	80018e6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018ce:	4b47      	ldr	r3, [pc, #284]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 80018d0:	689b      	ldr	r3, [r3, #8]
 80018d2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80018d6:	2b08      	cmp	r3, #8
 80018d8:	d11c      	bne.n	8001914 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018da:	4b44      	ldr	r3, [pc, #272]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d116      	bne.n	8001914 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018e6:	4b41      	ldr	r3, [pc, #260]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f003 0302 	and.w	r3, r3, #2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d005      	beq.n	80018fe <HAL_RCC_OscConfig+0x152>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	68db      	ldr	r3, [r3, #12]
 80018f6:	2b01      	cmp	r3, #1
 80018f8:	d001      	beq.n	80018fe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e1c7      	b.n	8001c8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018fe:	4b3b      	ldr	r3, [pc, #236]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	00db      	lsls	r3, r3, #3
 800190c:	4937      	ldr	r1, [pc, #220]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 800190e:	4313      	orrs	r3, r2
 8001910:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001912:	e03a      	b.n	800198a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	68db      	ldr	r3, [r3, #12]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d020      	beq.n	800195e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800191c:	4b34      	ldr	r3, [pc, #208]	@ (80019f0 <HAL_RCC_OscConfig+0x244>)
 800191e:	2201      	movs	r2, #1
 8001920:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001922:	f7ff fcb7 	bl	8001294 <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001928:	e008      	b.n	800193c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800192a:	f7ff fcb3 	bl	8001294 <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	2b02      	cmp	r3, #2
 8001936:	d901      	bls.n	800193c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001938:	2303      	movs	r3, #3
 800193a:	e1a8      	b.n	8001c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800193c:	4b2b      	ldr	r3, [pc, #172]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0302 	and.w	r3, r3, #2
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0f0      	beq.n	800192a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001948:	4b28      	ldr	r3, [pc, #160]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	691b      	ldr	r3, [r3, #16]
 8001954:	00db      	lsls	r3, r3, #3
 8001956:	4925      	ldr	r1, [pc, #148]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 8001958:	4313      	orrs	r3, r2
 800195a:	600b      	str	r3, [r1, #0]
 800195c:	e015      	b.n	800198a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800195e:	4b24      	ldr	r3, [pc, #144]	@ (80019f0 <HAL_RCC_OscConfig+0x244>)
 8001960:	2200      	movs	r2, #0
 8001962:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001964:	f7ff fc96 	bl	8001294 <HAL_GetTick>
 8001968:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800196a:	e008      	b.n	800197e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800196c:	f7ff fc92 	bl	8001294 <HAL_GetTick>
 8001970:	4602      	mov	r2, r0
 8001972:	693b      	ldr	r3, [r7, #16]
 8001974:	1ad3      	subs	r3, r2, r3
 8001976:	2b02      	cmp	r3, #2
 8001978:	d901      	bls.n	800197e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800197a:	2303      	movs	r3, #3
 800197c:	e187      	b.n	8001c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800197e:	4b1b      	ldr	r3, [pc, #108]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d1f0      	bne.n	800196c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	2b00      	cmp	r3, #0
 8001994:	d036      	beq.n	8001a04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d016      	beq.n	80019cc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800199e:	4b15      	ldr	r3, [pc, #84]	@ (80019f4 <HAL_RCC_OscConfig+0x248>)
 80019a0:	2201      	movs	r2, #1
 80019a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019a4:	f7ff fc76 	bl	8001294 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019ac:	f7ff fc72 	bl	8001294 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e167      	b.n	8001c8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019be:	4b0b      	ldr	r3, [pc, #44]	@ (80019ec <HAL_RCC_OscConfig+0x240>)
 80019c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019c2:	f003 0302 	and.w	r3, r3, #2
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d0f0      	beq.n	80019ac <HAL_RCC_OscConfig+0x200>
 80019ca:	e01b      	b.n	8001a04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019cc:	4b09      	ldr	r3, [pc, #36]	@ (80019f4 <HAL_RCC_OscConfig+0x248>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d2:	f7ff fc5f 	bl	8001294 <HAL_GetTick>
 80019d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019d8:	e00e      	b.n	80019f8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019da:	f7ff fc5b 	bl	8001294 <HAL_GetTick>
 80019de:	4602      	mov	r2, r0
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	1ad3      	subs	r3, r2, r3
 80019e4:	2b02      	cmp	r3, #2
 80019e6:	d907      	bls.n	80019f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e150      	b.n	8001c8e <HAL_RCC_OscConfig+0x4e2>
 80019ec:	40023800 	.word	0x40023800
 80019f0:	42470000 	.word	0x42470000
 80019f4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f8:	4b88      	ldr	r3, [pc, #544]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 80019fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019fc:	f003 0302 	and.w	r3, r3, #2
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d1ea      	bne.n	80019da <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f003 0304 	and.w	r3, r3, #4
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f000 8097 	beq.w	8001b40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a12:	2300      	movs	r3, #0
 8001a14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a16:	4b81      	ldr	r3, [pc, #516]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10f      	bne.n	8001a42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a22:	2300      	movs	r3, #0
 8001a24:	60bb      	str	r3, [r7, #8]
 8001a26:	4b7d      	ldr	r3, [pc, #500]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a2a:	4a7c      	ldr	r2, [pc, #496]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001a2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a30:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a32:	4b7a      	ldr	r3, [pc, #488]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a3a:	60bb      	str	r3, [r7, #8]
 8001a3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a3e:	2301      	movs	r3, #1
 8001a40:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a42:	4b77      	ldr	r3, [pc, #476]	@ (8001c20 <HAL_RCC_OscConfig+0x474>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d118      	bne.n	8001a80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a4e:	4b74      	ldr	r3, [pc, #464]	@ (8001c20 <HAL_RCC_OscConfig+0x474>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a73      	ldr	r2, [pc, #460]	@ (8001c20 <HAL_RCC_OscConfig+0x474>)
 8001a54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a5a:	f7ff fc1b 	bl	8001294 <HAL_GetTick>
 8001a5e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a60:	e008      	b.n	8001a74 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a62:	f7ff fc17 	bl	8001294 <HAL_GetTick>
 8001a66:	4602      	mov	r2, r0
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	1ad3      	subs	r3, r2, r3
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d901      	bls.n	8001a74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a70:	2303      	movs	r3, #3
 8001a72:	e10c      	b.n	8001c8e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a74:	4b6a      	ldr	r3, [pc, #424]	@ (8001c20 <HAL_RCC_OscConfig+0x474>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d0f0      	beq.n	8001a62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	2b01      	cmp	r3, #1
 8001a86:	d106      	bne.n	8001a96 <HAL_RCC_OscConfig+0x2ea>
 8001a88:	4b64      	ldr	r3, [pc, #400]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001a8c:	4a63      	ldr	r2, [pc, #396]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001a8e:	f043 0301 	orr.w	r3, r3, #1
 8001a92:	6713      	str	r3, [r2, #112]	@ 0x70
 8001a94:	e01c      	b.n	8001ad0 <HAL_RCC_OscConfig+0x324>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	689b      	ldr	r3, [r3, #8]
 8001a9a:	2b05      	cmp	r3, #5
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x30c>
 8001a9e:	4b5f      	ldr	r3, [pc, #380]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001aa0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aa2:	4a5e      	ldr	r2, [pc, #376]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001aa4:	f043 0304 	orr.w	r3, r3, #4
 8001aa8:	6713      	str	r3, [r2, #112]	@ 0x70
 8001aaa:	4b5c      	ldr	r3, [pc, #368]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001aae:	4a5b      	ldr	r2, [pc, #364]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001ab0:	f043 0301 	orr.w	r3, r3, #1
 8001ab4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ab6:	e00b      	b.n	8001ad0 <HAL_RCC_OscConfig+0x324>
 8001ab8:	4b58      	ldr	r3, [pc, #352]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001abc:	4a57      	ldr	r2, [pc, #348]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001abe:	f023 0301 	bic.w	r3, r3, #1
 8001ac2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ac4:	4b55      	ldr	r3, [pc, #340]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001ac6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ac8:	4a54      	ldr	r2, [pc, #336]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001aca:	f023 0304 	bic.w	r3, r3, #4
 8001ace:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d015      	beq.n	8001b04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ad8:	f7ff fbdc 	bl	8001294 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ade:	e00a      	b.n	8001af6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ae0:	f7ff fbd8 	bl	8001294 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e0cb      	b.n	8001c8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001af6:	4b49      	ldr	r3, [pc, #292]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001af8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001afa:	f003 0302 	and.w	r3, r3, #2
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0ee      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x334>
 8001b02:	e014      	b.n	8001b2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b04:	f7ff fbc6 	bl	8001294 <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b0a:	e00a      	b.n	8001b22 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b0c:	f7ff fbc2 	bl	8001294 <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e0b5      	b.n	8001c8e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b22:	4b3e      	ldr	r3, [pc, #248]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d1ee      	bne.n	8001b0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b2e:	7dfb      	ldrb	r3, [r7, #23]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d105      	bne.n	8001b40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b34:	4b39      	ldr	r3, [pc, #228]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b38:	4a38      	ldr	r2, [pc, #224]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001b3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b3e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	699b      	ldr	r3, [r3, #24]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	f000 80a1 	beq.w	8001c8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b4a:	4b34      	ldr	r3, [pc, #208]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	f003 030c 	and.w	r3, r3, #12
 8001b52:	2b08      	cmp	r3, #8
 8001b54:	d05c      	beq.n	8001c10 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	2b02      	cmp	r3, #2
 8001b5c:	d141      	bne.n	8001be2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b5e:	4b31      	ldr	r3, [pc, #196]	@ (8001c24 <HAL_RCC_OscConfig+0x478>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b64:	f7ff fb96 	bl	8001294 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b6c:	f7ff fb92 	bl	8001294 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e087      	b.n	8001c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b7e:	4b27      	ldr	r3, [pc, #156]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	69da      	ldr	r2, [r3, #28]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	431a      	orrs	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b98:	019b      	lsls	r3, r3, #6
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ba0:	085b      	lsrs	r3, r3, #1
 8001ba2:	3b01      	subs	r3, #1
 8001ba4:	041b      	lsls	r3, r3, #16
 8001ba6:	431a      	orrs	r2, r3
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bac:	061b      	lsls	r3, r3, #24
 8001bae:	491b      	ldr	r1, [pc, #108]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001bb4:	4b1b      	ldr	r3, [pc, #108]	@ (8001c24 <HAL_RCC_OscConfig+0x478>)
 8001bb6:	2201      	movs	r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bba:	f7ff fb6b 	bl	8001294 <HAL_GetTick>
 8001bbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bc0:	e008      	b.n	8001bd4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bc2:	f7ff fb67 	bl	8001294 <HAL_GetTick>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	d901      	bls.n	8001bd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bd0:	2303      	movs	r3, #3
 8001bd2:	e05c      	b.n	8001c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bd4:	4b11      	ldr	r3, [pc, #68]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d0f0      	beq.n	8001bc2 <HAL_RCC_OscConfig+0x416>
 8001be0:	e054      	b.n	8001c8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be2:	4b10      	ldr	r3, [pc, #64]	@ (8001c24 <HAL_RCC_OscConfig+0x478>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be8:	f7ff fb54 	bl	8001294 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bf0:	f7ff fb50 	bl	8001294 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e045      	b.n	8001c8e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c02:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <HAL_RCC_OscConfig+0x470>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d1f0      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x444>
 8001c0e:	e03d      	b.n	8001c8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d107      	bne.n	8001c28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e038      	b.n	8001c8e <HAL_RCC_OscConfig+0x4e2>
 8001c1c:	40023800 	.word	0x40023800
 8001c20:	40007000 	.word	0x40007000
 8001c24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c28:	4b1b      	ldr	r3, [pc, #108]	@ (8001c98 <HAL_RCC_OscConfig+0x4ec>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d028      	beq.n	8001c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d121      	bne.n	8001c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	d11a      	bne.n	8001c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c52:	68fa      	ldr	r2, [r7, #12]
 8001c54:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c58:	4013      	ands	r3, r2
 8001c5a:	687a      	ldr	r2, [r7, #4]
 8001c5c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d111      	bne.n	8001c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c6e:	085b      	lsrs	r3, r3, #1
 8001c70:	3b01      	subs	r3, #1
 8001c72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d107      	bne.n	8001c88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d001      	beq.n	8001c8c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e000      	b.n	8001c8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3718      	adds	r7, #24
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40023800 	.word	0x40023800

08001c9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d101      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e0cc      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cb0:	4b68      	ldr	r3, [pc, #416]	@ (8001e54 <HAL_RCC_ClockConfig+0x1b8>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	683a      	ldr	r2, [r7, #0]
 8001cba:	429a      	cmp	r2, r3
 8001cbc:	d90c      	bls.n	8001cd8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cbe:	4b65      	ldr	r3, [pc, #404]	@ (8001e54 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc0:	683a      	ldr	r2, [r7, #0]
 8001cc2:	b2d2      	uxtb	r2, r2
 8001cc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc6:	4b63      	ldr	r3, [pc, #396]	@ (8001e54 <HAL_RCC_ClockConfig+0x1b8>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	f003 0307 	and.w	r3, r3, #7
 8001cce:	683a      	ldr	r2, [r7, #0]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d001      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001cd4:	2301      	movs	r3, #1
 8001cd6:	e0b8      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0302 	and.w	r3, r3, #2
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d020      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 0304 	and.w	r3, r3, #4
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d005      	beq.n	8001cfc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001cf0:	4b59      	ldr	r3, [pc, #356]	@ (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	4a58      	ldr	r2, [pc, #352]	@ (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001cfa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	f003 0308 	and.w	r3, r3, #8
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d005      	beq.n	8001d14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d08:	4b53      	ldr	r3, [pc, #332]	@ (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	4a52      	ldr	r2, [pc, #328]	@ (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001d0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d14:	4b50      	ldr	r3, [pc, #320]	@ (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	494d      	ldr	r1, [pc, #308]	@ (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d044      	beq.n	8001dbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	2b01      	cmp	r3, #1
 8001d38:	d107      	bne.n	8001d4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d3a:	4b47      	ldr	r3, [pc, #284]	@ (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d119      	bne.n	8001d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e07f      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d003      	beq.n	8001d5a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d56:	2b03      	cmp	r3, #3
 8001d58:	d107      	bne.n	8001d6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d5a:	4b3f      	ldr	r3, [pc, #252]	@ (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d109      	bne.n	8001d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d66:	2301      	movs	r3, #1
 8001d68:	e06f      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d6a:	4b3b      	ldr	r3, [pc, #236]	@ (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e067      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001d7a:	4b37      	ldr	r3, [pc, #220]	@ (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	f023 0203 	bic.w	r2, r3, #3
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	4934      	ldr	r1, [pc, #208]	@ (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d8c:	f7ff fa82 	bl	8001294 <HAL_GetTick>
 8001d90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d92:	e00a      	b.n	8001daa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d94:	f7ff fa7e 	bl	8001294 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d901      	bls.n	8001daa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001da6:	2303      	movs	r3, #3
 8001da8:	e04f      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001daa:	4b2b      	ldr	r3, [pc, #172]	@ (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	f003 020c 	and.w	r2, r3, #12
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d1eb      	bne.n	8001d94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001dbc:	4b25      	ldr	r3, [pc, #148]	@ (8001e54 <HAL_RCC_ClockConfig+0x1b8>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	683a      	ldr	r2, [r7, #0]
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d20c      	bcs.n	8001de4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dca:	4b22      	ldr	r3, [pc, #136]	@ (8001e54 <HAL_RCC_ClockConfig+0x1b8>)
 8001dcc:	683a      	ldr	r2, [r7, #0]
 8001dce:	b2d2      	uxtb	r2, r2
 8001dd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dd2:	4b20      	ldr	r3, [pc, #128]	@ (8001e54 <HAL_RCC_ClockConfig+0x1b8>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f003 0307 	and.w	r3, r3, #7
 8001dda:	683a      	ldr	r2, [r7, #0]
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d001      	beq.n	8001de4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e032      	b.n	8001e4a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d008      	beq.n	8001e02 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001df0:	4b19      	ldr	r3, [pc, #100]	@ (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	68db      	ldr	r3, [r3, #12]
 8001dfc:	4916      	ldr	r1, [pc, #88]	@ (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f003 0308 	and.w	r3, r3, #8
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d009      	beq.n	8001e22 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e0e:	4b12      	ldr	r3, [pc, #72]	@ (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	691b      	ldr	r3, [r3, #16]
 8001e1a:	00db      	lsls	r3, r3, #3
 8001e1c:	490e      	ldr	r1, [pc, #56]	@ (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001e22:	f000 f821 	bl	8001e68 <HAL_RCC_GetSysClockFreq>
 8001e26:	4602      	mov	r2, r0
 8001e28:	4b0b      	ldr	r3, [pc, #44]	@ (8001e58 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	091b      	lsrs	r3, r3, #4
 8001e2e:	f003 030f 	and.w	r3, r3, #15
 8001e32:	490a      	ldr	r1, [pc, #40]	@ (8001e5c <HAL_RCC_ClockConfig+0x1c0>)
 8001e34:	5ccb      	ldrb	r3, [r1, r3]
 8001e36:	fa22 f303 	lsr.w	r3, r2, r3
 8001e3a:	4a09      	ldr	r2, [pc, #36]	@ (8001e60 <HAL_RCC_ClockConfig+0x1c4>)
 8001e3c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001e3e:	4b09      	ldr	r3, [pc, #36]	@ (8001e64 <HAL_RCC_ClockConfig+0x1c8>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7ff f912 	bl	800106c <HAL_InitTick>

  return HAL_OK;
 8001e48:	2300      	movs	r3, #0
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}
 8001e52:	bf00      	nop
 8001e54:	40023c00 	.word	0x40023c00
 8001e58:	40023800 	.word	0x40023800
 8001e5c:	08005cdc 	.word	0x08005cdc
 8001e60:	20000018 	.word	0x20000018
 8001e64:	2000001c 	.word	0x2000001c

08001e68 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e68:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e6c:	b090      	sub	sp, #64	@ 0x40
 8001e6e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001e70:	2300      	movs	r3, #0
 8001e72:	637b      	str	r3, [r7, #52]	@ 0x34
 8001e74:	2300      	movs	r3, #0
 8001e76:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001e78:	2300      	movs	r3, #0
 8001e7a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e80:	4b59      	ldr	r3, [pc, #356]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f003 030c 	and.w	r3, r3, #12
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d00d      	beq.n	8001ea8 <HAL_RCC_GetSysClockFreq+0x40>
 8001e8c:	2b08      	cmp	r3, #8
 8001e8e:	f200 80a1 	bhi.w	8001fd4 <HAL_RCC_GetSysClockFreq+0x16c>
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d002      	beq.n	8001e9c <HAL_RCC_GetSysClockFreq+0x34>
 8001e96:	2b04      	cmp	r3, #4
 8001e98:	d003      	beq.n	8001ea2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001e9a:	e09b      	b.n	8001fd4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001e9c:	4b53      	ldr	r3, [pc, #332]	@ (8001fec <HAL_RCC_GetSysClockFreq+0x184>)
 8001e9e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8001ea0:	e09b      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ea2:	4b53      	ldr	r3, [pc, #332]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ea4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ea6:	e098      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ea8:	4b4f      	ldr	r3, [pc, #316]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001eb0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001eb2:	4b4d      	ldr	r3, [pc, #308]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d028      	beq.n	8001f10 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001ebe:	4b4a      	ldr	r3, [pc, #296]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	099b      	lsrs	r3, r3, #6
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	623b      	str	r3, [r7, #32]
 8001ec8:	627a      	str	r2, [r7, #36]	@ 0x24
 8001eca:	6a3b      	ldr	r3, [r7, #32]
 8001ecc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001ed0:	2100      	movs	r1, #0
 8001ed2:	4b47      	ldr	r3, [pc, #284]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ed4:	fb03 f201 	mul.w	r2, r3, r1
 8001ed8:	2300      	movs	r3, #0
 8001eda:	fb00 f303 	mul.w	r3, r0, r3
 8001ede:	4413      	add	r3, r2
 8001ee0:	4a43      	ldr	r2, [pc, #268]	@ (8001ff0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001ee2:	fba0 1202 	umull	r1, r2, r0, r2
 8001ee6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001ee8:	460a      	mov	r2, r1
 8001eea:	62ba      	str	r2, [r7, #40]	@ 0x28
 8001eec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001eee:	4413      	add	r3, r2
 8001ef0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	61bb      	str	r3, [r7, #24]
 8001ef8:	61fa      	str	r2, [r7, #28]
 8001efa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001efe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001f02:	f7fe f96d 	bl	80001e0 <__aeabi_uldivmod>
 8001f06:	4602      	mov	r2, r0
 8001f08:	460b      	mov	r3, r1
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f0e:	e053      	b.n	8001fb8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f10:	4b35      	ldr	r3, [pc, #212]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	099b      	lsrs	r3, r3, #6
 8001f16:	2200      	movs	r2, #0
 8001f18:	613b      	str	r3, [r7, #16]
 8001f1a:	617a      	str	r2, [r7, #20]
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001f22:	f04f 0b00 	mov.w	fp, #0
 8001f26:	4652      	mov	r2, sl
 8001f28:	465b      	mov	r3, fp
 8001f2a:	f04f 0000 	mov.w	r0, #0
 8001f2e:	f04f 0100 	mov.w	r1, #0
 8001f32:	0159      	lsls	r1, r3, #5
 8001f34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f38:	0150      	lsls	r0, r2, #5
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	ebb2 080a 	subs.w	r8, r2, sl
 8001f42:	eb63 090b 	sbc.w	r9, r3, fp
 8001f46:	f04f 0200 	mov.w	r2, #0
 8001f4a:	f04f 0300 	mov.w	r3, #0
 8001f4e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001f52:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001f56:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001f5a:	ebb2 0408 	subs.w	r4, r2, r8
 8001f5e:	eb63 0509 	sbc.w	r5, r3, r9
 8001f62:	f04f 0200 	mov.w	r2, #0
 8001f66:	f04f 0300 	mov.w	r3, #0
 8001f6a:	00eb      	lsls	r3, r5, #3
 8001f6c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001f70:	00e2      	lsls	r2, r4, #3
 8001f72:	4614      	mov	r4, r2
 8001f74:	461d      	mov	r5, r3
 8001f76:	eb14 030a 	adds.w	r3, r4, sl
 8001f7a:	603b      	str	r3, [r7, #0]
 8001f7c:	eb45 030b 	adc.w	r3, r5, fp
 8001f80:	607b      	str	r3, [r7, #4]
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	f04f 0300 	mov.w	r3, #0
 8001f8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001f8e:	4629      	mov	r1, r5
 8001f90:	028b      	lsls	r3, r1, #10
 8001f92:	4621      	mov	r1, r4
 8001f94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001f98:	4621      	mov	r1, r4
 8001f9a:	028a      	lsls	r2, r1, #10
 8001f9c:	4610      	mov	r0, r2
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	60bb      	str	r3, [r7, #8]
 8001fa6:	60fa      	str	r2, [r7, #12]
 8001fa8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001fac:	f7fe f918 	bl	80001e0 <__aeabi_uldivmod>
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001fb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001fe8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	0c1b      	lsrs	r3, r3, #16
 8001fbe:	f003 0303 	and.w	r3, r3, #3
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8001fc8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001fca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001fcc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fd0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001fd2:	e002      	b.n	8001fda <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001fd4:	4b05      	ldr	r3, [pc, #20]	@ (8001fec <HAL_RCC_GetSysClockFreq+0x184>)
 8001fd6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001fd8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001fda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3740      	adds	r7, #64	@ 0x40
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40023800 	.word	0x40023800
 8001fec:	00f42400 	.word	0x00f42400
 8001ff0:	017d7840 	.word	0x017d7840

08001ff4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ff8:	4b03      	ldr	r3, [pc, #12]	@ (8002008 <HAL_RCC_GetHCLKFreq+0x14>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	20000018 	.word	0x20000018

0800200c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002010:	f7ff fff0 	bl	8001ff4 <HAL_RCC_GetHCLKFreq>
 8002014:	4602      	mov	r2, r0
 8002016:	4b05      	ldr	r3, [pc, #20]	@ (800202c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	0a9b      	lsrs	r3, r3, #10
 800201c:	f003 0307 	and.w	r3, r3, #7
 8002020:	4903      	ldr	r1, [pc, #12]	@ (8002030 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002022:	5ccb      	ldrb	r3, [r1, r3]
 8002024:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002028:	4618      	mov	r0, r3
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40023800 	.word	0x40023800
 8002030:	08005cec 	.word	0x08005cec

08002034 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002038:	f7ff ffdc 	bl	8001ff4 <HAL_RCC_GetHCLKFreq>
 800203c:	4602      	mov	r2, r0
 800203e:	4b05      	ldr	r3, [pc, #20]	@ (8002054 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	0b5b      	lsrs	r3, r3, #13
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	4903      	ldr	r1, [pc, #12]	@ (8002058 <HAL_RCC_GetPCLK2Freq+0x24>)
 800204a:	5ccb      	ldrb	r3, [r1, r3]
 800204c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002050:	4618      	mov	r0, r3
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40023800 	.word	0x40023800
 8002058:	08005cec 	.word	0x08005cec

0800205c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	220f      	movs	r2, #15
 800206a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800206c:	4b12      	ldr	r3, [pc, #72]	@ (80020b8 <HAL_RCC_GetClockConfig+0x5c>)
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	f003 0203 	and.w	r2, r3, #3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002078:	4b0f      	ldr	r3, [pc, #60]	@ (80020b8 <HAL_RCC_GetClockConfig+0x5c>)
 800207a:	689b      	ldr	r3, [r3, #8]
 800207c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002084:	4b0c      	ldr	r3, [pc, #48]	@ (80020b8 <HAL_RCC_GetClockConfig+0x5c>)
 8002086:	689b      	ldr	r3, [r3, #8]
 8002088:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002090:	4b09      	ldr	r3, [pc, #36]	@ (80020b8 <HAL_RCC_GetClockConfig+0x5c>)
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	08db      	lsrs	r3, r3, #3
 8002096:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800209e:	4b07      	ldr	r3, [pc, #28]	@ (80020bc <HAL_RCC_GetClockConfig+0x60>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0207 	and.w	r2, r3, #7
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	601a      	str	r2, [r3, #0]
}
 80020aa:	bf00      	nop
 80020ac:	370c      	adds	r7, #12
 80020ae:	46bd      	mov	sp, r7
 80020b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b4:	4770      	bx	lr
 80020b6:	bf00      	nop
 80020b8:	40023800 	.word	0x40023800
 80020bc:	40023c00 	.word	0x40023c00

080020c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b082      	sub	sp, #8
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d101      	bne.n	80020d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020ce:	2301      	movs	r3, #1
 80020d0:	e07b      	b.n	80021ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d108      	bne.n	80020ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	685b      	ldr	r3, [r3, #4]
 80020de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80020e2:	d009      	beq.n	80020f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2200      	movs	r2, #0
 80020e8:	61da      	str	r2, [r3, #28]
 80020ea:	e005      	b.n	80020f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2200      	movs	r2, #0
 80020f6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002104:	b2db      	uxtb	r3, r3
 8002106:	2b00      	cmp	r3, #0
 8002108:	d106      	bne.n	8002118 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7fe fe72 	bl	8000dfc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2202      	movs	r2, #2
 800211c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800212e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	689b      	ldr	r3, [r3, #8]
 800213c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002140:	431a      	orrs	r2, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	68db      	ldr	r3, [r3, #12]
 8002146:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800214a:	431a      	orrs	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	691b      	ldr	r3, [r3, #16]
 8002150:	f003 0302 	and.w	r3, r3, #2
 8002154:	431a      	orrs	r2, r3
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	431a      	orrs	r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002168:	431a      	orrs	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69db      	ldr	r3, [r3, #28]
 800216e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6a1b      	ldr	r3, [r3, #32]
 8002178:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800217c:	ea42 0103 	orr.w	r1, r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002184:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	430a      	orrs	r2, r1
 800218e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	0c1b      	lsrs	r3, r3, #16
 8002196:	f003 0104 	and.w	r1, r3, #4
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800219e:	f003 0210 	and.w	r2, r3, #16
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	430a      	orrs	r2, r1
 80021a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	69da      	ldr	r2, [r3, #28]
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2200      	movs	r2, #0
 80021be:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2201      	movs	r2, #1
 80021c4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80021c8:	2300      	movs	r3, #0
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	3708      	adds	r7, #8
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}

080021d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021d2:	b580      	push	{r7, lr}
 80021d4:	b088      	sub	sp, #32
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	60f8      	str	r0, [r7, #12]
 80021da:	60b9      	str	r1, [r7, #8]
 80021dc:	603b      	str	r3, [r7, #0]
 80021de:	4613      	mov	r3, r2
 80021e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80021e2:	2300      	movs	r3, #0
 80021e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <HAL_SPI_Transmit+0x22>
 80021f0:	2302      	movs	r3, #2
 80021f2:	e12d      	b.n	8002450 <HAL_SPI_Transmit+0x27e>
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2201      	movs	r2, #1
 80021f8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021fc:	f7ff f84a 	bl	8001294 <HAL_GetTick>
 8002200:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002202:	88fb      	ldrh	r3, [r7, #6]
 8002204:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b01      	cmp	r3, #1
 8002210:	d002      	beq.n	8002218 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002212:	2302      	movs	r3, #2
 8002214:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002216:	e116      	b.n	8002446 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d002      	beq.n	8002224 <HAL_SPI_Transmit+0x52>
 800221e:	88fb      	ldrh	r3, [r7, #6]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d102      	bne.n	800222a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002228:	e10d      	b.n	8002446 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2203      	movs	r2, #3
 800222e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	68ba      	ldr	r2, [r7, #8]
 800223c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	88fa      	ldrh	r2, [r7, #6]
 8002242:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	88fa      	ldrh	r2, [r7, #6]
 8002248:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2200      	movs	r2, #0
 800225a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	2200      	movs	r2, #0
 8002260:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	2200      	movs	r2, #0
 8002266:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002270:	d10f      	bne.n	8002292 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002280:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	681a      	ldr	r2, [r3, #0]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002290:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800229c:	2b40      	cmp	r3, #64	@ 0x40
 800229e:	d007      	beq.n	80022b0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80022ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	68db      	ldr	r3, [r3, #12]
 80022b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80022b8:	d14f      	bne.n	800235a <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d002      	beq.n	80022c8 <HAL_SPI_Transmit+0xf6>
 80022c2:	8afb      	ldrh	r3, [r7, #22]
 80022c4:	2b01      	cmp	r3, #1
 80022c6:	d142      	bne.n	800234e <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022cc:	881a      	ldrh	r2, [r3, #0]
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d8:	1c9a      	adds	r2, r3, #2
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022e2:	b29b      	uxth	r3, r3
 80022e4:	3b01      	subs	r3, #1
 80022e6:	b29a      	uxth	r2, r3
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80022ec:	e02f      	b.n	800234e <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689b      	ldr	r3, [r3, #8]
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	2b02      	cmp	r3, #2
 80022fa:	d112      	bne.n	8002322 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002300:	881a      	ldrh	r2, [r3, #0]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230c:	1c9a      	adds	r2, r3, #2
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002316:	b29b      	uxth	r3, r3
 8002318:	3b01      	subs	r3, #1
 800231a:	b29a      	uxth	r2, r3
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002320:	e015      	b.n	800234e <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002322:	f7fe ffb7 	bl	8001294 <HAL_GetTick>
 8002326:	4602      	mov	r2, r0
 8002328:	69bb      	ldr	r3, [r7, #24]
 800232a:	1ad3      	subs	r3, r2, r3
 800232c:	683a      	ldr	r2, [r7, #0]
 800232e:	429a      	cmp	r2, r3
 8002330:	d803      	bhi.n	800233a <HAL_SPI_Transmit+0x168>
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002338:	d102      	bne.n	8002340 <HAL_SPI_Transmit+0x16e>
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d106      	bne.n	800234e <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2201      	movs	r2, #1
 8002348:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 800234c:	e07b      	b.n	8002446 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002352:	b29b      	uxth	r3, r3
 8002354:	2b00      	cmp	r3, #0
 8002356:	d1ca      	bne.n	80022ee <HAL_SPI_Transmit+0x11c>
 8002358:	e050      	b.n	80023fc <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d002      	beq.n	8002368 <HAL_SPI_Transmit+0x196>
 8002362:	8afb      	ldrh	r3, [r7, #22]
 8002364:	2b01      	cmp	r3, #1
 8002366:	d144      	bne.n	80023f2 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	330c      	adds	r3, #12
 8002372:	7812      	ldrb	r2, [r2, #0]
 8002374:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237a:	1c5a      	adds	r2, r3, #1
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002384:	b29b      	uxth	r3, r3
 8002386:	3b01      	subs	r3, #1
 8002388:	b29a      	uxth	r2, r3
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800238e:	e030      	b.n	80023f2 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	f003 0302 	and.w	r3, r3, #2
 800239a:	2b02      	cmp	r3, #2
 800239c:	d113      	bne.n	80023c6 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	330c      	adds	r3, #12
 80023a8:	7812      	ldrb	r2, [r2, #0]
 80023aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023ba:	b29b      	uxth	r3, r3
 80023bc:	3b01      	subs	r3, #1
 80023be:	b29a      	uxth	r2, r3
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	86da      	strh	r2, [r3, #54]	@ 0x36
 80023c4:	e015      	b.n	80023f2 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023c6:	f7fe ff65 	bl	8001294 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d803      	bhi.n	80023de <HAL_SPI_Transmit+0x20c>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023dc:	d102      	bne.n	80023e4 <HAL_SPI_Transmit+0x212>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d106      	bne.n	80023f2 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	2201      	movs	r2, #1
 80023ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 80023f0:	e029      	b.n	8002446 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d1c9      	bne.n	8002390 <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	6839      	ldr	r1, [r7, #0]
 8002400:	68f8      	ldr	r0, [r7, #12]
 8002402:	f000 f8b1 	bl	8002568 <SPI_EndRxTxTransaction>
 8002406:	4603      	mov	r3, r0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d002      	beq.n	8002412 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	2220      	movs	r2, #32
 8002410:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d10a      	bne.n	8002430 <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800241a:	2300      	movs	r3, #0
 800241c:	613b      	str	r3, [r7, #16]
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	613b      	str	r3, [r7, #16]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	613b      	str	r3, [r7, #16]
 800242e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002434:	2b00      	cmp	r3, #0
 8002436:	d002      	beq.n	800243e <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	77fb      	strb	r3, [r7, #31]
 800243c:	e003      	b.n	8002446 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	2201      	movs	r2, #1
 8002442:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 800244e:	7ffb      	ldrb	r3, [r7, #31]
}
 8002450:	4618      	mov	r0, r3
 8002452:	3720      	adds	r7, #32
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b088      	sub	sp, #32
 800245c:	af00      	add	r7, sp, #0
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	603b      	str	r3, [r7, #0]
 8002464:	4613      	mov	r3, r2
 8002466:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002468:	f7fe ff14 	bl	8001294 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002470:	1a9b      	subs	r3, r3, r2
 8002472:	683a      	ldr	r2, [r7, #0]
 8002474:	4413      	add	r3, r2
 8002476:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002478:	f7fe ff0c 	bl	8001294 <HAL_GetTick>
 800247c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800247e:	4b39      	ldr	r3, [pc, #228]	@ (8002564 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	015b      	lsls	r3, r3, #5
 8002484:	0d1b      	lsrs	r3, r3, #20
 8002486:	69fa      	ldr	r2, [r7, #28]
 8002488:	fb02 f303 	mul.w	r3, r2, r3
 800248c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800248e:	e054      	b.n	800253a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002496:	d050      	beq.n	800253a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002498:	f7fe fefc 	bl	8001294 <HAL_GetTick>
 800249c:	4602      	mov	r2, r0
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	1ad3      	subs	r3, r2, r3
 80024a2:	69fa      	ldr	r2, [r7, #28]
 80024a4:	429a      	cmp	r2, r3
 80024a6:	d902      	bls.n	80024ae <SPI_WaitFlagStateUntilTimeout+0x56>
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d13d      	bne.n	800252a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80024bc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80024c6:	d111      	bne.n	80024ec <SPI_WaitFlagStateUntilTimeout+0x94>
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024d0:	d004      	beq.n	80024dc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80024da:	d107      	bne.n	80024ec <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	681a      	ldr	r2, [r3, #0]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80024ea:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80024f4:	d10f      	bne.n	8002516 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002514:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	e017      	b.n	800255a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800252a:	697b      	ldr	r3, [r7, #20]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002530:	2300      	movs	r3, #0
 8002532:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	3b01      	subs	r3, #1
 8002538:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	4013      	ands	r3, r2
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	429a      	cmp	r2, r3
 8002548:	bf0c      	ite	eq
 800254a:	2301      	moveq	r3, #1
 800254c:	2300      	movne	r3, #0
 800254e:	b2db      	uxtb	r3, r3
 8002550:	461a      	mov	r2, r3
 8002552:	79fb      	ldrb	r3, [r7, #7]
 8002554:	429a      	cmp	r2, r3
 8002556:	d19b      	bne.n	8002490 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002558:	2300      	movs	r3, #0
}
 800255a:	4618      	mov	r0, r3
 800255c:	3720      	adds	r7, #32
 800255e:	46bd      	mov	sp, r7
 8002560:	bd80      	pop	{r7, pc}
 8002562:	bf00      	nop
 8002564:	20000018 	.word	0x20000018

08002568 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b088      	sub	sp, #32
 800256c:	af02      	add	r7, sp, #8
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	9300      	str	r3, [sp, #0]
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	2201      	movs	r2, #1
 800257c:	2102      	movs	r1, #2
 800257e:	68f8      	ldr	r0, [r7, #12]
 8002580:	f7ff ff6a 	bl	8002458 <SPI_WaitFlagStateUntilTimeout>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d007      	beq.n	800259a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800258e:	f043 0220 	orr.w	r2, r3, #32
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e032      	b.n	8002600 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800259a:	4b1b      	ldr	r3, [pc, #108]	@ (8002608 <SPI_EndRxTxTransaction+0xa0>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a1b      	ldr	r2, [pc, #108]	@ (800260c <SPI_EndRxTxTransaction+0xa4>)
 80025a0:	fba2 2303 	umull	r2, r3, r2, r3
 80025a4:	0d5b      	lsrs	r3, r3, #21
 80025a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80025aa:	fb02 f303 	mul.w	r3, r2, r3
 80025ae:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80025b8:	d112      	bne.n	80025e0 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	9300      	str	r3, [sp, #0]
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2200      	movs	r2, #0
 80025c2:	2180      	movs	r1, #128	@ 0x80
 80025c4:	68f8      	ldr	r0, [r7, #12]
 80025c6:	f7ff ff47 	bl	8002458 <SPI_WaitFlagStateUntilTimeout>
 80025ca:	4603      	mov	r3, r0
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d016      	beq.n	80025fe <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80025d4:	f043 0220 	orr.w	r2, r3, #32
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80025dc:	2303      	movs	r3, #3
 80025de:	e00f      	b.n	8002600 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d00a      	beq.n	80025fc <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	3b01      	subs	r3, #1
 80025ea:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025f6:	2b80      	cmp	r3, #128	@ 0x80
 80025f8:	d0f2      	beq.n	80025e0 <SPI_EndRxTxTransaction+0x78>
 80025fa:	e000      	b.n	80025fe <SPI_EndRxTxTransaction+0x96>
        break;
 80025fc:	bf00      	nop
  }

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	3718      	adds	r7, #24
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	20000018 	.word	0x20000018
 800260c:	165e9f81 	.word	0x165e9f81

08002610 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d101      	bne.n	8002622 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800261e:	2301      	movs	r3, #1
 8002620:	e041      	b.n	80026a6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002628:	b2db      	uxtb	r3, r3
 800262a:	2b00      	cmp	r3, #0
 800262c:	d106      	bne.n	800263c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2200      	movs	r2, #0
 8002632:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f839 	bl	80026ae <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2202      	movs	r2, #2
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3304      	adds	r3, #4
 800264c:	4619      	mov	r1, r3
 800264e:	4610      	mov	r0, r2
 8002650:	f000 f9b2 	bl	80029b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2201      	movs	r2, #1
 8002678:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2201      	movs	r2, #1
 8002680:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2201      	movs	r2, #1
 8002688:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	2201      	movs	r2, #1
 8002690:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2201      	movs	r2, #1
 8002698:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80026a4:	2300      	movs	r3, #0
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80026ae:	b480      	push	{r7}
 80026b0:	b083      	sub	sp, #12
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80026b6:	bf00      	nop
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
	...

080026c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b085      	sub	sp, #20
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d001      	beq.n	80026dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026d8:	2301      	movs	r3, #1
 80026da:	e044      	b.n	8002766 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2202      	movs	r2, #2
 80026e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	68da      	ldr	r2, [r3, #12]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f042 0201 	orr.w	r2, r2, #1
 80026f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a1e      	ldr	r2, [pc, #120]	@ (8002774 <HAL_TIM_Base_Start_IT+0xb0>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d018      	beq.n	8002730 <HAL_TIM_Base_Start_IT+0x6c>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002706:	d013      	beq.n	8002730 <HAL_TIM_Base_Start_IT+0x6c>
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a1a      	ldr	r2, [pc, #104]	@ (8002778 <HAL_TIM_Base_Start_IT+0xb4>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d00e      	beq.n	8002730 <HAL_TIM_Base_Start_IT+0x6c>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4a19      	ldr	r2, [pc, #100]	@ (800277c <HAL_TIM_Base_Start_IT+0xb8>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d009      	beq.n	8002730 <HAL_TIM_Base_Start_IT+0x6c>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a17      	ldr	r2, [pc, #92]	@ (8002780 <HAL_TIM_Base_Start_IT+0xbc>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d004      	beq.n	8002730 <HAL_TIM_Base_Start_IT+0x6c>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a16      	ldr	r2, [pc, #88]	@ (8002784 <HAL_TIM_Base_Start_IT+0xc0>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d111      	bne.n	8002754 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689b      	ldr	r3, [r3, #8]
 8002736:	f003 0307 	and.w	r3, r3, #7
 800273a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	2b06      	cmp	r3, #6
 8002740:	d010      	beq.n	8002764 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	681a      	ldr	r2, [r3, #0]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 0201 	orr.w	r2, r2, #1
 8002750:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002752:	e007      	b.n	8002764 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f042 0201 	orr.w	r2, r2, #1
 8002762:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40010000 	.word	0x40010000
 8002778:	40000400 	.word	0x40000400
 800277c:	40000800 	.word	0x40000800
 8002780:	40000c00 	.word	0x40000c00
 8002784:	40014000 	.word	0x40014000

08002788 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	b084      	sub	sp, #16
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f003 0302 	and.w	r3, r3, #2
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d020      	beq.n	80027ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	f003 0302 	and.w	r3, r3, #2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d01b      	beq.n	80027ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f06f 0202 	mvn.w	r2, #2
 80027bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	699b      	ldr	r3, [r3, #24]
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d003      	beq.n	80027da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 f8d2 	bl	800297c <HAL_TIM_IC_CaptureCallback>
 80027d8:	e005      	b.n	80027e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f000 f8c4 	bl	8002968 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f000 f8d5 	bl	8002990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2200      	movs	r2, #0
 80027ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	f003 0304 	and.w	r3, r3, #4
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d020      	beq.n	8002838 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	f003 0304 	and.w	r3, r3, #4
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d01b      	beq.n	8002838 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f06f 0204 	mvn.w	r2, #4
 8002808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2202      	movs	r2, #2
 800280e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	699b      	ldr	r3, [r3, #24]
 8002816:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800281a:	2b00      	cmp	r3, #0
 800281c:	d003      	beq.n	8002826 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f8ac 	bl	800297c <HAL_TIM_IC_CaptureCallback>
 8002824:	e005      	b.n	8002832 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002826:	6878      	ldr	r0, [r7, #4]
 8002828:	f000 f89e 	bl	8002968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f8af 	bl	8002990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2200      	movs	r2, #0
 8002836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	f003 0308 	and.w	r3, r3, #8
 800283e:	2b00      	cmp	r3, #0
 8002840:	d020      	beq.n	8002884 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	2b00      	cmp	r3, #0
 800284a:	d01b      	beq.n	8002884 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f06f 0208 	mvn.w	r2, #8
 8002854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2204      	movs	r2, #4
 800285a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	69db      	ldr	r3, [r3, #28]
 8002862:	f003 0303 	and.w	r3, r3, #3
 8002866:	2b00      	cmp	r3, #0
 8002868:	d003      	beq.n	8002872 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f886 	bl	800297c <HAL_TIM_IC_CaptureCallback>
 8002870:	e005      	b.n	800287e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f878 	bl	8002968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f000 f889 	bl	8002990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	2200      	movs	r2, #0
 8002882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	f003 0310 	and.w	r3, r3, #16
 800288a:	2b00      	cmp	r3, #0
 800288c:	d020      	beq.n	80028d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	2b00      	cmp	r3, #0
 8002896:	d01b      	beq.n	80028d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f06f 0210 	mvn.w	r2, #16
 80028a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2208      	movs	r2, #8
 80028a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f860 	bl	800297c <HAL_TIM_IC_CaptureCallback>
 80028bc:	e005      	b.n	80028ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f852 	bl	8002968 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f863 	bl	8002990 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d00c      	beq.n	80028f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	f003 0301 	and.w	r3, r3, #1
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d007      	beq.n	80028f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f06f 0201 	mvn.w	r2, #1
 80028ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	f7fe fa43 	bl	8000d7a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d00c      	beq.n	8002918 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002904:	2b00      	cmp	r3, #0
 8002906:	d007      	beq.n	8002918 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	f000 f8e6 	bl	8002ae4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800291e:	2b00      	cmp	r3, #0
 8002920:	d00c      	beq.n	800293c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002928:	2b00      	cmp	r3, #0
 800292a:	d007      	beq.n	800293c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f000 f834 	bl	80029a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	f003 0320 	and.w	r3, r3, #32
 8002942:	2b00      	cmp	r3, #0
 8002944:	d00c      	beq.n	8002960 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	f003 0320 	and.w	r3, r3, #32
 800294c:	2b00      	cmp	r3, #0
 800294e:	d007      	beq.n	8002960 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f06f 0220 	mvn.w	r2, #32
 8002958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f000 f8b8 	bl	8002ad0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002960:	bf00      	nop
 8002962:	3710      	adds	r7, #16
 8002964:	46bd      	mov	sp, r7
 8002966:	bd80      	pop	{r7, pc}

08002968 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002970:	bf00      	nop
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800297c:	b480      	push	{r7}
 800297e:	b083      	sub	sp, #12
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002984:	bf00      	nop
 8002986:	370c      	adds	r7, #12
 8002988:	46bd      	mov	sp, r7
 800298a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298e:	4770      	bx	lr

08002990 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002990:	b480      	push	{r7}
 8002992:	b083      	sub	sp, #12
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a2:	4770      	bx	lr

080029a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029ac:	bf00      	nop
 80029ae:	370c      	adds	r7, #12
 80029b0:	46bd      	mov	sp, r7
 80029b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b6:	4770      	bx	lr

080029b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
 80029c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a3a      	ldr	r2, [pc, #232]	@ (8002ab4 <TIM_Base_SetConfig+0xfc>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d00f      	beq.n	80029f0 <TIM_Base_SetConfig+0x38>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029d6:	d00b      	beq.n	80029f0 <TIM_Base_SetConfig+0x38>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	4a37      	ldr	r2, [pc, #220]	@ (8002ab8 <TIM_Base_SetConfig+0x100>)
 80029dc:	4293      	cmp	r3, r2
 80029de:	d007      	beq.n	80029f0 <TIM_Base_SetConfig+0x38>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	4a36      	ldr	r2, [pc, #216]	@ (8002abc <TIM_Base_SetConfig+0x104>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d003      	beq.n	80029f0 <TIM_Base_SetConfig+0x38>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	4a35      	ldr	r2, [pc, #212]	@ (8002ac0 <TIM_Base_SetConfig+0x108>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d108      	bne.n	8002a02 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80029f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	68fa      	ldr	r2, [r7, #12]
 80029fe:	4313      	orrs	r3, r2
 8002a00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a2b      	ldr	r2, [pc, #172]	@ (8002ab4 <TIM_Base_SetConfig+0xfc>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d01b      	beq.n	8002a42 <TIM_Base_SetConfig+0x8a>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a10:	d017      	beq.n	8002a42 <TIM_Base_SetConfig+0x8a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a28      	ldr	r2, [pc, #160]	@ (8002ab8 <TIM_Base_SetConfig+0x100>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d013      	beq.n	8002a42 <TIM_Base_SetConfig+0x8a>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a27      	ldr	r2, [pc, #156]	@ (8002abc <TIM_Base_SetConfig+0x104>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d00f      	beq.n	8002a42 <TIM_Base_SetConfig+0x8a>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a26      	ldr	r2, [pc, #152]	@ (8002ac0 <TIM_Base_SetConfig+0x108>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d00b      	beq.n	8002a42 <TIM_Base_SetConfig+0x8a>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a25      	ldr	r2, [pc, #148]	@ (8002ac4 <TIM_Base_SetConfig+0x10c>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d007      	beq.n	8002a42 <TIM_Base_SetConfig+0x8a>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a24      	ldr	r2, [pc, #144]	@ (8002ac8 <TIM_Base_SetConfig+0x110>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d003      	beq.n	8002a42 <TIM_Base_SetConfig+0x8a>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a23      	ldr	r2, [pc, #140]	@ (8002acc <TIM_Base_SetConfig+0x114>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d108      	bne.n	8002a54 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	68db      	ldr	r3, [r3, #12]
 8002a4e:	68fa      	ldr	r2, [r7, #12]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	695b      	ldr	r3, [r3, #20]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	68fa      	ldr	r2, [r7, #12]
 8002a66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a0e      	ldr	r2, [pc, #56]	@ (8002ab4 <TIM_Base_SetConfig+0xfc>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d103      	bne.n	8002a88 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	691a      	ldr	r2, [r3, #16]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	f003 0301 	and.w	r3, r3, #1
 8002a96:	2b01      	cmp	r3, #1
 8002a98:	d105      	bne.n	8002aa6 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	691b      	ldr	r3, [r3, #16]
 8002a9e:	f023 0201 	bic.w	r2, r3, #1
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	611a      	str	r2, [r3, #16]
  }
}
 8002aa6:	bf00      	nop
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	40010000 	.word	0x40010000
 8002ab8:	40000400 	.word	0x40000400
 8002abc:	40000800 	.word	0x40000800
 8002ac0:	40000c00 	.word	0x40000c00
 8002ac4:	40014000 	.word	0x40014000
 8002ac8:	40014400 	.word	0x40014400
 8002acc:	40014800 	.word	0x40014800

08002ad0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b082      	sub	sp, #8
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e042      	b.n	8002b90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d106      	bne.n	8002b24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b1e:	6878      	ldr	r0, [r7, #4]
 8002b20:	f7fe fa28 	bl	8000f74 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2224      	movs	r2, #36	@ 0x24
 8002b28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	68da      	ldr	r2, [r3, #12]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002b3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f000 f82b 	bl	8002b98 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	691a      	ldr	r2, [r3, #16]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002b50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	695a      	ldr	r2, [r3, #20]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002b60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	68da      	ldr	r2, [r3, #12]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002b70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2220      	movs	r2, #32
 8002b84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002b8e:	2300      	movs	r3, #0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3708      	adds	r7, #8
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002b98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b9c:	b0c0      	sub	sp, #256	@ 0x100
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bb4:	68d9      	ldr	r1, [r3, #12]
 8002bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	ea40 0301 	orr.w	r3, r0, r1
 8002bc0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002bc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bc6:	689a      	ldr	r2, [r3, #8]
 8002bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bcc:	691b      	ldr	r3, [r3, #16]
 8002bce:	431a      	orrs	r2, r3
 8002bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	431a      	orrs	r2, r3
 8002bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	4313      	orrs	r3, r2
 8002be0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002be4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002bf0:	f021 010c 	bic.w	r1, r1, #12
 8002bf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002bf8:	681a      	ldr	r2, [r3, #0]
 8002bfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002bfe:	430b      	orrs	r3, r1
 8002c00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002c02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	695b      	ldr	r3, [r3, #20]
 8002c0a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c12:	6999      	ldr	r1, [r3, #24]
 8002c14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c18:	681a      	ldr	r2, [r3, #0]
 8002c1a:	ea40 0301 	orr.w	r3, r0, r1
 8002c1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	4b8f      	ldr	r3, [pc, #572]	@ (8002e64 <UART_SetConfig+0x2cc>)
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d005      	beq.n	8002c38 <UART_SetConfig+0xa0>
 8002c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	4b8d      	ldr	r3, [pc, #564]	@ (8002e68 <UART_SetConfig+0x2d0>)
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d104      	bne.n	8002c42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002c38:	f7ff f9fc 	bl	8002034 <HAL_RCC_GetPCLK2Freq>
 8002c3c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002c40:	e003      	b.n	8002c4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002c42:	f7ff f9e3 	bl	800200c <HAL_RCC_GetPCLK1Freq>
 8002c46:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c4e:	69db      	ldr	r3, [r3, #28]
 8002c50:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002c54:	f040 810c 	bne.w	8002e70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002c58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002c62:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002c66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002c6a:	4622      	mov	r2, r4
 8002c6c:	462b      	mov	r3, r5
 8002c6e:	1891      	adds	r1, r2, r2
 8002c70:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002c72:	415b      	adcs	r3, r3
 8002c74:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002c76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002c7a:	4621      	mov	r1, r4
 8002c7c:	eb12 0801 	adds.w	r8, r2, r1
 8002c80:	4629      	mov	r1, r5
 8002c82:	eb43 0901 	adc.w	r9, r3, r1
 8002c86:	f04f 0200 	mov.w	r2, #0
 8002c8a:	f04f 0300 	mov.w	r3, #0
 8002c8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002c92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002c96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002c9a:	4690      	mov	r8, r2
 8002c9c:	4699      	mov	r9, r3
 8002c9e:	4623      	mov	r3, r4
 8002ca0:	eb18 0303 	adds.w	r3, r8, r3
 8002ca4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002ca8:	462b      	mov	r3, r5
 8002caa:	eb49 0303 	adc.w	r3, r9, r3
 8002cae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002cbe:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002cc2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	18db      	adds	r3, r3, r3
 8002cca:	653b      	str	r3, [r7, #80]	@ 0x50
 8002ccc:	4613      	mov	r3, r2
 8002cce:	eb42 0303 	adc.w	r3, r2, r3
 8002cd2:	657b      	str	r3, [r7, #84]	@ 0x54
 8002cd4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002cd8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002cdc:	f7fd fa80 	bl	80001e0 <__aeabi_uldivmod>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	460b      	mov	r3, r1
 8002ce4:	4b61      	ldr	r3, [pc, #388]	@ (8002e6c <UART_SetConfig+0x2d4>)
 8002ce6:	fba3 2302 	umull	r2, r3, r3, r2
 8002cea:	095b      	lsrs	r3, r3, #5
 8002cec:	011c      	lsls	r4, r3, #4
 8002cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002cf8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002cfc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002d00:	4642      	mov	r2, r8
 8002d02:	464b      	mov	r3, r9
 8002d04:	1891      	adds	r1, r2, r2
 8002d06:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002d08:	415b      	adcs	r3, r3
 8002d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002d0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002d10:	4641      	mov	r1, r8
 8002d12:	eb12 0a01 	adds.w	sl, r2, r1
 8002d16:	4649      	mov	r1, r9
 8002d18:	eb43 0b01 	adc.w	fp, r3, r1
 8002d1c:	f04f 0200 	mov.w	r2, #0
 8002d20:	f04f 0300 	mov.w	r3, #0
 8002d24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002d28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002d2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002d30:	4692      	mov	sl, r2
 8002d32:	469b      	mov	fp, r3
 8002d34:	4643      	mov	r3, r8
 8002d36:	eb1a 0303 	adds.w	r3, sl, r3
 8002d3a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d3e:	464b      	mov	r3, r9
 8002d40:	eb4b 0303 	adc.w	r3, fp, r3
 8002d44:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	2200      	movs	r2, #0
 8002d50:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d54:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002d58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	18db      	adds	r3, r3, r3
 8002d60:	643b      	str	r3, [r7, #64]	@ 0x40
 8002d62:	4613      	mov	r3, r2
 8002d64:	eb42 0303 	adc.w	r3, r2, r3
 8002d68:	647b      	str	r3, [r7, #68]	@ 0x44
 8002d6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002d6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002d72:	f7fd fa35 	bl	80001e0 <__aeabi_uldivmod>
 8002d76:	4602      	mov	r2, r0
 8002d78:	460b      	mov	r3, r1
 8002d7a:	4611      	mov	r1, r2
 8002d7c:	4b3b      	ldr	r3, [pc, #236]	@ (8002e6c <UART_SetConfig+0x2d4>)
 8002d7e:	fba3 2301 	umull	r2, r3, r3, r1
 8002d82:	095b      	lsrs	r3, r3, #5
 8002d84:	2264      	movs	r2, #100	@ 0x64
 8002d86:	fb02 f303 	mul.w	r3, r2, r3
 8002d8a:	1acb      	subs	r3, r1, r3
 8002d8c:	00db      	lsls	r3, r3, #3
 8002d8e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002d92:	4b36      	ldr	r3, [pc, #216]	@ (8002e6c <UART_SetConfig+0x2d4>)
 8002d94:	fba3 2302 	umull	r2, r3, r3, r2
 8002d98:	095b      	lsrs	r3, r3, #5
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002da0:	441c      	add	r4, r3
 8002da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002da6:	2200      	movs	r2, #0
 8002da8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002dac:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002db0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002db4:	4642      	mov	r2, r8
 8002db6:	464b      	mov	r3, r9
 8002db8:	1891      	adds	r1, r2, r2
 8002dba:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002dbc:	415b      	adcs	r3, r3
 8002dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002dc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002dc4:	4641      	mov	r1, r8
 8002dc6:	1851      	adds	r1, r2, r1
 8002dc8:	6339      	str	r1, [r7, #48]	@ 0x30
 8002dca:	4649      	mov	r1, r9
 8002dcc:	414b      	adcs	r3, r1
 8002dce:	637b      	str	r3, [r7, #52]	@ 0x34
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	f04f 0300 	mov.w	r3, #0
 8002dd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002ddc:	4659      	mov	r1, fp
 8002dde:	00cb      	lsls	r3, r1, #3
 8002de0:	4651      	mov	r1, sl
 8002de2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002de6:	4651      	mov	r1, sl
 8002de8:	00ca      	lsls	r2, r1, #3
 8002dea:	4610      	mov	r0, r2
 8002dec:	4619      	mov	r1, r3
 8002dee:	4603      	mov	r3, r0
 8002df0:	4642      	mov	r2, r8
 8002df2:	189b      	adds	r3, r3, r2
 8002df4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002df8:	464b      	mov	r3, r9
 8002dfa:	460a      	mov	r2, r1
 8002dfc:	eb42 0303 	adc.w	r3, r2, r3
 8002e00:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002e10:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002e14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002e18:	460b      	mov	r3, r1
 8002e1a:	18db      	adds	r3, r3, r3
 8002e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002e1e:	4613      	mov	r3, r2
 8002e20:	eb42 0303 	adc.w	r3, r2, r3
 8002e24:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002e26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002e2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002e2e:	f7fd f9d7 	bl	80001e0 <__aeabi_uldivmod>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4b0d      	ldr	r3, [pc, #52]	@ (8002e6c <UART_SetConfig+0x2d4>)
 8002e38:	fba3 1302 	umull	r1, r3, r3, r2
 8002e3c:	095b      	lsrs	r3, r3, #5
 8002e3e:	2164      	movs	r1, #100	@ 0x64
 8002e40:	fb01 f303 	mul.w	r3, r1, r3
 8002e44:	1ad3      	subs	r3, r2, r3
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	3332      	adds	r3, #50	@ 0x32
 8002e4a:	4a08      	ldr	r2, [pc, #32]	@ (8002e6c <UART_SetConfig+0x2d4>)
 8002e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e50:	095b      	lsrs	r3, r3, #5
 8002e52:	f003 0207 	and.w	r2, r3, #7
 8002e56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4422      	add	r2, r4
 8002e5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002e60:	e106      	b.n	8003070 <UART_SetConfig+0x4d8>
 8002e62:	bf00      	nop
 8002e64:	40011000 	.word	0x40011000
 8002e68:	40011400 	.word	0x40011400
 8002e6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002e70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e74:	2200      	movs	r2, #0
 8002e76:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002e7a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002e7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002e82:	4642      	mov	r2, r8
 8002e84:	464b      	mov	r3, r9
 8002e86:	1891      	adds	r1, r2, r2
 8002e88:	6239      	str	r1, [r7, #32]
 8002e8a:	415b      	adcs	r3, r3
 8002e8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e92:	4641      	mov	r1, r8
 8002e94:	1854      	adds	r4, r2, r1
 8002e96:	4649      	mov	r1, r9
 8002e98:	eb43 0501 	adc.w	r5, r3, r1
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	f04f 0300 	mov.w	r3, #0
 8002ea4:	00eb      	lsls	r3, r5, #3
 8002ea6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002eaa:	00e2      	lsls	r2, r4, #3
 8002eac:	4614      	mov	r4, r2
 8002eae:	461d      	mov	r5, r3
 8002eb0:	4643      	mov	r3, r8
 8002eb2:	18e3      	adds	r3, r4, r3
 8002eb4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002eb8:	464b      	mov	r3, r9
 8002eba:	eb45 0303 	adc.w	r3, r5, r3
 8002ebe:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002ece:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002ed2:	f04f 0200 	mov.w	r2, #0
 8002ed6:	f04f 0300 	mov.w	r3, #0
 8002eda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002ede:	4629      	mov	r1, r5
 8002ee0:	008b      	lsls	r3, r1, #2
 8002ee2:	4621      	mov	r1, r4
 8002ee4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ee8:	4621      	mov	r1, r4
 8002eea:	008a      	lsls	r2, r1, #2
 8002eec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002ef0:	f7fd f976 	bl	80001e0 <__aeabi_uldivmod>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	4b60      	ldr	r3, [pc, #384]	@ (800307c <UART_SetConfig+0x4e4>)
 8002efa:	fba3 2302 	umull	r2, r3, r3, r2
 8002efe:	095b      	lsrs	r3, r3, #5
 8002f00:	011c      	lsls	r4, r3, #4
 8002f02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f06:	2200      	movs	r2, #0
 8002f08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002f0c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002f10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002f14:	4642      	mov	r2, r8
 8002f16:	464b      	mov	r3, r9
 8002f18:	1891      	adds	r1, r2, r2
 8002f1a:	61b9      	str	r1, [r7, #24]
 8002f1c:	415b      	adcs	r3, r3
 8002f1e:	61fb      	str	r3, [r7, #28]
 8002f20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f24:	4641      	mov	r1, r8
 8002f26:	1851      	adds	r1, r2, r1
 8002f28:	6139      	str	r1, [r7, #16]
 8002f2a:	4649      	mov	r1, r9
 8002f2c:	414b      	adcs	r3, r1
 8002f2e:	617b      	str	r3, [r7, #20]
 8002f30:	f04f 0200 	mov.w	r2, #0
 8002f34:	f04f 0300 	mov.w	r3, #0
 8002f38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f3c:	4659      	mov	r1, fp
 8002f3e:	00cb      	lsls	r3, r1, #3
 8002f40:	4651      	mov	r1, sl
 8002f42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002f46:	4651      	mov	r1, sl
 8002f48:	00ca      	lsls	r2, r1, #3
 8002f4a:	4610      	mov	r0, r2
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4603      	mov	r3, r0
 8002f50:	4642      	mov	r2, r8
 8002f52:	189b      	adds	r3, r3, r2
 8002f54:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002f58:	464b      	mov	r3, r9
 8002f5a:	460a      	mov	r2, r1
 8002f5c:	eb42 0303 	adc.w	r3, r2, r3
 8002f60:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002f64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002f6e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002f70:	f04f 0200 	mov.w	r2, #0
 8002f74:	f04f 0300 	mov.w	r3, #0
 8002f78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002f7c:	4649      	mov	r1, r9
 8002f7e:	008b      	lsls	r3, r1, #2
 8002f80:	4641      	mov	r1, r8
 8002f82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002f86:	4641      	mov	r1, r8
 8002f88:	008a      	lsls	r2, r1, #2
 8002f8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002f8e:	f7fd f927 	bl	80001e0 <__aeabi_uldivmod>
 8002f92:	4602      	mov	r2, r0
 8002f94:	460b      	mov	r3, r1
 8002f96:	4611      	mov	r1, r2
 8002f98:	4b38      	ldr	r3, [pc, #224]	@ (800307c <UART_SetConfig+0x4e4>)
 8002f9a:	fba3 2301 	umull	r2, r3, r3, r1
 8002f9e:	095b      	lsrs	r3, r3, #5
 8002fa0:	2264      	movs	r2, #100	@ 0x64
 8002fa2:	fb02 f303 	mul.w	r3, r2, r3
 8002fa6:	1acb      	subs	r3, r1, r3
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	3332      	adds	r3, #50	@ 0x32
 8002fac:	4a33      	ldr	r2, [pc, #204]	@ (800307c <UART_SetConfig+0x4e4>)
 8002fae:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb2:	095b      	lsrs	r3, r3, #5
 8002fb4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002fb8:	441c      	add	r4, r3
 8002fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	673b      	str	r3, [r7, #112]	@ 0x70
 8002fc2:	677a      	str	r2, [r7, #116]	@ 0x74
 8002fc4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002fc8:	4642      	mov	r2, r8
 8002fca:	464b      	mov	r3, r9
 8002fcc:	1891      	adds	r1, r2, r2
 8002fce:	60b9      	str	r1, [r7, #8]
 8002fd0:	415b      	adcs	r3, r3
 8002fd2:	60fb      	str	r3, [r7, #12]
 8002fd4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002fd8:	4641      	mov	r1, r8
 8002fda:	1851      	adds	r1, r2, r1
 8002fdc:	6039      	str	r1, [r7, #0]
 8002fde:	4649      	mov	r1, r9
 8002fe0:	414b      	adcs	r3, r1
 8002fe2:	607b      	str	r3, [r7, #4]
 8002fe4:	f04f 0200 	mov.w	r2, #0
 8002fe8:	f04f 0300 	mov.w	r3, #0
 8002fec:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ff0:	4659      	mov	r1, fp
 8002ff2:	00cb      	lsls	r3, r1, #3
 8002ff4:	4651      	mov	r1, sl
 8002ff6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ffa:	4651      	mov	r1, sl
 8002ffc:	00ca      	lsls	r2, r1, #3
 8002ffe:	4610      	mov	r0, r2
 8003000:	4619      	mov	r1, r3
 8003002:	4603      	mov	r3, r0
 8003004:	4642      	mov	r2, r8
 8003006:	189b      	adds	r3, r3, r2
 8003008:	66bb      	str	r3, [r7, #104]	@ 0x68
 800300a:	464b      	mov	r3, r9
 800300c:	460a      	mov	r2, r1
 800300e:	eb42 0303 	adc.w	r3, r2, r3
 8003012:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	2200      	movs	r2, #0
 800301c:	663b      	str	r3, [r7, #96]	@ 0x60
 800301e:	667a      	str	r2, [r7, #100]	@ 0x64
 8003020:	f04f 0200 	mov.w	r2, #0
 8003024:	f04f 0300 	mov.w	r3, #0
 8003028:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800302c:	4649      	mov	r1, r9
 800302e:	008b      	lsls	r3, r1, #2
 8003030:	4641      	mov	r1, r8
 8003032:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003036:	4641      	mov	r1, r8
 8003038:	008a      	lsls	r2, r1, #2
 800303a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800303e:	f7fd f8cf 	bl	80001e0 <__aeabi_uldivmod>
 8003042:	4602      	mov	r2, r0
 8003044:	460b      	mov	r3, r1
 8003046:	4b0d      	ldr	r3, [pc, #52]	@ (800307c <UART_SetConfig+0x4e4>)
 8003048:	fba3 1302 	umull	r1, r3, r3, r2
 800304c:	095b      	lsrs	r3, r3, #5
 800304e:	2164      	movs	r1, #100	@ 0x64
 8003050:	fb01 f303 	mul.w	r3, r1, r3
 8003054:	1ad3      	subs	r3, r2, r3
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	3332      	adds	r3, #50	@ 0x32
 800305a:	4a08      	ldr	r2, [pc, #32]	@ (800307c <UART_SetConfig+0x4e4>)
 800305c:	fba2 2303 	umull	r2, r3, r2, r3
 8003060:	095b      	lsrs	r3, r3, #5
 8003062:	f003 020f 	and.w	r2, r3, #15
 8003066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4422      	add	r2, r4
 800306e:	609a      	str	r2, [r3, #8]
}
 8003070:	bf00      	nop
 8003072:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003076:	46bd      	mov	sp, r7
 8003078:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800307c:	51eb851f 	.word	0x51eb851f

08003080 <__NVIC_SetPriority>:
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	4603      	mov	r3, r0
 8003088:	6039      	str	r1, [r7, #0]
 800308a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800308c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003090:	2b00      	cmp	r3, #0
 8003092:	db0a      	blt.n	80030aa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	b2da      	uxtb	r2, r3
 8003098:	490c      	ldr	r1, [pc, #48]	@ (80030cc <__NVIC_SetPriority+0x4c>)
 800309a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309e:	0112      	lsls	r2, r2, #4
 80030a0:	b2d2      	uxtb	r2, r2
 80030a2:	440b      	add	r3, r1
 80030a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80030a8:	e00a      	b.n	80030c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	b2da      	uxtb	r2, r3
 80030ae:	4908      	ldr	r1, [pc, #32]	@ (80030d0 <__NVIC_SetPriority+0x50>)
 80030b0:	79fb      	ldrb	r3, [r7, #7]
 80030b2:	f003 030f 	and.w	r3, r3, #15
 80030b6:	3b04      	subs	r3, #4
 80030b8:	0112      	lsls	r2, r2, #4
 80030ba:	b2d2      	uxtb	r2, r2
 80030bc:	440b      	add	r3, r1
 80030be:	761a      	strb	r2, [r3, #24]
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	e000e100 	.word	0xe000e100
 80030d0:	e000ed00 	.word	0xe000ed00

080030d4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80030d4:	b580      	push	{r7, lr}
 80030d6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80030d8:	4b05      	ldr	r3, [pc, #20]	@ (80030f0 <SysTick_Handler+0x1c>)
 80030da:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80030dc:	f001 fd18 	bl	8004b10 <xTaskGetSchedulerState>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d001      	beq.n	80030ea <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80030e6:	f002 fb0f 	bl	8005708 <xPortSysTickHandler>
  }
}
 80030ea:	bf00      	nop
 80030ec:	bd80      	pop	{r7, pc}
 80030ee:	bf00      	nop
 80030f0:	e000e010 	.word	0xe000e010

080030f4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80030f4:	b580      	push	{r7, lr}
 80030f6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80030f8:	2100      	movs	r1, #0
 80030fa:	f06f 0004 	mvn.w	r0, #4
 80030fe:	f7ff ffbf 	bl	8003080 <__NVIC_SetPriority>
#endif
}
 8003102:	bf00      	nop
 8003104:	bd80      	pop	{r7, pc}
	...

08003108 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800310e:	f3ef 8305 	mrs	r3, IPSR
 8003112:	603b      	str	r3, [r7, #0]
  return(result);
 8003114:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003116:	2b00      	cmp	r3, #0
 8003118:	d003      	beq.n	8003122 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800311a:	f06f 0305 	mvn.w	r3, #5
 800311e:	607b      	str	r3, [r7, #4]
 8003120:	e00c      	b.n	800313c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003122:	4b0a      	ldr	r3, [pc, #40]	@ (800314c <osKernelInitialize+0x44>)
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d105      	bne.n	8003136 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800312a:	4b08      	ldr	r3, [pc, #32]	@ (800314c <osKernelInitialize+0x44>)
 800312c:	2201      	movs	r2, #1
 800312e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003130:	2300      	movs	r3, #0
 8003132:	607b      	str	r3, [r7, #4]
 8003134:	e002      	b.n	800313c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003136:	f04f 33ff 	mov.w	r3, #4294967295
 800313a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800313c:	687b      	ldr	r3, [r7, #4]
}
 800313e:	4618      	mov	r0, r3
 8003140:	370c      	adds	r7, #12
 8003142:	46bd      	mov	sp, r7
 8003144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003148:	4770      	bx	lr
 800314a:	bf00      	nop
 800314c:	200001e8 	.word	0x200001e8

08003150 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003150:	b580      	push	{r7, lr}
 8003152:	b082      	sub	sp, #8
 8003154:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003156:	f3ef 8305 	mrs	r3, IPSR
 800315a:	603b      	str	r3, [r7, #0]
  return(result);
 800315c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <osKernelStart+0x1a>
    stat = osErrorISR;
 8003162:	f06f 0305 	mvn.w	r3, #5
 8003166:	607b      	str	r3, [r7, #4]
 8003168:	e010      	b.n	800318c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800316a:	4b0b      	ldr	r3, [pc, #44]	@ (8003198 <osKernelStart+0x48>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d109      	bne.n	8003186 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003172:	f7ff ffbf 	bl	80030f4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003176:	4b08      	ldr	r3, [pc, #32]	@ (8003198 <osKernelStart+0x48>)
 8003178:	2202      	movs	r2, #2
 800317a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800317c:	f001 f87a 	bl	8004274 <vTaskStartScheduler>
      stat = osOK;
 8003180:	2300      	movs	r3, #0
 8003182:	607b      	str	r3, [r7, #4]
 8003184:	e002      	b.n	800318c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003186:	f04f 33ff 	mov.w	r3, #4294967295
 800318a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800318c:	687b      	ldr	r3, [r7, #4]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	200001e8 	.word	0x200001e8

0800319c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800319c:	b580      	push	{r7, lr}
 800319e:	b08e      	sub	sp, #56	@ 0x38
 80031a0:	af04      	add	r7, sp, #16
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80031a8:	2300      	movs	r3, #0
 80031aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80031ac:	f3ef 8305 	mrs	r3, IPSR
 80031b0:	617b      	str	r3, [r7, #20]
  return(result);
 80031b2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d17e      	bne.n	80032b6 <osThreadNew+0x11a>
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d07b      	beq.n	80032b6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80031be:	2380      	movs	r3, #128	@ 0x80
 80031c0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80031c2:	2318      	movs	r3, #24
 80031c4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80031c6:	2300      	movs	r3, #0
 80031c8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80031ca:	f04f 33ff 	mov.w	r3, #4294967295
 80031ce:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d045      	beq.n	8003262 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d002      	beq.n	80031e4 <osThreadNew+0x48>
        name = attr->name;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	699b      	ldr	r3, [r3, #24]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d002      	beq.n	80031f2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	699b      	ldr	r3, [r3, #24]
 80031f0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80031f2:	69fb      	ldr	r3, [r7, #28]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d008      	beq.n	800320a <osThreadNew+0x6e>
 80031f8:	69fb      	ldr	r3, [r7, #28]
 80031fa:	2b38      	cmp	r3, #56	@ 0x38
 80031fc:	d805      	bhi.n	800320a <osThreadNew+0x6e>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	2b00      	cmp	r3, #0
 8003208:	d001      	beq.n	800320e <osThreadNew+0x72>
        return (NULL);
 800320a:	2300      	movs	r3, #0
 800320c:	e054      	b.n	80032b8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d003      	beq.n	800321e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	089b      	lsrs	r3, r3, #2
 800321c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	689b      	ldr	r3, [r3, #8]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00e      	beq.n	8003244 <osThreadNew+0xa8>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	68db      	ldr	r3, [r3, #12]
 800322a:	2b5b      	cmp	r3, #91	@ 0x5b
 800322c:	d90a      	bls.n	8003244 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003232:	2b00      	cmp	r3, #0
 8003234:	d006      	beq.n	8003244 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	695b      	ldr	r3, [r3, #20]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d002      	beq.n	8003244 <osThreadNew+0xa8>
        mem = 1;
 800323e:	2301      	movs	r3, #1
 8003240:	61bb      	str	r3, [r7, #24]
 8003242:	e010      	b.n	8003266 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d10c      	bne.n	8003266 <osThreadNew+0xca>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d108      	bne.n	8003266 <osThreadNew+0xca>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	691b      	ldr	r3, [r3, #16]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d104      	bne.n	8003266 <osThreadNew+0xca>
          mem = 0;
 800325c:	2300      	movs	r3, #0
 800325e:	61bb      	str	r3, [r7, #24]
 8003260:	e001      	b.n	8003266 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003262:	2300      	movs	r3, #0
 8003264:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003266:	69bb      	ldr	r3, [r7, #24]
 8003268:	2b01      	cmp	r3, #1
 800326a:	d110      	bne.n	800328e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003274:	9202      	str	r2, [sp, #8]
 8003276:	9301      	str	r3, [sp, #4]
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	9300      	str	r3, [sp, #0]
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	6a3a      	ldr	r2, [r7, #32]
 8003280:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003282:	68f8      	ldr	r0, [r7, #12]
 8003284:	f000 fe1a 	bl	8003ebc <xTaskCreateStatic>
 8003288:	4603      	mov	r3, r0
 800328a:	613b      	str	r3, [r7, #16]
 800328c:	e013      	b.n	80032b6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d110      	bne.n	80032b6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003294:	6a3b      	ldr	r3, [r7, #32]
 8003296:	b29a      	uxth	r2, r3
 8003298:	f107 0310 	add.w	r3, r7, #16
 800329c:	9301      	str	r3, [sp, #4]
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80032a6:	68f8      	ldr	r0, [r7, #12]
 80032a8:	f000 fe68 	bl	8003f7c <xTaskCreate>
 80032ac:	4603      	mov	r3, r0
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d001      	beq.n	80032b6 <osThreadNew+0x11a>
            hTask = NULL;
 80032b2:	2300      	movs	r3, #0
 80032b4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80032b6:	693b      	ldr	r3, [r7, #16]
}
 80032b8:	4618      	mov	r0, r3
 80032ba:	3728      	adds	r7, #40	@ 0x28
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80032c8:	f3ef 8305 	mrs	r3, IPSR
 80032cc:	60bb      	str	r3, [r7, #8]
  return(result);
 80032ce:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d003      	beq.n	80032dc <osDelay+0x1c>
    stat = osErrorISR;
 80032d4:	f06f 0305 	mvn.w	r3, #5
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	e007      	b.n	80032ec <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80032dc:	2300      	movs	r3, #0
 80032de:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d002      	beq.n	80032ec <osDelay+0x2c>
      vTaskDelay(ticks);
 80032e6:	6878      	ldr	r0, [r7, #4]
 80032e8:	f000 ff8e 	bl	8004208 <vTaskDelay>
    }
  }

  return (stat);
 80032ec:	68fb      	ldr	r3, [r7, #12]
}
 80032ee:	4618      	mov	r0, r3
 80032f0:	3710      	adds	r7, #16
 80032f2:	46bd      	mov	sp, r7
 80032f4:	bd80      	pop	{r7, pc}
	...

080032f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80032f8:	b480      	push	{r7}
 80032fa:	b085      	sub	sp, #20
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	4a07      	ldr	r2, [pc, #28]	@ (8003324 <vApplicationGetIdleTaskMemory+0x2c>)
 8003308:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	4a06      	ldr	r2, [pc, #24]	@ (8003328 <vApplicationGetIdleTaskMemory+0x30>)
 800330e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2280      	movs	r2, #128	@ 0x80
 8003314:	601a      	str	r2, [r3, #0]
}
 8003316:	bf00      	nop
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	200001ec 	.word	0x200001ec
 8003328:	20000248 	.word	0x20000248

0800332c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	60f8      	str	r0, [r7, #12]
 8003334:	60b9      	str	r1, [r7, #8]
 8003336:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4a07      	ldr	r2, [pc, #28]	@ (8003358 <vApplicationGetTimerTaskMemory+0x2c>)
 800333c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	4a06      	ldr	r2, [pc, #24]	@ (800335c <vApplicationGetTimerTaskMemory+0x30>)
 8003342:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800334a:	601a      	str	r2, [r3, #0]
}
 800334c:	bf00      	nop
 800334e:	3714      	adds	r7, #20
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr
 8003358:	20000448 	.word	0x20000448
 800335c:	200004a4 	.word	0x200004a4

08003360 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003360:	b480      	push	{r7}
 8003362:	b083      	sub	sp, #12
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	f103 0208 	add.w	r2, r3, #8
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	f04f 32ff 	mov.w	r2, #4294967295
 8003378:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	f103 0208 	add.w	r2, r3, #8
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	f103 0208 	add.w	r2, r3, #8
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003394:	bf00      	nop
 8003396:	370c      	adds	r7, #12
 8003398:	46bd      	mov	sp, r7
 800339a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800339e:	4770      	bx	lr

080033a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80033a0:	b480      	push	{r7}
 80033a2:	b083      	sub	sp, #12
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80033ae:	bf00      	nop
 80033b0:	370c      	adds	r7, #12
 80033b2:	46bd      	mov	sp, r7
 80033b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b8:	4770      	bx	lr

080033ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80033ba:	b480      	push	{r7}
 80033bc:	b085      	sub	sp, #20
 80033be:	af00      	add	r7, sp, #0
 80033c0:	6078      	str	r0, [r7, #4]
 80033c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	68fa      	ldr	r2, [r7, #12]
 80033ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	683a      	ldr	r2, [r7, #0]
 80033de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	601a      	str	r2, [r3, #0]
}
 80033f6:	bf00      	nop
 80033f8:	3714      	adds	r7, #20
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003402:	b480      	push	{r7}
 8003404:	b085      	sub	sp, #20
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
 800340a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003412:	68bb      	ldr	r3, [r7, #8]
 8003414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003418:	d103      	bne.n	8003422 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	60fb      	str	r3, [r7, #12]
 8003420:	e00c      	b.n	800343c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	3308      	adds	r3, #8
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	e002      	b.n	8003430 <vListInsert+0x2e>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	60fb      	str	r3, [r7, #12]
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	68ba      	ldr	r2, [r7, #8]
 8003438:	429a      	cmp	r2, r3
 800343a:	d2f6      	bcs.n	800342a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	685a      	ldr	r2, [r3, #4]
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	683a      	ldr	r2, [r7, #0]
 800344a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	68fa      	ldr	r2, [r7, #12]
 8003450:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	683a      	ldr	r2, [r7, #0]
 8003456:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	1c5a      	adds	r2, r3, #1
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	601a      	str	r2, [r3, #0]
}
 8003468:	bf00      	nop
 800346a:	3714      	adds	r7, #20
 800346c:	46bd      	mov	sp, r7
 800346e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003472:	4770      	bx	lr

08003474 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	691b      	ldr	r3, [r3, #16]
 8003480:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	6892      	ldr	r2, [r2, #8]
 800348a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	687a      	ldr	r2, [r7, #4]
 8003492:	6852      	ldr	r2, [r2, #4]
 8003494:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	429a      	cmp	r2, r3
 800349e:	d103      	bne.n	80034a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	689a      	ldr	r2, [r3, #8]
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	1e5a      	subs	r2, r3, #1
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	3714      	adds	r7, #20
 80034c0:	46bd      	mov	sp, r7
 80034c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c6:	4770      	bx	lr

080034c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d10b      	bne.n	80034f4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80034dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80034e0:	f383 8811 	msr	BASEPRI, r3
 80034e4:	f3bf 8f6f 	isb	sy
 80034e8:	f3bf 8f4f 	dsb	sy
 80034ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80034ee:	bf00      	nop
 80034f0:	bf00      	nop
 80034f2:	e7fd      	b.n	80034f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80034f4:	f002 f878 	bl	80055e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003500:	68f9      	ldr	r1, [r7, #12]
 8003502:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003504:	fb01 f303 	mul.w	r3, r1, r3
 8003508:	441a      	add	r2, r3
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	681a      	ldr	r2, [r3, #0]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003524:	3b01      	subs	r3, #1
 8003526:	68f9      	ldr	r1, [r7, #12]
 8003528:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800352a:	fb01 f303 	mul.w	r3, r1, r3
 800352e:	441a      	add	r2, r3
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	22ff      	movs	r2, #255	@ 0xff
 8003538:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	22ff      	movs	r2, #255	@ 0xff
 8003540:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d114      	bne.n	8003574 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	2b00      	cmp	r3, #0
 8003550:	d01a      	beq.n	8003588 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	3310      	adds	r3, #16
 8003556:	4618      	mov	r0, r3
 8003558:	f001 f91a 	bl	8004790 <xTaskRemoveFromEventList>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d012      	beq.n	8003588 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003562:	4b0d      	ldr	r3, [pc, #52]	@ (8003598 <xQueueGenericReset+0xd0>)
 8003564:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003568:	601a      	str	r2, [r3, #0]
 800356a:	f3bf 8f4f 	dsb	sy
 800356e:	f3bf 8f6f 	isb	sy
 8003572:	e009      	b.n	8003588 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	3310      	adds	r3, #16
 8003578:	4618      	mov	r0, r3
 800357a:	f7ff fef1 	bl	8003360 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	3324      	adds	r3, #36	@ 0x24
 8003582:	4618      	mov	r0, r3
 8003584:	f7ff feec 	bl	8003360 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003588:	f002 f860 	bl	800564c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800358c:	2301      	movs	r3, #1
}
 800358e:	4618      	mov	r0, r3
 8003590:	3710      	adds	r7, #16
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	e000ed04 	.word	0xe000ed04

0800359c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800359c:	b580      	push	{r7, lr}
 800359e:	b08e      	sub	sp, #56	@ 0x38
 80035a0:	af02      	add	r7, sp, #8
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
 80035a8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10b      	bne.n	80035c8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80035b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035b4:	f383 8811 	msr	BASEPRI, r3
 80035b8:	f3bf 8f6f 	isb	sy
 80035bc:	f3bf 8f4f 	dsb	sy
 80035c0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80035c2:	bf00      	nop
 80035c4:	bf00      	nop
 80035c6:	e7fd      	b.n	80035c4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d10b      	bne.n	80035e6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80035ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80035d2:	f383 8811 	msr	BASEPRI, r3
 80035d6:	f3bf 8f6f 	isb	sy
 80035da:	f3bf 8f4f 	dsb	sy
 80035de:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80035e0:	bf00      	nop
 80035e2:	bf00      	nop
 80035e4:	e7fd      	b.n	80035e2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d002      	beq.n	80035f2 <xQueueGenericCreateStatic+0x56>
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d001      	beq.n	80035f6 <xQueueGenericCreateStatic+0x5a>
 80035f2:	2301      	movs	r3, #1
 80035f4:	e000      	b.n	80035f8 <xQueueGenericCreateStatic+0x5c>
 80035f6:	2300      	movs	r3, #0
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d10b      	bne.n	8003614 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80035fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003600:	f383 8811 	msr	BASEPRI, r3
 8003604:	f3bf 8f6f 	isb	sy
 8003608:	f3bf 8f4f 	dsb	sy
 800360c:	623b      	str	r3, [r7, #32]
}
 800360e:	bf00      	nop
 8003610:	bf00      	nop
 8003612:	e7fd      	b.n	8003610 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d102      	bne.n	8003620 <xQueueGenericCreateStatic+0x84>
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <xQueueGenericCreateStatic+0x88>
 8003620:	2301      	movs	r3, #1
 8003622:	e000      	b.n	8003626 <xQueueGenericCreateStatic+0x8a>
 8003624:	2300      	movs	r3, #0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d10b      	bne.n	8003642 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800362a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800362e:	f383 8811 	msr	BASEPRI, r3
 8003632:	f3bf 8f6f 	isb	sy
 8003636:	f3bf 8f4f 	dsb	sy
 800363a:	61fb      	str	r3, [r7, #28]
}
 800363c:	bf00      	nop
 800363e:	bf00      	nop
 8003640:	e7fd      	b.n	800363e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003642:	2350      	movs	r3, #80	@ 0x50
 8003644:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003646:	697b      	ldr	r3, [r7, #20]
 8003648:	2b50      	cmp	r3, #80	@ 0x50
 800364a:	d00b      	beq.n	8003664 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800364c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003650:	f383 8811 	msr	BASEPRI, r3
 8003654:	f3bf 8f6f 	isb	sy
 8003658:	f3bf 8f4f 	dsb	sy
 800365c:	61bb      	str	r3, [r7, #24]
}
 800365e:	bf00      	nop
 8003660:	bf00      	nop
 8003662:	e7fd      	b.n	8003660 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003664:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800366a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800366c:	2b00      	cmp	r3, #0
 800366e:	d00d      	beq.n	800368c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003670:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003672:	2201      	movs	r2, #1
 8003674:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003678:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800367c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800367e:	9300      	str	r3, [sp, #0]
 8003680:	4613      	mov	r3, r2
 8003682:	687a      	ldr	r2, [r7, #4]
 8003684:	68b9      	ldr	r1, [r7, #8]
 8003686:	68f8      	ldr	r0, [r7, #12]
 8003688:	f000 f805 	bl	8003696 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800368c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800368e:	4618      	mov	r0, r3
 8003690:	3730      	adds	r7, #48	@ 0x30
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b084      	sub	sp, #16
 800369a:	af00      	add	r7, sp, #0
 800369c:	60f8      	str	r0, [r7, #12]
 800369e:	60b9      	str	r1, [r7, #8]
 80036a0:	607a      	str	r2, [r7, #4]
 80036a2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80036a4:	68bb      	ldr	r3, [r7, #8]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d103      	bne.n	80036b2 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80036aa:	69bb      	ldr	r3, [r7, #24]
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	601a      	str	r2, [r3, #0]
 80036b0:	e002      	b.n	80036b8 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	68fa      	ldr	r2, [r7, #12]
 80036bc:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	68ba      	ldr	r2, [r7, #8]
 80036c2:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80036c4:	2101      	movs	r1, #1
 80036c6:	69b8      	ldr	r0, [r7, #24]
 80036c8:	f7ff fefe 	bl	80034c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80036cc:	69bb      	ldr	r3, [r7, #24]
 80036ce:	78fa      	ldrb	r2, [r7, #3]
 80036d0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80036d4:	bf00      	nop
 80036d6:	3710      	adds	r7, #16
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}

080036dc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b08e      	sub	sp, #56	@ 0x38
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	60f8      	str	r0, [r7, #12]
 80036e4:	60b9      	str	r1, [r7, #8]
 80036e6:	607a      	str	r2, [r7, #4]
 80036e8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80036ea:	2300      	movs	r3, #0
 80036ec:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80036f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10b      	bne.n	8003710 <xQueueGenericSend+0x34>
	__asm volatile
 80036f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80036fc:	f383 8811 	msr	BASEPRI, r3
 8003700:	f3bf 8f6f 	isb	sy
 8003704:	f3bf 8f4f 	dsb	sy
 8003708:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800370a:	bf00      	nop
 800370c:	bf00      	nop
 800370e:	e7fd      	b.n	800370c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d103      	bne.n	800371e <xQueueGenericSend+0x42>
 8003716:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003718:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800371a:	2b00      	cmp	r3, #0
 800371c:	d101      	bne.n	8003722 <xQueueGenericSend+0x46>
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <xQueueGenericSend+0x48>
 8003722:	2300      	movs	r3, #0
 8003724:	2b00      	cmp	r3, #0
 8003726:	d10b      	bne.n	8003740 <xQueueGenericSend+0x64>
	__asm volatile
 8003728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800372c:	f383 8811 	msr	BASEPRI, r3
 8003730:	f3bf 8f6f 	isb	sy
 8003734:	f3bf 8f4f 	dsb	sy
 8003738:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800373a:	bf00      	nop
 800373c:	bf00      	nop
 800373e:	e7fd      	b.n	800373c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	2b02      	cmp	r3, #2
 8003744:	d103      	bne.n	800374e <xQueueGenericSend+0x72>
 8003746:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800374a:	2b01      	cmp	r3, #1
 800374c:	d101      	bne.n	8003752 <xQueueGenericSend+0x76>
 800374e:	2301      	movs	r3, #1
 8003750:	e000      	b.n	8003754 <xQueueGenericSend+0x78>
 8003752:	2300      	movs	r3, #0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d10b      	bne.n	8003770 <xQueueGenericSend+0x94>
	__asm volatile
 8003758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800375c:	f383 8811 	msr	BASEPRI, r3
 8003760:	f3bf 8f6f 	isb	sy
 8003764:	f3bf 8f4f 	dsb	sy
 8003768:	623b      	str	r3, [r7, #32]
}
 800376a:	bf00      	nop
 800376c:	bf00      	nop
 800376e:	e7fd      	b.n	800376c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003770:	f001 f9ce 	bl	8004b10 <xTaskGetSchedulerState>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d102      	bne.n	8003780 <xQueueGenericSend+0xa4>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d101      	bne.n	8003784 <xQueueGenericSend+0xa8>
 8003780:	2301      	movs	r3, #1
 8003782:	e000      	b.n	8003786 <xQueueGenericSend+0xaa>
 8003784:	2300      	movs	r3, #0
 8003786:	2b00      	cmp	r3, #0
 8003788:	d10b      	bne.n	80037a2 <xQueueGenericSend+0xc6>
	__asm volatile
 800378a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800378e:	f383 8811 	msr	BASEPRI, r3
 8003792:	f3bf 8f6f 	isb	sy
 8003796:	f3bf 8f4f 	dsb	sy
 800379a:	61fb      	str	r3, [r7, #28]
}
 800379c:	bf00      	nop
 800379e:	bf00      	nop
 80037a0:	e7fd      	b.n	800379e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80037a2:	f001 ff21 	bl	80055e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80037a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d302      	bcc.n	80037b8 <xQueueGenericSend+0xdc>
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d129      	bne.n	800380c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80037b8:	683a      	ldr	r2, [r7, #0]
 80037ba:	68b9      	ldr	r1, [r7, #8]
 80037bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80037be:	f000 fa0f 	bl	8003be0 <prvCopyDataToQueue>
 80037c2:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80037c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	d010      	beq.n	80037ee <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80037cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037ce:	3324      	adds	r3, #36	@ 0x24
 80037d0:	4618      	mov	r0, r3
 80037d2:	f000 ffdd 	bl	8004790 <xTaskRemoveFromEventList>
 80037d6:	4603      	mov	r3, r0
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d013      	beq.n	8003804 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80037dc:	4b3f      	ldr	r3, [pc, #252]	@ (80038dc <xQueueGenericSend+0x200>)
 80037de:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037e2:	601a      	str	r2, [r3, #0]
 80037e4:	f3bf 8f4f 	dsb	sy
 80037e8:	f3bf 8f6f 	isb	sy
 80037ec:	e00a      	b.n	8003804 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80037ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d007      	beq.n	8003804 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80037f4:	4b39      	ldr	r3, [pc, #228]	@ (80038dc <xQueueGenericSend+0x200>)
 80037f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	f3bf 8f4f 	dsb	sy
 8003800:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003804:	f001 ff22 	bl	800564c <vPortExitCritical>
				return pdPASS;
 8003808:	2301      	movs	r3, #1
 800380a:	e063      	b.n	80038d4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d103      	bne.n	800381a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003812:	f001 ff1b 	bl	800564c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003816:	2300      	movs	r3, #0
 8003818:	e05c      	b.n	80038d4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800381a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800381c:	2b00      	cmp	r3, #0
 800381e:	d106      	bne.n	800382e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003820:	f107 0314 	add.w	r3, r7, #20
 8003824:	4618      	mov	r0, r3
 8003826:	f001 f817 	bl	8004858 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800382a:	2301      	movs	r3, #1
 800382c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800382e:	f001 ff0d 	bl	800564c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003832:	f000 fd87 	bl	8004344 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003836:	f001 fed7 	bl	80055e8 <vPortEnterCritical>
 800383a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800383c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003840:	b25b      	sxtb	r3, r3
 8003842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003846:	d103      	bne.n	8003850 <xQueueGenericSend+0x174>
 8003848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800384a:	2200      	movs	r2, #0
 800384c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003850:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003852:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003856:	b25b      	sxtb	r3, r3
 8003858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385c:	d103      	bne.n	8003866 <xQueueGenericSend+0x18a>
 800385e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003860:	2200      	movs	r2, #0
 8003862:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003866:	f001 fef1 	bl	800564c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800386a:	1d3a      	adds	r2, r7, #4
 800386c:	f107 0314 	add.w	r3, r7, #20
 8003870:	4611      	mov	r1, r2
 8003872:	4618      	mov	r0, r3
 8003874:	f001 f806 	bl	8004884 <xTaskCheckForTimeOut>
 8003878:	4603      	mov	r3, r0
 800387a:	2b00      	cmp	r3, #0
 800387c:	d124      	bne.n	80038c8 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800387e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003880:	f000 faa6 	bl	8003dd0 <prvIsQueueFull>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d018      	beq.n	80038bc <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800388a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800388c:	3310      	adds	r3, #16
 800388e:	687a      	ldr	r2, [r7, #4]
 8003890:	4611      	mov	r1, r2
 8003892:	4618      	mov	r0, r3
 8003894:	f000 ff2a 	bl	80046ec <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003898:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800389a:	f000 fa31 	bl	8003d00 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800389e:	f000 fd5f 	bl	8004360 <xTaskResumeAll>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f47f af7c 	bne.w	80037a2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80038aa:	4b0c      	ldr	r3, [pc, #48]	@ (80038dc <xQueueGenericSend+0x200>)
 80038ac:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038b0:	601a      	str	r2, [r3, #0]
 80038b2:	f3bf 8f4f 	dsb	sy
 80038b6:	f3bf 8f6f 	isb	sy
 80038ba:	e772      	b.n	80037a2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80038bc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80038be:	f000 fa1f 	bl	8003d00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80038c2:	f000 fd4d 	bl	8004360 <xTaskResumeAll>
 80038c6:	e76c      	b.n	80037a2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80038c8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80038ca:	f000 fa19 	bl	8003d00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80038ce:	f000 fd47 	bl	8004360 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80038d2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3738      	adds	r7, #56	@ 0x38
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	e000ed04 	.word	0xe000ed04

080038e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b090      	sub	sp, #64	@ 0x40
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	60f8      	str	r0, [r7, #12]
 80038e8:	60b9      	str	r1, [r7, #8]
 80038ea:	607a      	str	r2, [r7, #4]
 80038ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80038f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10b      	bne.n	8003910 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80038f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80038fc:	f383 8811 	msr	BASEPRI, r3
 8003900:	f3bf 8f6f 	isb	sy
 8003904:	f3bf 8f4f 	dsb	sy
 8003908:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800390a:	bf00      	nop
 800390c:	bf00      	nop
 800390e:	e7fd      	b.n	800390c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d103      	bne.n	800391e <xQueueGenericSendFromISR+0x3e>
 8003916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <xQueueGenericSendFromISR+0x42>
 800391e:	2301      	movs	r3, #1
 8003920:	e000      	b.n	8003924 <xQueueGenericSendFromISR+0x44>
 8003922:	2300      	movs	r3, #0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d10b      	bne.n	8003940 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800392c:	f383 8811 	msr	BASEPRI, r3
 8003930:	f3bf 8f6f 	isb	sy
 8003934:	f3bf 8f4f 	dsb	sy
 8003938:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800393a:	bf00      	nop
 800393c:	bf00      	nop
 800393e:	e7fd      	b.n	800393c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2b02      	cmp	r3, #2
 8003944:	d103      	bne.n	800394e <xQueueGenericSendFromISR+0x6e>
 8003946:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003948:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800394a:	2b01      	cmp	r3, #1
 800394c:	d101      	bne.n	8003952 <xQueueGenericSendFromISR+0x72>
 800394e:	2301      	movs	r3, #1
 8003950:	e000      	b.n	8003954 <xQueueGenericSendFromISR+0x74>
 8003952:	2300      	movs	r3, #0
 8003954:	2b00      	cmp	r3, #0
 8003956:	d10b      	bne.n	8003970 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800395c:	f383 8811 	msr	BASEPRI, r3
 8003960:	f3bf 8f6f 	isb	sy
 8003964:	f3bf 8f4f 	dsb	sy
 8003968:	623b      	str	r3, [r7, #32]
}
 800396a:	bf00      	nop
 800396c:	bf00      	nop
 800396e:	e7fd      	b.n	800396c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003970:	f001 ff1a 	bl	80057a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003974:	f3ef 8211 	mrs	r2, BASEPRI
 8003978:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800397c:	f383 8811 	msr	BASEPRI, r3
 8003980:	f3bf 8f6f 	isb	sy
 8003984:	f3bf 8f4f 	dsb	sy
 8003988:	61fa      	str	r2, [r7, #28]
 800398a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800398c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800398e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003992:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003994:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003998:	429a      	cmp	r2, r3
 800399a:	d302      	bcc.n	80039a2 <xQueueGenericSendFromISR+0xc2>
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d12f      	bne.n	8003a02 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80039a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80039a8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	68b9      	ldr	r1, [r7, #8]
 80039b6:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80039b8:	f000 f912 	bl	8003be0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80039bc:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 80039c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c4:	d112      	bne.n	80039ec <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80039c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d016      	beq.n	80039fc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80039ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039d0:	3324      	adds	r3, #36	@ 0x24
 80039d2:	4618      	mov	r0, r3
 80039d4:	f000 fedc 	bl	8004790 <xTaskRemoveFromEventList>
 80039d8:	4603      	mov	r3, r0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d00e      	beq.n	80039fc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00b      	beq.n	80039fc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	601a      	str	r2, [r3, #0]
 80039ea:	e007      	b.n	80039fc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80039ec:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80039f0:	3301      	adds	r3, #1
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	b25a      	sxtb	r2, r3
 80039f6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80039f8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80039fc:	2301      	movs	r3, #1
 80039fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8003a00:	e001      	b.n	8003a06 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003a06:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003a08:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003a0a:	697b      	ldr	r3, [r7, #20]
 8003a0c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003a10:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003a12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3740      	adds	r7, #64	@ 0x40
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b08c      	sub	sp, #48	@ 0x30
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003a30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10b      	bne.n	8003a4e <xQueueReceive+0x32>
	__asm volatile
 8003a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a3a:	f383 8811 	msr	BASEPRI, r3
 8003a3e:	f3bf 8f6f 	isb	sy
 8003a42:	f3bf 8f4f 	dsb	sy
 8003a46:	623b      	str	r3, [r7, #32]
}
 8003a48:	bf00      	nop
 8003a4a:	bf00      	nop
 8003a4c:	e7fd      	b.n	8003a4a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	d103      	bne.n	8003a5c <xQueueReceive+0x40>
 8003a54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d101      	bne.n	8003a60 <xQueueReceive+0x44>
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e000      	b.n	8003a62 <xQueueReceive+0x46>
 8003a60:	2300      	movs	r3, #0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d10b      	bne.n	8003a7e <xQueueReceive+0x62>
	__asm volatile
 8003a66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a6a:	f383 8811 	msr	BASEPRI, r3
 8003a6e:	f3bf 8f6f 	isb	sy
 8003a72:	f3bf 8f4f 	dsb	sy
 8003a76:	61fb      	str	r3, [r7, #28]
}
 8003a78:	bf00      	nop
 8003a7a:	bf00      	nop
 8003a7c:	e7fd      	b.n	8003a7a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003a7e:	f001 f847 	bl	8004b10 <xTaskGetSchedulerState>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d102      	bne.n	8003a8e <xQueueReceive+0x72>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <xQueueReceive+0x76>
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e000      	b.n	8003a94 <xQueueReceive+0x78>
 8003a92:	2300      	movs	r3, #0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10b      	bne.n	8003ab0 <xQueueReceive+0x94>
	__asm volatile
 8003a98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003a9c:	f383 8811 	msr	BASEPRI, r3
 8003aa0:	f3bf 8f6f 	isb	sy
 8003aa4:	f3bf 8f4f 	dsb	sy
 8003aa8:	61bb      	str	r3, [r7, #24]
}
 8003aaa:	bf00      	nop
 8003aac:	bf00      	nop
 8003aae:	e7fd      	b.n	8003aac <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003ab0:	f001 fd9a 	bl	80055e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ab4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ab6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ab8:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003aba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d01f      	beq.n	8003b00 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003ac0:	68b9      	ldr	r1, [r7, #8]
 8003ac2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003ac4:	f000 f8f6 	bl	8003cb4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aca:	1e5a      	subs	r2, r3, #1
 8003acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ace:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ad0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d00f      	beq.n	8003af8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003ad8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ada:	3310      	adds	r3, #16
 8003adc:	4618      	mov	r0, r3
 8003ade:	f000 fe57 	bl	8004790 <xTaskRemoveFromEventList>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d007      	beq.n	8003af8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003ae8:	4b3c      	ldr	r3, [pc, #240]	@ (8003bdc <xQueueReceive+0x1c0>)
 8003aea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003aee:	601a      	str	r2, [r3, #0]
 8003af0:	f3bf 8f4f 	dsb	sy
 8003af4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003af8:	f001 fda8 	bl	800564c <vPortExitCritical>
				return pdPASS;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e069      	b.n	8003bd4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d103      	bne.n	8003b0e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003b06:	f001 fda1 	bl	800564c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	e062      	b.n	8003bd4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d106      	bne.n	8003b22 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003b14:	f107 0310 	add.w	r3, r7, #16
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 fe9d 	bl	8004858 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003b22:	f001 fd93 	bl	800564c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003b26:	f000 fc0d 	bl	8004344 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003b2a:	f001 fd5d 	bl	80055e8 <vPortEnterCritical>
 8003b2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b30:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003b34:	b25b      	sxtb	r3, r3
 8003b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b3a:	d103      	bne.n	8003b44 <xQueueReceive+0x128>
 8003b3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b3e:	2200      	movs	r2, #0
 8003b40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b44:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b46:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003b4a:	b25b      	sxtb	r3, r3
 8003b4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b50:	d103      	bne.n	8003b5a <xQueueReceive+0x13e>
 8003b52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003b5a:	f001 fd77 	bl	800564c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003b5e:	1d3a      	adds	r2, r7, #4
 8003b60:	f107 0310 	add.w	r3, r7, #16
 8003b64:	4611      	mov	r1, r2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f000 fe8c 	bl	8004884 <xTaskCheckForTimeOut>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d123      	bne.n	8003bba <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b74:	f000 f916 	bl	8003da4 <prvIsQueueEmpty>
 8003b78:	4603      	mov	r3, r0
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d017      	beq.n	8003bae <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003b7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b80:	3324      	adds	r3, #36	@ 0x24
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	4611      	mov	r1, r2
 8003b86:	4618      	mov	r0, r3
 8003b88:	f000 fdb0 	bl	80046ec <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003b8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003b8e:	f000 f8b7 	bl	8003d00 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b92:	f000 fbe5 	bl	8004360 <xTaskResumeAll>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d189      	bne.n	8003ab0 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8003b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8003bdc <xQueueReceive+0x1c0>)
 8003b9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003ba2:	601a      	str	r2, [r3, #0]
 8003ba4:	f3bf 8f4f 	dsb	sy
 8003ba8:	f3bf 8f6f 	isb	sy
 8003bac:	e780      	b.n	8003ab0 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003bae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003bb0:	f000 f8a6 	bl	8003d00 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003bb4:	f000 fbd4 	bl	8004360 <xTaskResumeAll>
 8003bb8:	e77a      	b.n	8003ab0 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003bba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003bbc:	f000 f8a0 	bl	8003d00 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003bc0:	f000 fbce 	bl	8004360 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003bc4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8003bc6:	f000 f8ed 	bl	8003da4 <prvIsQueueEmpty>
 8003bca:	4603      	mov	r3, r0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	f43f af6f 	beq.w	8003ab0 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003bd2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3730      	adds	r7, #48	@ 0x30
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	e000ed04 	.word	0xe000ed04

08003be0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b086      	sub	sp, #24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003bec:	2300      	movs	r3, #0
 8003bee:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bf4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10d      	bne.n	8003c1a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d14d      	bne.n	8003ca2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	689b      	ldr	r3, [r3, #8]
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	f000 ff9e 	bl	8004b4c <xTaskPriorityDisinherit>
 8003c10:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	609a      	str	r2, [r3, #8]
 8003c18:	e043      	b.n	8003ca2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d119      	bne.n	8003c54 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6858      	ldr	r0, [r3, #4]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c28:	461a      	mov	r2, r3
 8003c2a:	68b9      	ldr	r1, [r7, #8]
 8003c2c:	f002 f818 	bl	8005c60 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c38:	441a      	add	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	685a      	ldr	r2, [r3, #4]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	429a      	cmp	r2, r3
 8003c48:	d32b      	bcc.n	8003ca2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	605a      	str	r2, [r3, #4]
 8003c52:	e026      	b.n	8003ca2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	68d8      	ldr	r0, [r3, #12]
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c5c:	461a      	mov	r2, r3
 8003c5e:	68b9      	ldr	r1, [r7, #8]
 8003c60:	f001 fffe 	bl	8005c60 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	68da      	ldr	r2, [r3, #12]
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c6c:	425b      	negs	r3, r3
 8003c6e:	441a      	add	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	68da      	ldr	r2, [r3, #12]
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d207      	bcs.n	8003c90 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c88:	425b      	negs	r3, r3
 8003c8a:	441a      	add	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d105      	bne.n	8003ca2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d002      	beq.n	8003ca2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	3b01      	subs	r3, #1
 8003ca0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	1c5a      	adds	r2, r3, #1
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8003caa:	697b      	ldr	r3, [r7, #20]
}
 8003cac:	4618      	mov	r0, r3
 8003cae:	3718      	adds	r7, #24
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	bd80      	pop	{r7, pc}

08003cb4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d018      	beq.n	8003cf8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cce:	441a      	add	r2, r3
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	68da      	ldr	r2, [r3, #12]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	689b      	ldr	r3, [r3, #8]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d303      	bcc.n	8003ce8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	68d9      	ldr	r1, [r3, #12]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	6838      	ldr	r0, [r7, #0]
 8003cf4:	f001 ffb4 	bl	8005c60 <memcpy>
	}
}
 8003cf8:	bf00      	nop
 8003cfa:	3708      	adds	r7, #8
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}

08003d00 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b084      	sub	sp, #16
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003d08:	f001 fc6e 	bl	80055e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003d12:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d14:	e011      	b.n	8003d3a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d012      	beq.n	8003d44 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	3324      	adds	r3, #36	@ 0x24
 8003d22:	4618      	mov	r0, r3
 8003d24:	f000 fd34 	bl	8004790 <xTaskRemoveFromEventList>
 8003d28:	4603      	mov	r3, r0
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d001      	beq.n	8003d32 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003d2e:	f000 fe0d 	bl	800494c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003d32:	7bfb      	ldrb	r3, [r7, #15]
 8003d34:	3b01      	subs	r3, #1
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	dce9      	bgt.n	8003d16 <prvUnlockQueue+0x16>
 8003d42:	e000      	b.n	8003d46 <prvUnlockQueue+0x46>
					break;
 8003d44:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	22ff      	movs	r2, #255	@ 0xff
 8003d4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8003d4e:	f001 fc7d 	bl	800564c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003d52:	f001 fc49 	bl	80055e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003d5c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d5e:	e011      	b.n	8003d84 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d012      	beq.n	8003d8e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	3310      	adds	r3, #16
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 fd0f 	bl	8004790 <xTaskRemoveFromEventList>
 8003d72:	4603      	mov	r3, r0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d001      	beq.n	8003d7c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003d78:	f000 fde8 	bl	800494c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003d7c:	7bbb      	ldrb	r3, [r7, #14]
 8003d7e:	3b01      	subs	r3, #1
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003d84:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	dce9      	bgt.n	8003d60 <prvUnlockQueue+0x60>
 8003d8c:	e000      	b.n	8003d90 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003d8e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	22ff      	movs	r2, #255	@ 0xff
 8003d94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8003d98:	f001 fc58 	bl	800564c <vPortExitCritical>
}
 8003d9c:	bf00      	nop
 8003d9e:	3710      	adds	r7, #16
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b084      	sub	sp, #16
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003dac:	f001 fc1c 	bl	80055e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d102      	bne.n	8003dbe <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003db8:	2301      	movs	r3, #1
 8003dba:	60fb      	str	r3, [r7, #12]
 8003dbc:	e001      	b.n	8003dc2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003dc2:	f001 fc43 	bl	800564c <vPortExitCritical>

	return xReturn;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
}
 8003dc8:	4618      	mov	r0, r3
 8003dca:	3710      	adds	r7, #16
 8003dcc:	46bd      	mov	sp, r7
 8003dce:	bd80      	pop	{r7, pc}

08003dd0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003dd8:	f001 fc06 	bl	80055e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003de4:	429a      	cmp	r2, r3
 8003de6:	d102      	bne.n	8003dee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003de8:	2301      	movs	r3, #1
 8003dea:	60fb      	str	r3, [r7, #12]
 8003dec:	e001      	b.n	8003df2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003dee:	2300      	movs	r3, #0
 8003df0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003df2:	f001 fc2b 	bl	800564c <vPortExitCritical>

	return xReturn;
 8003df6:	68fb      	ldr	r3, [r7, #12]
}
 8003df8:	4618      	mov	r0, r3
 8003dfa:	3710      	adds	r7, #16
 8003dfc:	46bd      	mov	sp, r7
 8003dfe:	bd80      	pop	{r7, pc}

08003e00 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003e00:	b480      	push	{r7}
 8003e02:	b085      	sub	sp, #20
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	60fb      	str	r3, [r7, #12]
 8003e0e:	e014      	b.n	8003e3a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003e10:	4a0f      	ldr	r2, [pc, #60]	@ (8003e50 <vQueueAddToRegistry+0x50>)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d10b      	bne.n	8003e34 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003e1c:	490c      	ldr	r1, [pc, #48]	@ (8003e50 <vQueueAddToRegistry+0x50>)
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003e26:	4a0a      	ldr	r2, [pc, #40]	@ (8003e50 <vQueueAddToRegistry+0x50>)
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	00db      	lsls	r3, r3, #3
 8003e2c:	4413      	add	r3, r2
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003e32:	e006      	b.n	8003e42 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	3301      	adds	r3, #1
 8003e38:	60fb      	str	r3, [r7, #12]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2b07      	cmp	r3, #7
 8003e3e:	d9e7      	bls.n	8003e10 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003e40:	bf00      	nop
 8003e42:	bf00      	nop
 8003e44:	3714      	adds	r7, #20
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	200008a4 	.word	0x200008a4

08003e54 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003e64:	f001 fbc0 	bl	80055e8 <vPortEnterCritical>
 8003e68:	697b      	ldr	r3, [r7, #20]
 8003e6a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003e6e:	b25b      	sxtb	r3, r3
 8003e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e74:	d103      	bne.n	8003e7e <vQueueWaitForMessageRestricted+0x2a>
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	2200      	movs	r2, #0
 8003e7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003e84:	b25b      	sxtb	r3, r3
 8003e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8a:	d103      	bne.n	8003e94 <vQueueWaitForMessageRestricted+0x40>
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e94:	f001 fbda 	bl	800564c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003e98:	697b      	ldr	r3, [r7, #20]
 8003e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d106      	bne.n	8003eae <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	3324      	adds	r3, #36	@ 0x24
 8003ea4:	687a      	ldr	r2, [r7, #4]
 8003ea6:	68b9      	ldr	r1, [r7, #8]
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f000 fc45 	bl	8004738 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003eae:	6978      	ldr	r0, [r7, #20]
 8003eb0:	f7ff ff26 	bl	8003d00 <prvUnlockQueue>
	}
 8003eb4:	bf00      	nop
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b08e      	sub	sp, #56	@ 0x38
 8003ec0:	af04      	add	r7, sp, #16
 8003ec2:	60f8      	str	r0, [r7, #12]
 8003ec4:	60b9      	str	r1, [r7, #8]
 8003ec6:	607a      	str	r2, [r7, #4]
 8003ec8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003eca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d10b      	bne.n	8003ee8 <xTaskCreateStatic+0x2c>
	__asm volatile
 8003ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ed4:	f383 8811 	msr	BASEPRI, r3
 8003ed8:	f3bf 8f6f 	isb	sy
 8003edc:	f3bf 8f4f 	dsb	sy
 8003ee0:	623b      	str	r3, [r7, #32]
}
 8003ee2:	bf00      	nop
 8003ee4:	bf00      	nop
 8003ee6:	e7fd      	b.n	8003ee4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d10b      	bne.n	8003f06 <xTaskCreateStatic+0x4a>
	__asm volatile
 8003eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003ef2:	f383 8811 	msr	BASEPRI, r3
 8003ef6:	f3bf 8f6f 	isb	sy
 8003efa:	f3bf 8f4f 	dsb	sy
 8003efe:	61fb      	str	r3, [r7, #28]
}
 8003f00:	bf00      	nop
 8003f02:	bf00      	nop
 8003f04:	e7fd      	b.n	8003f02 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003f06:	235c      	movs	r3, #92	@ 0x5c
 8003f08:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	2b5c      	cmp	r3, #92	@ 0x5c
 8003f0e:	d00b      	beq.n	8003f28 <xTaskCreateStatic+0x6c>
	__asm volatile
 8003f10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f14:	f383 8811 	msr	BASEPRI, r3
 8003f18:	f3bf 8f6f 	isb	sy
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	61bb      	str	r3, [r7, #24]
}
 8003f22:	bf00      	nop
 8003f24:	bf00      	nop
 8003f26:	e7fd      	b.n	8003f24 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003f28:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003f2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d01e      	beq.n	8003f6e <xTaskCreateStatic+0xb2>
 8003f30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d01b      	beq.n	8003f6e <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f38:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8003f3e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f42:	2202      	movs	r2, #2
 8003f44:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003f48:	2300      	movs	r3, #0
 8003f4a:	9303      	str	r3, [sp, #12]
 8003f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4e:	9302      	str	r3, [sp, #8]
 8003f50:	f107 0314 	add.w	r3, r7, #20
 8003f54:	9301      	str	r3, [sp, #4]
 8003f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	687a      	ldr	r2, [r7, #4]
 8003f5e:	68b9      	ldr	r1, [r7, #8]
 8003f60:	68f8      	ldr	r0, [r7, #12]
 8003f62:	f000 f850 	bl	8004006 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f66:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8003f68:	f000 f8de 	bl	8004128 <prvAddNewTaskToReadyList>
 8003f6c:	e001      	b.n	8003f72 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8003f6e:	2300      	movs	r3, #0
 8003f70:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003f72:	697b      	ldr	r3, [r7, #20]
	}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3728      	adds	r7, #40	@ 0x28
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b08c      	sub	sp, #48	@ 0x30
 8003f80:	af04      	add	r7, sp, #16
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	603b      	str	r3, [r7, #0]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003f8c:	88fb      	ldrh	r3, [r7, #6]
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	4618      	mov	r0, r3
 8003f92:	f001 fc4b 	bl	800582c <pvPortMalloc>
 8003f96:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f98:	697b      	ldr	r3, [r7, #20]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00e      	beq.n	8003fbc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003f9e:	205c      	movs	r0, #92	@ 0x5c
 8003fa0:	f001 fc44 	bl	800582c <pvPortMalloc>
 8003fa4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003fa6:	69fb      	ldr	r3, [r7, #28]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d003      	beq.n	8003fb4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003fac:	69fb      	ldr	r3, [r7, #28]
 8003fae:	697a      	ldr	r2, [r7, #20]
 8003fb0:	631a      	str	r2, [r3, #48]	@ 0x30
 8003fb2:	e005      	b.n	8003fc0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003fb4:	6978      	ldr	r0, [r7, #20]
 8003fb6:	f001 fd07 	bl	80059c8 <vPortFree>
 8003fba:	e001      	b.n	8003fc0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003fc0:	69fb      	ldr	r3, [r7, #28]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d017      	beq.n	8003ff6 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003fc6:	69fb      	ldr	r3, [r7, #28]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003fce:	88fa      	ldrh	r2, [r7, #6]
 8003fd0:	2300      	movs	r3, #0
 8003fd2:	9303      	str	r3, [sp, #12]
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	9302      	str	r3, [sp, #8]
 8003fd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003fda:	9301      	str	r3, [sp, #4]
 8003fdc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003fde:	9300      	str	r3, [sp, #0]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	68b9      	ldr	r1, [r7, #8]
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 f80e 	bl	8004006 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003fea:	69f8      	ldr	r0, [r7, #28]
 8003fec:	f000 f89c 	bl	8004128 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	61bb      	str	r3, [r7, #24]
 8003ff4:	e002      	b.n	8003ffc <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8003ffa:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003ffc:	69bb      	ldr	r3, [r7, #24]
	}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3720      	adds	r7, #32
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b088      	sub	sp, #32
 800400a:	af00      	add	r7, sp, #0
 800400c:	60f8      	str	r0, [r7, #12]
 800400e:	60b9      	str	r1, [r7, #8]
 8004010:	607a      	str	r2, [r7, #4]
 8004012:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004014:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004016:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	461a      	mov	r2, r3
 800401e:	21a5      	movs	r1, #165	@ 0xa5
 8004020:	f001 fdf2 	bl	8005c08 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004026:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800402e:	3b01      	subs	r3, #1
 8004030:	009b      	lsls	r3, r3, #2
 8004032:	4413      	add	r3, r2
 8004034:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	f023 0307 	bic.w	r3, r3, #7
 800403c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00b      	beq.n	8004060 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004048:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800404c:	f383 8811 	msr	BASEPRI, r3
 8004050:	f3bf 8f6f 	isb	sy
 8004054:	f3bf 8f4f 	dsb	sy
 8004058:	617b      	str	r3, [r7, #20]
}
 800405a:	bf00      	nop
 800405c:	bf00      	nop
 800405e:	e7fd      	b.n	800405c <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d01f      	beq.n	80040a6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004066:	2300      	movs	r3, #0
 8004068:	61fb      	str	r3, [r7, #28]
 800406a:	e012      	b.n	8004092 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	4413      	add	r3, r2
 8004072:	7819      	ldrb	r1, [r3, #0]
 8004074:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004076:	69fb      	ldr	r3, [r7, #28]
 8004078:	4413      	add	r3, r2
 800407a:	3334      	adds	r3, #52	@ 0x34
 800407c:	460a      	mov	r2, r1
 800407e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004080:	68ba      	ldr	r2, [r7, #8]
 8004082:	69fb      	ldr	r3, [r7, #28]
 8004084:	4413      	add	r3, r2
 8004086:	781b      	ldrb	r3, [r3, #0]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d006      	beq.n	800409a <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	3301      	adds	r3, #1
 8004090:	61fb      	str	r3, [r7, #28]
 8004092:	69fb      	ldr	r3, [r7, #28]
 8004094:	2b0f      	cmp	r3, #15
 8004096:	d9e9      	bls.n	800406c <prvInitialiseNewTask+0x66>
 8004098:	e000      	b.n	800409c <prvInitialiseNewTask+0x96>
			{
				break;
 800409a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800409c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800409e:	2200      	movs	r2, #0
 80040a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80040a4:	e003      	b.n	80040ae <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80040a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80040ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040b0:	2b37      	cmp	r3, #55	@ 0x37
 80040b2:	d901      	bls.n	80040b8 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80040b4:	2337      	movs	r3, #55	@ 0x37
 80040b6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80040b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040bc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80040be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80040c2:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80040c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040c6:	2200      	movs	r2, #0
 80040c8:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80040ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040cc:	3304      	adds	r3, #4
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff f966 	bl	80033a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040d6:	3318      	adds	r3, #24
 80040d8:	4618      	mov	r0, r3
 80040da:	f7ff f961 	bl	80033a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040e0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040e2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040e6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80040ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040ec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80040ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040f2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80040f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f6:	2200      	movs	r2, #0
 80040f8:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80040fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040fc:	2200      	movs	r2, #0
 80040fe:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004102:	683a      	ldr	r2, [r7, #0]
 8004104:	68f9      	ldr	r1, [r7, #12]
 8004106:	69b8      	ldr	r0, [r7, #24]
 8004108:	f001 f93e 	bl	8005388 <pxPortInitialiseStack>
 800410c:	4602      	mov	r2, r0
 800410e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004110:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004112:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004114:	2b00      	cmp	r3, #0
 8004116:	d002      	beq.n	800411e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800411a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800411c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800411e:	bf00      	nop
 8004120:	3720      	adds	r7, #32
 8004122:	46bd      	mov	sp, r7
 8004124:	bd80      	pop	{r7, pc}
	...

08004128 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004130:	f001 fa5a 	bl	80055e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004134:	4b2d      	ldr	r3, [pc, #180]	@ (80041ec <prvAddNewTaskToReadyList+0xc4>)
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	3301      	adds	r3, #1
 800413a:	4a2c      	ldr	r2, [pc, #176]	@ (80041ec <prvAddNewTaskToReadyList+0xc4>)
 800413c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800413e:	4b2c      	ldr	r3, [pc, #176]	@ (80041f0 <prvAddNewTaskToReadyList+0xc8>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d109      	bne.n	800415a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004146:	4a2a      	ldr	r2, [pc, #168]	@ (80041f0 <prvAddNewTaskToReadyList+0xc8>)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800414c:	4b27      	ldr	r3, [pc, #156]	@ (80041ec <prvAddNewTaskToReadyList+0xc4>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b01      	cmp	r3, #1
 8004152:	d110      	bne.n	8004176 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004154:	f000 fc1e 	bl	8004994 <prvInitialiseTaskLists>
 8004158:	e00d      	b.n	8004176 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800415a:	4b26      	ldr	r3, [pc, #152]	@ (80041f4 <prvAddNewTaskToReadyList+0xcc>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	d109      	bne.n	8004176 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004162:	4b23      	ldr	r3, [pc, #140]	@ (80041f0 <prvAddNewTaskToReadyList+0xc8>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800416c:	429a      	cmp	r2, r3
 800416e:	d802      	bhi.n	8004176 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004170:	4a1f      	ldr	r2, [pc, #124]	@ (80041f0 <prvAddNewTaskToReadyList+0xc8>)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004176:	4b20      	ldr	r3, [pc, #128]	@ (80041f8 <prvAddNewTaskToReadyList+0xd0>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3301      	adds	r3, #1
 800417c:	4a1e      	ldr	r2, [pc, #120]	@ (80041f8 <prvAddNewTaskToReadyList+0xd0>)
 800417e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004180:	4b1d      	ldr	r3, [pc, #116]	@ (80041f8 <prvAddNewTaskToReadyList+0xd0>)
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800418c:	4b1b      	ldr	r3, [pc, #108]	@ (80041fc <prvAddNewTaskToReadyList+0xd4>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	429a      	cmp	r2, r3
 8004192:	d903      	bls.n	800419c <prvAddNewTaskToReadyList+0x74>
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004198:	4a18      	ldr	r2, [pc, #96]	@ (80041fc <prvAddNewTaskToReadyList+0xd4>)
 800419a:	6013      	str	r3, [r2, #0]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041a0:	4613      	mov	r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	4413      	add	r3, r2
 80041a6:	009b      	lsls	r3, r3, #2
 80041a8:	4a15      	ldr	r2, [pc, #84]	@ (8004200 <prvAddNewTaskToReadyList+0xd8>)
 80041aa:	441a      	add	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	3304      	adds	r3, #4
 80041b0:	4619      	mov	r1, r3
 80041b2:	4610      	mov	r0, r2
 80041b4:	f7ff f901 	bl	80033ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80041b8:	f001 fa48 	bl	800564c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80041bc:	4b0d      	ldr	r3, [pc, #52]	@ (80041f4 <prvAddNewTaskToReadyList+0xcc>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00e      	beq.n	80041e2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80041c4:	4b0a      	ldr	r3, [pc, #40]	@ (80041f0 <prvAddNewTaskToReadyList+0xc8>)
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d207      	bcs.n	80041e2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80041d2:	4b0c      	ldr	r3, [pc, #48]	@ (8004204 <prvAddNewTaskToReadyList+0xdc>)
 80041d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80041d8:	601a      	str	r2, [r3, #0]
 80041da:	f3bf 8f4f 	dsb	sy
 80041de:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80041e2:	bf00      	nop
 80041e4:	3708      	adds	r7, #8
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	20000db8 	.word	0x20000db8
 80041f0:	200008e4 	.word	0x200008e4
 80041f4:	20000dc4 	.word	0x20000dc4
 80041f8:	20000dd4 	.word	0x20000dd4
 80041fc:	20000dc0 	.word	0x20000dc0
 8004200:	200008e8 	.word	0x200008e8
 8004204:	e000ed04 	.word	0xe000ed04

08004208 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004210:	2300      	movs	r3, #0
 8004212:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d018      	beq.n	800424c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800421a:	4b14      	ldr	r3, [pc, #80]	@ (800426c <vTaskDelay+0x64>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d00b      	beq.n	800423a <vTaskDelay+0x32>
	__asm volatile
 8004222:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004226:	f383 8811 	msr	BASEPRI, r3
 800422a:	f3bf 8f6f 	isb	sy
 800422e:	f3bf 8f4f 	dsb	sy
 8004232:	60bb      	str	r3, [r7, #8]
}
 8004234:	bf00      	nop
 8004236:	bf00      	nop
 8004238:	e7fd      	b.n	8004236 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800423a:	f000 f883 	bl	8004344 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800423e:	2100      	movs	r1, #0
 8004240:	6878      	ldr	r0, [r7, #4]
 8004242:	f000 fcf3 	bl	8004c2c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004246:	f000 f88b 	bl	8004360 <xTaskResumeAll>
 800424a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d107      	bne.n	8004262 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004252:	4b07      	ldr	r3, [pc, #28]	@ (8004270 <vTaskDelay+0x68>)
 8004254:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004258:	601a      	str	r2, [r3, #0]
 800425a:	f3bf 8f4f 	dsb	sy
 800425e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004262:	bf00      	nop
 8004264:	3710      	adds	r7, #16
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	20000de0 	.word	0x20000de0
 8004270:	e000ed04 	.word	0xe000ed04

08004274 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b08a      	sub	sp, #40	@ 0x28
 8004278:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800427a:	2300      	movs	r3, #0
 800427c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800427e:	2300      	movs	r3, #0
 8004280:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004282:	463a      	mov	r2, r7
 8004284:	1d39      	adds	r1, r7, #4
 8004286:	f107 0308 	add.w	r3, r7, #8
 800428a:	4618      	mov	r0, r3
 800428c:	f7ff f834 	bl	80032f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004290:	6839      	ldr	r1, [r7, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	9202      	str	r2, [sp, #8]
 8004298:	9301      	str	r3, [sp, #4]
 800429a:	2300      	movs	r3, #0
 800429c:	9300      	str	r3, [sp, #0]
 800429e:	2300      	movs	r3, #0
 80042a0:	460a      	mov	r2, r1
 80042a2:	4922      	ldr	r1, [pc, #136]	@ (800432c <vTaskStartScheduler+0xb8>)
 80042a4:	4822      	ldr	r0, [pc, #136]	@ (8004330 <vTaskStartScheduler+0xbc>)
 80042a6:	f7ff fe09 	bl	8003ebc <xTaskCreateStatic>
 80042aa:	4603      	mov	r3, r0
 80042ac:	4a21      	ldr	r2, [pc, #132]	@ (8004334 <vTaskStartScheduler+0xc0>)
 80042ae:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80042b0:	4b20      	ldr	r3, [pc, #128]	@ (8004334 <vTaskStartScheduler+0xc0>)
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d002      	beq.n	80042be <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80042b8:	2301      	movs	r3, #1
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	e001      	b.n	80042c2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80042be:	2300      	movs	r3, #0
 80042c0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d102      	bne.n	80042ce <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80042c8:	f000 fd04 	bl	8004cd4 <xTimerCreateTimerTask>
 80042cc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	2b01      	cmp	r3, #1
 80042d2:	d116      	bne.n	8004302 <vTaskStartScheduler+0x8e>
	__asm volatile
 80042d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80042d8:	f383 8811 	msr	BASEPRI, r3
 80042dc:	f3bf 8f6f 	isb	sy
 80042e0:	f3bf 8f4f 	dsb	sy
 80042e4:	613b      	str	r3, [r7, #16]
}
 80042e6:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80042e8:	4b13      	ldr	r3, [pc, #76]	@ (8004338 <vTaskStartScheduler+0xc4>)
 80042ea:	f04f 32ff 	mov.w	r2, #4294967295
 80042ee:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80042f0:	4b12      	ldr	r3, [pc, #72]	@ (800433c <vTaskStartScheduler+0xc8>)
 80042f2:	2201      	movs	r2, #1
 80042f4:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80042f6:	4b12      	ldr	r3, [pc, #72]	@ (8004340 <vTaskStartScheduler+0xcc>)
 80042f8:	2200      	movs	r2, #0
 80042fa:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80042fc:	f001 f8d0 	bl	80054a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004300:	e00f      	b.n	8004322 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004302:	697b      	ldr	r3, [r7, #20]
 8004304:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004308:	d10b      	bne.n	8004322 <vTaskStartScheduler+0xae>
	__asm volatile
 800430a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800430e:	f383 8811 	msr	BASEPRI, r3
 8004312:	f3bf 8f6f 	isb	sy
 8004316:	f3bf 8f4f 	dsb	sy
 800431a:	60fb      	str	r3, [r7, #12]
}
 800431c:	bf00      	nop
 800431e:	bf00      	nop
 8004320:	e7fd      	b.n	800431e <vTaskStartScheduler+0xaa>
}
 8004322:	bf00      	nop
 8004324:	3718      	adds	r7, #24
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	08005ca0 	.word	0x08005ca0
 8004330:	08004965 	.word	0x08004965
 8004334:	20000ddc 	.word	0x20000ddc
 8004338:	20000dd8 	.word	0x20000dd8
 800433c:	20000dc4 	.word	0x20000dc4
 8004340:	20000dbc 	.word	0x20000dbc

08004344 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004344:	b480      	push	{r7}
 8004346:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004348:	4b04      	ldr	r3, [pc, #16]	@ (800435c <vTaskSuspendAll+0x18>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	3301      	adds	r3, #1
 800434e:	4a03      	ldr	r2, [pc, #12]	@ (800435c <vTaskSuspendAll+0x18>)
 8004350:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004352:	bf00      	nop
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr
 800435c:	20000de0 	.word	0x20000de0

08004360 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b084      	sub	sp, #16
 8004364:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004366:	2300      	movs	r3, #0
 8004368:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800436a:	2300      	movs	r3, #0
 800436c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800436e:	4b42      	ldr	r3, [pc, #264]	@ (8004478 <xTaskResumeAll+0x118>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d10b      	bne.n	800438e <xTaskResumeAll+0x2e>
	__asm volatile
 8004376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800437a:	f383 8811 	msr	BASEPRI, r3
 800437e:	f3bf 8f6f 	isb	sy
 8004382:	f3bf 8f4f 	dsb	sy
 8004386:	603b      	str	r3, [r7, #0]
}
 8004388:	bf00      	nop
 800438a:	bf00      	nop
 800438c:	e7fd      	b.n	800438a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800438e:	f001 f92b 	bl	80055e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004392:	4b39      	ldr	r3, [pc, #228]	@ (8004478 <xTaskResumeAll+0x118>)
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3b01      	subs	r3, #1
 8004398:	4a37      	ldr	r2, [pc, #220]	@ (8004478 <xTaskResumeAll+0x118>)
 800439a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800439c:	4b36      	ldr	r3, [pc, #216]	@ (8004478 <xTaskResumeAll+0x118>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d162      	bne.n	800446a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80043a4:	4b35      	ldr	r3, [pc, #212]	@ (800447c <xTaskResumeAll+0x11c>)
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d05e      	beq.n	800446a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043ac:	e02f      	b.n	800440e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043ae:	4b34      	ldr	r3, [pc, #208]	@ (8004480 <xTaskResumeAll+0x120>)
 80043b0:	68db      	ldr	r3, [r3, #12]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	3318      	adds	r3, #24
 80043ba:	4618      	mov	r0, r3
 80043bc:	f7ff f85a 	bl	8003474 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	3304      	adds	r3, #4
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff f855 	bl	8003474 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043ce:	4b2d      	ldr	r3, [pc, #180]	@ (8004484 <xTaskResumeAll+0x124>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	429a      	cmp	r2, r3
 80043d4:	d903      	bls.n	80043de <xTaskResumeAll+0x7e>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043da:	4a2a      	ldr	r2, [pc, #168]	@ (8004484 <xTaskResumeAll+0x124>)
 80043dc:	6013      	str	r3, [r2, #0]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043e2:	4613      	mov	r3, r2
 80043e4:	009b      	lsls	r3, r3, #2
 80043e6:	4413      	add	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	4a27      	ldr	r2, [pc, #156]	@ (8004488 <xTaskResumeAll+0x128>)
 80043ec:	441a      	add	r2, r3
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	3304      	adds	r3, #4
 80043f2:	4619      	mov	r1, r3
 80043f4:	4610      	mov	r0, r2
 80043f6:	f7fe ffe0 	bl	80033ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043fe:	4b23      	ldr	r3, [pc, #140]	@ (800448c <xTaskResumeAll+0x12c>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004404:	429a      	cmp	r2, r3
 8004406:	d302      	bcc.n	800440e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004408:	4b21      	ldr	r3, [pc, #132]	@ (8004490 <xTaskResumeAll+0x130>)
 800440a:	2201      	movs	r2, #1
 800440c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800440e:	4b1c      	ldr	r3, [pc, #112]	@ (8004480 <xTaskResumeAll+0x120>)
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1cb      	bne.n	80043ae <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800441c:	f000 fb58 	bl	8004ad0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004420:	4b1c      	ldr	r3, [pc, #112]	@ (8004494 <xTaskResumeAll+0x134>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d010      	beq.n	800444e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800442c:	f000 f846 	bl	80044bc <xTaskIncrementTick>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d002      	beq.n	800443c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004436:	4b16      	ldr	r3, [pc, #88]	@ (8004490 <xTaskResumeAll+0x130>)
 8004438:	2201      	movs	r2, #1
 800443a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3b01      	subs	r3, #1
 8004440:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1f1      	bne.n	800442c <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004448:	4b12      	ldr	r3, [pc, #72]	@ (8004494 <xTaskResumeAll+0x134>)
 800444a:	2200      	movs	r2, #0
 800444c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800444e:	4b10      	ldr	r3, [pc, #64]	@ (8004490 <xTaskResumeAll+0x130>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d009      	beq.n	800446a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004456:	2301      	movs	r3, #1
 8004458:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800445a:	4b0f      	ldr	r3, [pc, #60]	@ (8004498 <xTaskResumeAll+0x138>)
 800445c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004460:	601a      	str	r2, [r3, #0]
 8004462:	f3bf 8f4f 	dsb	sy
 8004466:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800446a:	f001 f8ef 	bl	800564c <vPortExitCritical>

	return xAlreadyYielded;
 800446e:	68bb      	ldr	r3, [r7, #8]
}
 8004470:	4618      	mov	r0, r3
 8004472:	3710      	adds	r7, #16
 8004474:	46bd      	mov	sp, r7
 8004476:	bd80      	pop	{r7, pc}
 8004478:	20000de0 	.word	0x20000de0
 800447c:	20000db8 	.word	0x20000db8
 8004480:	20000d78 	.word	0x20000d78
 8004484:	20000dc0 	.word	0x20000dc0
 8004488:	200008e8 	.word	0x200008e8
 800448c:	200008e4 	.word	0x200008e4
 8004490:	20000dcc 	.word	0x20000dcc
 8004494:	20000dc8 	.word	0x20000dc8
 8004498:	e000ed04 	.word	0xe000ed04

0800449c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80044a2:	4b05      	ldr	r3, [pc, #20]	@ (80044b8 <xTaskGetTickCount+0x1c>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80044a8:	687b      	ldr	r3, [r7, #4]
}
 80044aa:	4618      	mov	r0, r3
 80044ac:	370c      	adds	r7, #12
 80044ae:	46bd      	mov	sp, r7
 80044b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop
 80044b8:	20000dbc 	.word	0x20000dbc

080044bc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80044c2:	2300      	movs	r3, #0
 80044c4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80044c6:	4b4f      	ldr	r3, [pc, #316]	@ (8004604 <xTaskIncrementTick+0x148>)
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	f040 8090 	bne.w	80045f0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80044d0:	4b4d      	ldr	r3, [pc, #308]	@ (8004608 <xTaskIncrementTick+0x14c>)
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	3301      	adds	r3, #1
 80044d6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80044d8:	4a4b      	ldr	r2, [pc, #300]	@ (8004608 <xTaskIncrementTick+0x14c>)
 80044da:	693b      	ldr	r3, [r7, #16]
 80044dc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80044de:	693b      	ldr	r3, [r7, #16]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d121      	bne.n	8004528 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80044e4:	4b49      	ldr	r3, [pc, #292]	@ (800460c <xTaskIncrementTick+0x150>)
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d00b      	beq.n	8004506 <xTaskIncrementTick+0x4a>
	__asm volatile
 80044ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044f2:	f383 8811 	msr	BASEPRI, r3
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	f3bf 8f4f 	dsb	sy
 80044fe:	603b      	str	r3, [r7, #0]
}
 8004500:	bf00      	nop
 8004502:	bf00      	nop
 8004504:	e7fd      	b.n	8004502 <xTaskIncrementTick+0x46>
 8004506:	4b41      	ldr	r3, [pc, #260]	@ (800460c <xTaskIncrementTick+0x150>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	60fb      	str	r3, [r7, #12]
 800450c:	4b40      	ldr	r3, [pc, #256]	@ (8004610 <xTaskIncrementTick+0x154>)
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4a3e      	ldr	r2, [pc, #248]	@ (800460c <xTaskIncrementTick+0x150>)
 8004512:	6013      	str	r3, [r2, #0]
 8004514:	4a3e      	ldr	r2, [pc, #248]	@ (8004610 <xTaskIncrementTick+0x154>)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6013      	str	r3, [r2, #0]
 800451a:	4b3e      	ldr	r3, [pc, #248]	@ (8004614 <xTaskIncrementTick+0x158>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	3301      	adds	r3, #1
 8004520:	4a3c      	ldr	r2, [pc, #240]	@ (8004614 <xTaskIncrementTick+0x158>)
 8004522:	6013      	str	r3, [r2, #0]
 8004524:	f000 fad4 	bl	8004ad0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004528:	4b3b      	ldr	r3, [pc, #236]	@ (8004618 <xTaskIncrementTick+0x15c>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	693a      	ldr	r2, [r7, #16]
 800452e:	429a      	cmp	r2, r3
 8004530:	d349      	bcc.n	80045c6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004532:	4b36      	ldr	r3, [pc, #216]	@ (800460c <xTaskIncrementTick+0x150>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d104      	bne.n	8004546 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800453c:	4b36      	ldr	r3, [pc, #216]	@ (8004618 <xTaskIncrementTick+0x15c>)
 800453e:	f04f 32ff 	mov.w	r2, #4294967295
 8004542:	601a      	str	r2, [r3, #0]
					break;
 8004544:	e03f      	b.n	80045c6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004546:	4b31      	ldr	r3, [pc, #196]	@ (800460c <xTaskIncrementTick+0x150>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	68db      	ldr	r3, [r3, #12]
 800454e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004556:	693a      	ldr	r2, [r7, #16]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	429a      	cmp	r2, r3
 800455c:	d203      	bcs.n	8004566 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800455e:	4a2e      	ldr	r2, [pc, #184]	@ (8004618 <xTaskIncrementTick+0x15c>)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004564:	e02f      	b.n	80045c6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	3304      	adds	r3, #4
 800456a:	4618      	mov	r0, r3
 800456c:	f7fe ff82 	bl	8003474 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004574:	2b00      	cmp	r3, #0
 8004576:	d004      	beq.n	8004582 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	3318      	adds	r3, #24
 800457c:	4618      	mov	r0, r3
 800457e:	f7fe ff79 	bl	8003474 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004586:	4b25      	ldr	r3, [pc, #148]	@ (800461c <xTaskIncrementTick+0x160>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	429a      	cmp	r2, r3
 800458c:	d903      	bls.n	8004596 <xTaskIncrementTick+0xda>
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004592:	4a22      	ldr	r2, [pc, #136]	@ (800461c <xTaskIncrementTick+0x160>)
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800459a:	4613      	mov	r3, r2
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4413      	add	r3, r2
 80045a0:	009b      	lsls	r3, r3, #2
 80045a2:	4a1f      	ldr	r2, [pc, #124]	@ (8004620 <xTaskIncrementTick+0x164>)
 80045a4:	441a      	add	r2, r3
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	3304      	adds	r3, #4
 80045aa:	4619      	mov	r1, r3
 80045ac:	4610      	mov	r0, r2
 80045ae:	f7fe ff04 	bl	80033ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045b2:	68bb      	ldr	r3, [r7, #8]
 80045b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045b6:	4b1b      	ldr	r3, [pc, #108]	@ (8004624 <xTaskIncrementTick+0x168>)
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045bc:	429a      	cmp	r2, r3
 80045be:	d3b8      	bcc.n	8004532 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80045c0:	2301      	movs	r3, #1
 80045c2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80045c4:	e7b5      	b.n	8004532 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80045c6:	4b17      	ldr	r3, [pc, #92]	@ (8004624 <xTaskIncrementTick+0x168>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80045cc:	4914      	ldr	r1, [pc, #80]	@ (8004620 <xTaskIncrementTick+0x164>)
 80045ce:	4613      	mov	r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	4413      	add	r3, r2
 80045d4:	009b      	lsls	r3, r3, #2
 80045d6:	440b      	add	r3, r1
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d901      	bls.n	80045e2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80045de:	2301      	movs	r3, #1
 80045e0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80045e2:	4b11      	ldr	r3, [pc, #68]	@ (8004628 <xTaskIncrementTick+0x16c>)
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d007      	beq.n	80045fa <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80045ea:	2301      	movs	r3, #1
 80045ec:	617b      	str	r3, [r7, #20]
 80045ee:	e004      	b.n	80045fa <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80045f0:	4b0e      	ldr	r3, [pc, #56]	@ (800462c <xTaskIncrementTick+0x170>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	3301      	adds	r3, #1
 80045f6:	4a0d      	ldr	r2, [pc, #52]	@ (800462c <xTaskIncrementTick+0x170>)
 80045f8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80045fa:	697b      	ldr	r3, [r7, #20]
}
 80045fc:	4618      	mov	r0, r3
 80045fe:	3718      	adds	r7, #24
 8004600:	46bd      	mov	sp, r7
 8004602:	bd80      	pop	{r7, pc}
 8004604:	20000de0 	.word	0x20000de0
 8004608:	20000dbc 	.word	0x20000dbc
 800460c:	20000d70 	.word	0x20000d70
 8004610:	20000d74 	.word	0x20000d74
 8004614:	20000dd0 	.word	0x20000dd0
 8004618:	20000dd8 	.word	0x20000dd8
 800461c:	20000dc0 	.word	0x20000dc0
 8004620:	200008e8 	.word	0x200008e8
 8004624:	200008e4 	.word	0x200008e4
 8004628:	20000dcc 	.word	0x20000dcc
 800462c:	20000dc8 	.word	0x20000dc8

08004630 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004630:	b480      	push	{r7}
 8004632:	b085      	sub	sp, #20
 8004634:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004636:	4b28      	ldr	r3, [pc, #160]	@ (80046d8 <vTaskSwitchContext+0xa8>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800463e:	4b27      	ldr	r3, [pc, #156]	@ (80046dc <vTaskSwitchContext+0xac>)
 8004640:	2201      	movs	r2, #1
 8004642:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004644:	e042      	b.n	80046cc <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8004646:	4b25      	ldr	r3, [pc, #148]	@ (80046dc <vTaskSwitchContext+0xac>)
 8004648:	2200      	movs	r2, #0
 800464a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800464c:	4b24      	ldr	r3, [pc, #144]	@ (80046e0 <vTaskSwitchContext+0xb0>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	60fb      	str	r3, [r7, #12]
 8004652:	e011      	b.n	8004678 <vTaskSwitchContext+0x48>
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10b      	bne.n	8004672 <vTaskSwitchContext+0x42>
	__asm volatile
 800465a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800465e:	f383 8811 	msr	BASEPRI, r3
 8004662:	f3bf 8f6f 	isb	sy
 8004666:	f3bf 8f4f 	dsb	sy
 800466a:	607b      	str	r3, [r7, #4]
}
 800466c:	bf00      	nop
 800466e:	bf00      	nop
 8004670:	e7fd      	b.n	800466e <vTaskSwitchContext+0x3e>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	3b01      	subs	r3, #1
 8004676:	60fb      	str	r3, [r7, #12]
 8004678:	491a      	ldr	r1, [pc, #104]	@ (80046e4 <vTaskSwitchContext+0xb4>)
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	4613      	mov	r3, r2
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	4413      	add	r3, r2
 8004682:	009b      	lsls	r3, r3, #2
 8004684:	440b      	add	r3, r1
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d0e3      	beq.n	8004654 <vTaskSwitchContext+0x24>
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	4613      	mov	r3, r2
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	4413      	add	r3, r2
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	4a13      	ldr	r2, [pc, #76]	@ (80046e4 <vTaskSwitchContext+0xb4>)
 8004698:	4413      	add	r3, r2
 800469a:	60bb      	str	r3, [r7, #8]
 800469c:	68bb      	ldr	r3, [r7, #8]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	685a      	ldr	r2, [r3, #4]
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	605a      	str	r2, [r3, #4]
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	685a      	ldr	r2, [r3, #4]
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	3308      	adds	r3, #8
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d104      	bne.n	80046bc <vTaskSwitchContext+0x8c>
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	685a      	ldr	r2, [r3, #4]
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	605a      	str	r2, [r3, #4]
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	685b      	ldr	r3, [r3, #4]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	4a09      	ldr	r2, [pc, #36]	@ (80046e8 <vTaskSwitchContext+0xb8>)
 80046c4:	6013      	str	r3, [r2, #0]
 80046c6:	4a06      	ldr	r2, [pc, #24]	@ (80046e0 <vTaskSwitchContext+0xb0>)
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	6013      	str	r3, [r2, #0]
}
 80046cc:	bf00      	nop
 80046ce:	3714      	adds	r7, #20
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr
 80046d8:	20000de0 	.word	0x20000de0
 80046dc:	20000dcc 	.word	0x20000dcc
 80046e0:	20000dc0 	.word	0x20000dc0
 80046e4:	200008e8 	.word	0x200008e8
 80046e8:	200008e4 	.word	0x200008e4

080046ec <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b084      	sub	sp, #16
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d10b      	bne.n	8004714 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80046fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004700:	f383 8811 	msr	BASEPRI, r3
 8004704:	f3bf 8f6f 	isb	sy
 8004708:	f3bf 8f4f 	dsb	sy
 800470c:	60fb      	str	r3, [r7, #12]
}
 800470e:	bf00      	nop
 8004710:	bf00      	nop
 8004712:	e7fd      	b.n	8004710 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004714:	4b07      	ldr	r3, [pc, #28]	@ (8004734 <vTaskPlaceOnEventList+0x48>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	3318      	adds	r3, #24
 800471a:	4619      	mov	r1, r3
 800471c:	6878      	ldr	r0, [r7, #4]
 800471e:	f7fe fe70 	bl	8003402 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004722:	2101      	movs	r1, #1
 8004724:	6838      	ldr	r0, [r7, #0]
 8004726:	f000 fa81 	bl	8004c2c <prvAddCurrentTaskToDelayedList>
}
 800472a:	bf00      	nop
 800472c:	3710      	adds	r7, #16
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	200008e4 	.word	0x200008e4

08004738 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004738:	b580      	push	{r7, lr}
 800473a:	b086      	sub	sp, #24
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d10b      	bne.n	8004762 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800474a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800474e:	f383 8811 	msr	BASEPRI, r3
 8004752:	f3bf 8f6f 	isb	sy
 8004756:	f3bf 8f4f 	dsb	sy
 800475a:	617b      	str	r3, [r7, #20]
}
 800475c:	bf00      	nop
 800475e:	bf00      	nop
 8004760:	e7fd      	b.n	800475e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004762:	4b0a      	ldr	r3, [pc, #40]	@ (800478c <vTaskPlaceOnEventListRestricted+0x54>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	3318      	adds	r3, #24
 8004768:	4619      	mov	r1, r3
 800476a:	68f8      	ldr	r0, [r7, #12]
 800476c:	f7fe fe25 	bl	80033ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d002      	beq.n	800477c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004776:	f04f 33ff 	mov.w	r3, #4294967295
 800477a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800477c:	6879      	ldr	r1, [r7, #4]
 800477e:	68b8      	ldr	r0, [r7, #8]
 8004780:	f000 fa54 	bl	8004c2c <prvAddCurrentTaskToDelayedList>
	}
 8004784:	bf00      	nop
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	200008e4 	.word	0x200008e4

08004790 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b086      	sub	sp, #24
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	68db      	ldr	r3, [r3, #12]
 800479e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d10b      	bne.n	80047be <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80047a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047aa:	f383 8811 	msr	BASEPRI, r3
 80047ae:	f3bf 8f6f 	isb	sy
 80047b2:	f3bf 8f4f 	dsb	sy
 80047b6:	60fb      	str	r3, [r7, #12]
}
 80047b8:	bf00      	nop
 80047ba:	bf00      	nop
 80047bc:	e7fd      	b.n	80047ba <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	3318      	adds	r3, #24
 80047c2:	4618      	mov	r0, r3
 80047c4:	f7fe fe56 	bl	8003474 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80047c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004840 <xTaskRemoveFromEventList+0xb0>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d11d      	bne.n	800480c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80047d0:	693b      	ldr	r3, [r7, #16]
 80047d2:	3304      	adds	r3, #4
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7fe fe4d 	bl	8003474 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047de:	4b19      	ldr	r3, [pc, #100]	@ (8004844 <xTaskRemoveFromEventList+0xb4>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	d903      	bls.n	80047ee <xTaskRemoveFromEventList+0x5e>
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ea:	4a16      	ldr	r2, [pc, #88]	@ (8004844 <xTaskRemoveFromEventList+0xb4>)
 80047ec:	6013      	str	r3, [r2, #0]
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047f2:	4613      	mov	r3, r2
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	4413      	add	r3, r2
 80047f8:	009b      	lsls	r3, r3, #2
 80047fa:	4a13      	ldr	r2, [pc, #76]	@ (8004848 <xTaskRemoveFromEventList+0xb8>)
 80047fc:	441a      	add	r2, r3
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	3304      	adds	r3, #4
 8004802:	4619      	mov	r1, r3
 8004804:	4610      	mov	r0, r2
 8004806:	f7fe fdd8 	bl	80033ba <vListInsertEnd>
 800480a:	e005      	b.n	8004818 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	3318      	adds	r3, #24
 8004810:	4619      	mov	r1, r3
 8004812:	480e      	ldr	r0, [pc, #56]	@ (800484c <xTaskRemoveFromEventList+0xbc>)
 8004814:	f7fe fdd1 	bl	80033ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800481c:	4b0c      	ldr	r3, [pc, #48]	@ (8004850 <xTaskRemoveFromEventList+0xc0>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004822:	429a      	cmp	r2, r3
 8004824:	d905      	bls.n	8004832 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004826:	2301      	movs	r3, #1
 8004828:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800482a:	4b0a      	ldr	r3, [pc, #40]	@ (8004854 <xTaskRemoveFromEventList+0xc4>)
 800482c:	2201      	movs	r2, #1
 800482e:	601a      	str	r2, [r3, #0]
 8004830:	e001      	b.n	8004836 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004832:	2300      	movs	r3, #0
 8004834:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004836:	697b      	ldr	r3, [r7, #20]
}
 8004838:	4618      	mov	r0, r3
 800483a:	3718      	adds	r7, #24
 800483c:	46bd      	mov	sp, r7
 800483e:	bd80      	pop	{r7, pc}
 8004840:	20000de0 	.word	0x20000de0
 8004844:	20000dc0 	.word	0x20000dc0
 8004848:	200008e8 	.word	0x200008e8
 800484c:	20000d78 	.word	0x20000d78
 8004850:	200008e4 	.word	0x200008e4
 8004854:	20000dcc 	.word	0x20000dcc

08004858 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004858:	b480      	push	{r7}
 800485a:	b083      	sub	sp, #12
 800485c:	af00      	add	r7, sp, #0
 800485e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004860:	4b06      	ldr	r3, [pc, #24]	@ (800487c <vTaskInternalSetTimeOutState+0x24>)
 8004862:	681a      	ldr	r2, [r3, #0]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004868:	4b05      	ldr	r3, [pc, #20]	@ (8004880 <vTaskInternalSetTimeOutState+0x28>)
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	605a      	str	r2, [r3, #4]
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr
 800487c:	20000dd0 	.word	0x20000dd0
 8004880:	20000dbc 	.word	0x20000dbc

08004884 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b088      	sub	sp, #32
 8004888:	af00      	add	r7, sp, #0
 800488a:	6078      	str	r0, [r7, #4]
 800488c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10b      	bne.n	80048ac <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004898:	f383 8811 	msr	BASEPRI, r3
 800489c:	f3bf 8f6f 	isb	sy
 80048a0:	f3bf 8f4f 	dsb	sy
 80048a4:	613b      	str	r3, [r7, #16]
}
 80048a6:	bf00      	nop
 80048a8:	bf00      	nop
 80048aa:	e7fd      	b.n	80048a8 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10b      	bne.n	80048ca <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80048b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048b6:	f383 8811 	msr	BASEPRI, r3
 80048ba:	f3bf 8f6f 	isb	sy
 80048be:	f3bf 8f4f 	dsb	sy
 80048c2:	60fb      	str	r3, [r7, #12]
}
 80048c4:	bf00      	nop
 80048c6:	bf00      	nop
 80048c8:	e7fd      	b.n	80048c6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80048ca:	f000 fe8d 	bl	80055e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80048ce:	4b1d      	ldr	r3, [pc, #116]	@ (8004944 <xTaskCheckForTimeOut+0xc0>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	1ad3      	subs	r3, r2, r3
 80048dc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e6:	d102      	bne.n	80048ee <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80048e8:	2300      	movs	r3, #0
 80048ea:	61fb      	str	r3, [r7, #28]
 80048ec:	e023      	b.n	8004936 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	4b15      	ldr	r3, [pc, #84]	@ (8004948 <xTaskCheckForTimeOut+0xc4>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	429a      	cmp	r2, r3
 80048f8:	d007      	beq.n	800490a <xTaskCheckForTimeOut+0x86>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	429a      	cmp	r2, r3
 8004902:	d302      	bcc.n	800490a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004904:	2301      	movs	r3, #1
 8004906:	61fb      	str	r3, [r7, #28]
 8004908:	e015      	b.n	8004936 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	697a      	ldr	r2, [r7, #20]
 8004910:	429a      	cmp	r2, r3
 8004912:	d20b      	bcs.n	800492c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	681a      	ldr	r2, [r3, #0]
 8004918:	697b      	ldr	r3, [r7, #20]
 800491a:	1ad2      	subs	r2, r2, r3
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f7ff ff99 	bl	8004858 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004926:	2300      	movs	r3, #0
 8004928:	61fb      	str	r3, [r7, #28]
 800492a:	e004      	b.n	8004936 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	2200      	movs	r2, #0
 8004930:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004932:	2301      	movs	r3, #1
 8004934:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004936:	f000 fe89 	bl	800564c <vPortExitCritical>

	return xReturn;
 800493a:	69fb      	ldr	r3, [r7, #28]
}
 800493c:	4618      	mov	r0, r3
 800493e:	3720      	adds	r7, #32
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}
 8004944:	20000dbc 	.word	0x20000dbc
 8004948:	20000dd0 	.word	0x20000dd0

0800494c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800494c:	b480      	push	{r7}
 800494e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004950:	4b03      	ldr	r3, [pc, #12]	@ (8004960 <vTaskMissedYield+0x14>)
 8004952:	2201      	movs	r2, #1
 8004954:	601a      	str	r2, [r3, #0]
}
 8004956:	bf00      	nop
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	20000dcc 	.word	0x20000dcc

08004964 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b082      	sub	sp, #8
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800496c:	f000 f852 	bl	8004a14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004970:	4b06      	ldr	r3, [pc, #24]	@ (800498c <prvIdleTask+0x28>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2b01      	cmp	r3, #1
 8004976:	d9f9      	bls.n	800496c <prvIdleTask+0x8>
			{
				taskYIELD();
 8004978:	4b05      	ldr	r3, [pc, #20]	@ (8004990 <prvIdleTask+0x2c>)
 800497a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800497e:	601a      	str	r2, [r3, #0]
 8004980:	f3bf 8f4f 	dsb	sy
 8004984:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004988:	e7f0      	b.n	800496c <prvIdleTask+0x8>
 800498a:	bf00      	nop
 800498c:	200008e8 	.word	0x200008e8
 8004990:	e000ed04 	.word	0xe000ed04

08004994 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800499a:	2300      	movs	r3, #0
 800499c:	607b      	str	r3, [r7, #4]
 800499e:	e00c      	b.n	80049ba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80049a0:	687a      	ldr	r2, [r7, #4]
 80049a2:	4613      	mov	r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	4a12      	ldr	r2, [pc, #72]	@ (80049f4 <prvInitialiseTaskLists+0x60>)
 80049ac:	4413      	add	r3, r2
 80049ae:	4618      	mov	r0, r3
 80049b0:	f7fe fcd6 	bl	8003360 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	3301      	adds	r3, #1
 80049b8:	607b      	str	r3, [r7, #4]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2b37      	cmp	r3, #55	@ 0x37
 80049be:	d9ef      	bls.n	80049a0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80049c0:	480d      	ldr	r0, [pc, #52]	@ (80049f8 <prvInitialiseTaskLists+0x64>)
 80049c2:	f7fe fccd 	bl	8003360 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80049c6:	480d      	ldr	r0, [pc, #52]	@ (80049fc <prvInitialiseTaskLists+0x68>)
 80049c8:	f7fe fcca 	bl	8003360 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80049cc:	480c      	ldr	r0, [pc, #48]	@ (8004a00 <prvInitialiseTaskLists+0x6c>)
 80049ce:	f7fe fcc7 	bl	8003360 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80049d2:	480c      	ldr	r0, [pc, #48]	@ (8004a04 <prvInitialiseTaskLists+0x70>)
 80049d4:	f7fe fcc4 	bl	8003360 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80049d8:	480b      	ldr	r0, [pc, #44]	@ (8004a08 <prvInitialiseTaskLists+0x74>)
 80049da:	f7fe fcc1 	bl	8003360 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80049de:	4b0b      	ldr	r3, [pc, #44]	@ (8004a0c <prvInitialiseTaskLists+0x78>)
 80049e0:	4a05      	ldr	r2, [pc, #20]	@ (80049f8 <prvInitialiseTaskLists+0x64>)
 80049e2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80049e4:	4b0a      	ldr	r3, [pc, #40]	@ (8004a10 <prvInitialiseTaskLists+0x7c>)
 80049e6:	4a05      	ldr	r2, [pc, #20]	@ (80049fc <prvInitialiseTaskLists+0x68>)
 80049e8:	601a      	str	r2, [r3, #0]
}
 80049ea:	bf00      	nop
 80049ec:	3708      	adds	r7, #8
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd80      	pop	{r7, pc}
 80049f2:	bf00      	nop
 80049f4:	200008e8 	.word	0x200008e8
 80049f8:	20000d48 	.word	0x20000d48
 80049fc:	20000d5c 	.word	0x20000d5c
 8004a00:	20000d78 	.word	0x20000d78
 8004a04:	20000d8c 	.word	0x20000d8c
 8004a08:	20000da4 	.word	0x20000da4
 8004a0c:	20000d70 	.word	0x20000d70
 8004a10:	20000d74 	.word	0x20000d74

08004a14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b082      	sub	sp, #8
 8004a18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a1a:	e019      	b.n	8004a50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004a1c:	f000 fde4 	bl	80055e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a20:	4b10      	ldr	r3, [pc, #64]	@ (8004a64 <prvCheckTasksWaitingTermination+0x50>)
 8004a22:	68db      	ldr	r3, [r3, #12]
 8004a24:	68db      	ldr	r3, [r3, #12]
 8004a26:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	f7fe fd21 	bl	8003474 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004a32:	4b0d      	ldr	r3, [pc, #52]	@ (8004a68 <prvCheckTasksWaitingTermination+0x54>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	3b01      	subs	r3, #1
 8004a38:	4a0b      	ldr	r2, [pc, #44]	@ (8004a68 <prvCheckTasksWaitingTermination+0x54>)
 8004a3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004a3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004a6c <prvCheckTasksWaitingTermination+0x58>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	3b01      	subs	r3, #1
 8004a42:	4a0a      	ldr	r2, [pc, #40]	@ (8004a6c <prvCheckTasksWaitingTermination+0x58>)
 8004a44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004a46:	f000 fe01 	bl	800564c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 f810 	bl	8004a70 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004a50:	4b06      	ldr	r3, [pc, #24]	@ (8004a6c <prvCheckTasksWaitingTermination+0x58>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d1e1      	bne.n	8004a1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a58:	bf00      	nop
 8004a5a:	bf00      	nop
 8004a5c:	3708      	adds	r7, #8
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}
 8004a62:	bf00      	nop
 8004a64:	20000d8c 	.word	0x20000d8c
 8004a68:	20000db8 	.word	0x20000db8
 8004a6c:	20000da0 	.word	0x20000da0

08004a70 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d108      	bne.n	8004a94 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a86:	4618      	mov	r0, r3
 8004a88:	f000 ff9e 	bl	80059c8 <vPortFree>
				vPortFree( pxTCB );
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f000 ff9b 	bl	80059c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a92:	e019      	b.n	8004ac8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d103      	bne.n	8004aa6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 ff92 	bl	80059c8 <vPortFree>
	}
 8004aa4:	e010      	b.n	8004ac8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d00b      	beq.n	8004ac8 <prvDeleteTCB+0x58>
	__asm volatile
 8004ab0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab4:	f383 8811 	msr	BASEPRI, r3
 8004ab8:	f3bf 8f6f 	isb	sy
 8004abc:	f3bf 8f4f 	dsb	sy
 8004ac0:	60fb      	str	r3, [r7, #12]
}
 8004ac2:	bf00      	nop
 8004ac4:	bf00      	nop
 8004ac6:	e7fd      	b.n	8004ac4 <prvDeleteTCB+0x54>
	}
 8004ac8:	bf00      	nop
 8004aca:	3710      	adds	r7, #16
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004ad6:	4b0c      	ldr	r3, [pc, #48]	@ (8004b08 <prvResetNextTaskUnblockTime+0x38>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d104      	bne.n	8004aea <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8004b0c <prvResetNextTaskUnblockTime+0x3c>)
 8004ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8004ae6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004ae8:	e008      	b.n	8004afc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004aea:	4b07      	ldr	r3, [pc, #28]	@ (8004b08 <prvResetNextTaskUnblockTime+0x38>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	4a04      	ldr	r2, [pc, #16]	@ (8004b0c <prvResetNextTaskUnblockTime+0x3c>)
 8004afa:	6013      	str	r3, [r2, #0]
}
 8004afc:	bf00      	nop
 8004afe:	370c      	adds	r7, #12
 8004b00:	46bd      	mov	sp, r7
 8004b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b06:	4770      	bx	lr
 8004b08:	20000d70 	.word	0x20000d70
 8004b0c:	20000dd8 	.word	0x20000dd8

08004b10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b10:	b480      	push	{r7}
 8004b12:	b083      	sub	sp, #12
 8004b14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b16:	4b0b      	ldr	r3, [pc, #44]	@ (8004b44 <xTaskGetSchedulerState+0x34>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d102      	bne.n	8004b24 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	607b      	str	r3, [r7, #4]
 8004b22:	e008      	b.n	8004b36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b24:	4b08      	ldr	r3, [pc, #32]	@ (8004b48 <xTaskGetSchedulerState+0x38>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d102      	bne.n	8004b32 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	607b      	str	r3, [r7, #4]
 8004b30:	e001      	b.n	8004b36 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b32:	2300      	movs	r3, #0
 8004b34:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b36:	687b      	ldr	r3, [r7, #4]
	}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	370c      	adds	r7, #12
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b42:	4770      	bx	lr
 8004b44:	20000dc4 	.word	0x20000dc4
 8004b48:	20000de0 	.word	0x20000de0

08004b4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b086      	sub	sp, #24
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004b58:	2300      	movs	r3, #0
 8004b5a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d058      	beq.n	8004c14 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004b62:	4b2f      	ldr	r3, [pc, #188]	@ (8004c20 <xTaskPriorityDisinherit+0xd4>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	693a      	ldr	r2, [r7, #16]
 8004b68:	429a      	cmp	r2, r3
 8004b6a:	d00b      	beq.n	8004b84 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8004b6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	60fb      	str	r3, [r7, #12]
}
 8004b7e:	bf00      	nop
 8004b80:	bf00      	nop
 8004b82:	e7fd      	b.n	8004b80 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d10b      	bne.n	8004ba4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8004b8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b90:	f383 8811 	msr	BASEPRI, r3
 8004b94:	f3bf 8f6f 	isb	sy
 8004b98:	f3bf 8f4f 	dsb	sy
 8004b9c:	60bb      	str	r3, [r7, #8]
}
 8004b9e:	bf00      	nop
 8004ba0:	bf00      	nop
 8004ba2:	e7fd      	b.n	8004ba0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8004ba4:	693b      	ldr	r3, [r7, #16]
 8004ba6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ba8:	1e5a      	subs	r2, r3, #1
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004bae:	693b      	ldr	r3, [r7, #16]
 8004bb0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004bb6:	429a      	cmp	r2, r3
 8004bb8:	d02c      	beq.n	8004c14 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d128      	bne.n	8004c14 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	3304      	adds	r3, #4
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	f7fe fc54 	bl	8003474 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004bd0:	693b      	ldr	r3, [r7, #16]
 8004bd2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bd8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004be4:	4b0f      	ldr	r3, [pc, #60]	@ (8004c24 <xTaskPriorityDisinherit+0xd8>)
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d903      	bls.n	8004bf4 <xTaskPriorityDisinherit+0xa8>
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004bf0:	4a0c      	ldr	r2, [pc, #48]	@ (8004c24 <xTaskPriorityDisinherit+0xd8>)
 8004bf2:	6013      	str	r3, [r2, #0]
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004bf8:	4613      	mov	r3, r2
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	4a09      	ldr	r2, [pc, #36]	@ (8004c28 <xTaskPriorityDisinherit+0xdc>)
 8004c02:	441a      	add	r2, r3
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	3304      	adds	r3, #4
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4610      	mov	r0, r2
 8004c0c:	f7fe fbd5 	bl	80033ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c10:	2301      	movs	r3, #1
 8004c12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c14:	697b      	ldr	r3, [r7, #20]
	}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3718      	adds	r7, #24
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bd80      	pop	{r7, pc}
 8004c1e:	bf00      	nop
 8004c20:	200008e4 	.word	0x200008e4
 8004c24:	20000dc0 	.word	0x20000dc0
 8004c28:	200008e8 	.word	0x200008e8

08004c2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b084      	sub	sp, #16
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c36:	4b21      	ldr	r3, [pc, #132]	@ (8004cbc <prvAddCurrentTaskToDelayedList+0x90>)
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c3c:	4b20      	ldr	r3, [pc, #128]	@ (8004cc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	3304      	adds	r3, #4
 8004c42:	4618      	mov	r0, r3
 8004c44:	f7fe fc16 	bl	8003474 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c4e:	d10a      	bne.n	8004c66 <prvAddCurrentTaskToDelayedList+0x3a>
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d007      	beq.n	8004c66 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c56:	4b1a      	ldr	r3, [pc, #104]	@ (8004cc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	3304      	adds	r3, #4
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	4819      	ldr	r0, [pc, #100]	@ (8004cc4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004c60:	f7fe fbab 	bl	80033ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c64:	e026      	b.n	8004cb4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c66:	68fa      	ldr	r2, [r7, #12]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4413      	add	r3, r2
 8004c6c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c6e:	4b14      	ldr	r3, [pc, #80]	@ (8004cc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c76:	68ba      	ldr	r2, [r7, #8]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d209      	bcs.n	8004c92 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c7e:	4b12      	ldr	r3, [pc, #72]	@ (8004cc8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	4b0f      	ldr	r3, [pc, #60]	@ (8004cc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	3304      	adds	r3, #4
 8004c88:	4619      	mov	r1, r3
 8004c8a:	4610      	mov	r0, r2
 8004c8c:	f7fe fbb9 	bl	8003402 <vListInsert>
}
 8004c90:	e010      	b.n	8004cb4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c92:	4b0e      	ldr	r3, [pc, #56]	@ (8004ccc <prvAddCurrentTaskToDelayedList+0xa0>)
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	4610      	mov	r0, r2
 8004ca0:	f7fe fbaf 	bl	8003402 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004ca4:	4b0a      	ldr	r3, [pc, #40]	@ (8004cd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	68ba      	ldr	r2, [r7, #8]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d202      	bcs.n	8004cb4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004cae:	4a08      	ldr	r2, [pc, #32]	@ (8004cd0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	6013      	str	r3, [r2, #0]
}
 8004cb4:	bf00      	nop
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}
 8004cbc:	20000dbc 	.word	0x20000dbc
 8004cc0:	200008e4 	.word	0x200008e4
 8004cc4:	20000da4 	.word	0x20000da4
 8004cc8:	20000d74 	.word	0x20000d74
 8004ccc:	20000d70 	.word	0x20000d70
 8004cd0:	20000dd8 	.word	0x20000dd8

08004cd4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b08a      	sub	sp, #40	@ 0x28
 8004cd8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004cde:	f000 fb13 	bl	8005308 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004ce2:	4b1d      	ldr	r3, [pc, #116]	@ (8004d58 <xTimerCreateTimerTask+0x84>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d021      	beq.n	8004d2e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004cea:	2300      	movs	r3, #0
 8004cec:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004cee:	2300      	movs	r3, #0
 8004cf0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004cf2:	1d3a      	adds	r2, r7, #4
 8004cf4:	f107 0108 	add.w	r1, r7, #8
 8004cf8:	f107 030c 	add.w	r3, r7, #12
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7fe fb15 	bl	800332c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004d02:	6879      	ldr	r1, [r7, #4]
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	68fa      	ldr	r2, [r7, #12]
 8004d08:	9202      	str	r2, [sp, #8]
 8004d0a:	9301      	str	r3, [sp, #4]
 8004d0c:	2302      	movs	r3, #2
 8004d0e:	9300      	str	r3, [sp, #0]
 8004d10:	2300      	movs	r3, #0
 8004d12:	460a      	mov	r2, r1
 8004d14:	4911      	ldr	r1, [pc, #68]	@ (8004d5c <xTimerCreateTimerTask+0x88>)
 8004d16:	4812      	ldr	r0, [pc, #72]	@ (8004d60 <xTimerCreateTimerTask+0x8c>)
 8004d18:	f7ff f8d0 	bl	8003ebc <xTaskCreateStatic>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	4a11      	ldr	r2, [pc, #68]	@ (8004d64 <xTimerCreateTimerTask+0x90>)
 8004d20:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004d22:	4b10      	ldr	r3, [pc, #64]	@ (8004d64 <xTimerCreateTimerTask+0x90>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d001      	beq.n	8004d2e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d10b      	bne.n	8004d4c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8004d34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d38:	f383 8811 	msr	BASEPRI, r3
 8004d3c:	f3bf 8f6f 	isb	sy
 8004d40:	f3bf 8f4f 	dsb	sy
 8004d44:	613b      	str	r3, [r7, #16]
}
 8004d46:	bf00      	nop
 8004d48:	bf00      	nop
 8004d4a:	e7fd      	b.n	8004d48 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004d4c:	697b      	ldr	r3, [r7, #20]
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3718      	adds	r7, #24
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	20000e14 	.word	0x20000e14
 8004d5c:	08005ca8 	.word	0x08005ca8
 8004d60:	08004ea1 	.word	0x08004ea1
 8004d64:	20000e18 	.word	0x20000e18

08004d68 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b08a      	sub	sp, #40	@ 0x28
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	60f8      	str	r0, [r7, #12]
 8004d70:	60b9      	str	r1, [r7, #8]
 8004d72:	607a      	str	r2, [r7, #4]
 8004d74:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004d76:	2300      	movs	r3, #0
 8004d78:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d10b      	bne.n	8004d98 <xTimerGenericCommand+0x30>
	__asm volatile
 8004d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d84:	f383 8811 	msr	BASEPRI, r3
 8004d88:	f3bf 8f6f 	isb	sy
 8004d8c:	f3bf 8f4f 	dsb	sy
 8004d90:	623b      	str	r3, [r7, #32]
}
 8004d92:	bf00      	nop
 8004d94:	bf00      	nop
 8004d96:	e7fd      	b.n	8004d94 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004d98:	4b19      	ldr	r3, [pc, #100]	@ (8004e00 <xTimerGenericCommand+0x98>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d02a      	beq.n	8004df6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004da0:	68bb      	ldr	r3, [r7, #8]
 8004da2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	2b05      	cmp	r3, #5
 8004db0:	dc18      	bgt.n	8004de4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004db2:	f7ff fead 	bl	8004b10 <xTaskGetSchedulerState>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b02      	cmp	r3, #2
 8004dba:	d109      	bne.n	8004dd0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004dbc:	4b10      	ldr	r3, [pc, #64]	@ (8004e00 <xTimerGenericCommand+0x98>)
 8004dbe:	6818      	ldr	r0, [r3, #0]
 8004dc0:	f107 0110 	add.w	r1, r7, #16
 8004dc4:	2300      	movs	r3, #0
 8004dc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dc8:	f7fe fc88 	bl	80036dc <xQueueGenericSend>
 8004dcc:	6278      	str	r0, [r7, #36]	@ 0x24
 8004dce:	e012      	b.n	8004df6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	@ (8004e00 <xTimerGenericCommand+0x98>)
 8004dd2:	6818      	ldr	r0, [r3, #0]
 8004dd4:	f107 0110 	add.w	r1, r7, #16
 8004dd8:	2300      	movs	r3, #0
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f7fe fc7e 	bl	80036dc <xQueueGenericSend>
 8004de0:	6278      	str	r0, [r7, #36]	@ 0x24
 8004de2:	e008      	b.n	8004df6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004de4:	4b06      	ldr	r3, [pc, #24]	@ (8004e00 <xTimerGenericCommand+0x98>)
 8004de6:	6818      	ldr	r0, [r3, #0]
 8004de8:	f107 0110 	add.w	r1, r7, #16
 8004dec:	2300      	movs	r3, #0
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	f7fe fd76 	bl	80038e0 <xQueueGenericSendFromISR>
 8004df4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004df8:	4618      	mov	r0, r3
 8004dfa:	3728      	adds	r7, #40	@ 0x28
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	bd80      	pop	{r7, pc}
 8004e00:	20000e14 	.word	0x20000e14

08004e04 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b088      	sub	sp, #32
 8004e08:	af02      	add	r7, sp, #8
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e0e:	4b23      	ldr	r3, [pc, #140]	@ (8004e9c <prvProcessExpiredTimer+0x98>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	68db      	ldr	r3, [r3, #12]
 8004e16:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7fe fb29 	bl	8003474 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d023      	beq.n	8004e78 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	699a      	ldr	r2, [r3, #24]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	18d1      	adds	r1, r2, r3
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	683a      	ldr	r2, [r7, #0]
 8004e3c:	6978      	ldr	r0, [r7, #20]
 8004e3e:	f000 f8d5 	bl	8004fec <prvInsertTimerInActiveList>
 8004e42:	4603      	mov	r3, r0
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d020      	beq.n	8004e8a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004e48:	2300      	movs	r3, #0
 8004e4a:	9300      	str	r3, [sp, #0]
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	687a      	ldr	r2, [r7, #4]
 8004e50:	2100      	movs	r1, #0
 8004e52:	6978      	ldr	r0, [r7, #20]
 8004e54:	f7ff ff88 	bl	8004d68 <xTimerGenericCommand>
 8004e58:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004e5a:	693b      	ldr	r3, [r7, #16]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d114      	bne.n	8004e8a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8004e60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e64:	f383 8811 	msr	BASEPRI, r3
 8004e68:	f3bf 8f6f 	isb	sy
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	60fb      	str	r3, [r7, #12]
}
 8004e72:	bf00      	nop
 8004e74:	bf00      	nop
 8004e76:	e7fd      	b.n	8004e74 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8004e7e:	f023 0301 	bic.w	r3, r3, #1
 8004e82:	b2da      	uxtb	r2, r3
 8004e84:	697b      	ldr	r3, [r7, #20]
 8004e86:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e8a:	697b      	ldr	r3, [r7, #20]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	6978      	ldr	r0, [r7, #20]
 8004e90:	4798      	blx	r3
}
 8004e92:	bf00      	nop
 8004e94:	3718      	adds	r7, #24
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
 8004e9a:	bf00      	nop
 8004e9c:	20000e0c 	.word	0x20000e0c

08004ea0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b084      	sub	sp, #16
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ea8:	f107 0308 	add.w	r3, r7, #8
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 f859 	bl	8004f64 <prvGetNextExpireTime>
 8004eb2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	68f8      	ldr	r0, [r7, #12]
 8004eba:	f000 f805 	bl	8004ec8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004ebe:	f000 f8d7 	bl	8005070 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004ec2:	bf00      	nop
 8004ec4:	e7f0      	b.n	8004ea8 <prvTimerTask+0x8>
	...

08004ec8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b084      	sub	sp, #16
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004ed2:	f7ff fa37 	bl	8004344 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004ed6:	f107 0308 	add.w	r3, r7, #8
 8004eda:	4618      	mov	r0, r3
 8004edc:	f000 f866 	bl	8004fac <prvSampleTimeNow>
 8004ee0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d130      	bne.n	8004f4a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10a      	bne.n	8004f04 <prvProcessTimerOrBlockTask+0x3c>
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	429a      	cmp	r2, r3
 8004ef4:	d806      	bhi.n	8004f04 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004ef6:	f7ff fa33 	bl	8004360 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004efa:	68f9      	ldr	r1, [r7, #12]
 8004efc:	6878      	ldr	r0, [r7, #4]
 8004efe:	f7ff ff81 	bl	8004e04 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004f02:	e024      	b.n	8004f4e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d008      	beq.n	8004f1c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004f0a:	4b13      	ldr	r3, [pc, #76]	@ (8004f58 <prvProcessTimerOrBlockTask+0x90>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <prvProcessTimerOrBlockTask+0x50>
 8004f14:	2301      	movs	r3, #1
 8004f16:	e000      	b.n	8004f1a <prvProcessTimerOrBlockTask+0x52>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f5c <prvProcessTimerOrBlockTask+0x94>)
 8004f1e:	6818      	ldr	r0, [r3, #0]
 8004f20:	687a      	ldr	r2, [r7, #4]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	683a      	ldr	r2, [r7, #0]
 8004f28:	4619      	mov	r1, r3
 8004f2a:	f7fe ff93 	bl	8003e54 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004f2e:	f7ff fa17 	bl	8004360 <xTaskResumeAll>
 8004f32:	4603      	mov	r3, r0
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d10a      	bne.n	8004f4e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004f38:	4b09      	ldr	r3, [pc, #36]	@ (8004f60 <prvProcessTimerOrBlockTask+0x98>)
 8004f3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f3e:	601a      	str	r2, [r3, #0]
 8004f40:	f3bf 8f4f 	dsb	sy
 8004f44:	f3bf 8f6f 	isb	sy
}
 8004f48:	e001      	b.n	8004f4e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004f4a:	f7ff fa09 	bl	8004360 <xTaskResumeAll>
}
 8004f4e:	bf00      	nop
 8004f50:	3710      	adds	r7, #16
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}
 8004f56:	bf00      	nop
 8004f58:	20000e10 	.word	0x20000e10
 8004f5c:	20000e14 	.word	0x20000e14
 8004f60:	e000ed04 	.word	0xe000ed04

08004f64 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004f64:	b480      	push	{r7}
 8004f66:	b085      	sub	sp, #20
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004f6c:	4b0e      	ldr	r3, [pc, #56]	@ (8004fa8 <prvGetNextExpireTime+0x44>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <prvGetNextExpireTime+0x16>
 8004f76:	2201      	movs	r2, #1
 8004f78:	e000      	b.n	8004f7c <prvGetNextExpireTime+0x18>
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d105      	bne.n	8004f94 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f88:	4b07      	ldr	r3, [pc, #28]	@ (8004fa8 <prvGetNextExpireTime+0x44>)
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68db      	ldr	r3, [r3, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	60fb      	str	r3, [r7, #12]
 8004f92:	e001      	b.n	8004f98 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004f94:	2300      	movs	r3, #0
 8004f96:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004f98:	68fb      	ldr	r3, [r7, #12]
}
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	3714      	adds	r7, #20
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa4:	4770      	bx	lr
 8004fa6:	bf00      	nop
 8004fa8:	20000e0c 	.word	0x20000e0c

08004fac <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004fb4:	f7ff fa72 	bl	800449c <xTaskGetTickCount>
 8004fb8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004fba:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe8 <prvSampleTimeNow+0x3c>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d205      	bcs.n	8004fd0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004fc4:	f000 f93a 	bl	800523c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	2201      	movs	r2, #1
 8004fcc:	601a      	str	r2, [r3, #0]
 8004fce:	e002      	b.n	8004fd6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004fd6:	4a04      	ldr	r2, [pc, #16]	@ (8004fe8 <prvSampleTimeNow+0x3c>)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004fdc:	68fb      	ldr	r3, [r7, #12]
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	20000e1c 	.word	0x20000e1c

08004fec <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b086      	sub	sp, #24
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
 8004ff8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	68ba      	ldr	r2, [r7, #8]
 8005002:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	68fa      	ldr	r2, [r7, #12]
 8005008:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800500a:	68ba      	ldr	r2, [r7, #8]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	429a      	cmp	r2, r3
 8005010:	d812      	bhi.n	8005038 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	1ad2      	subs	r2, r2, r3
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	429a      	cmp	r2, r3
 800501e:	d302      	bcc.n	8005026 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005020:	2301      	movs	r3, #1
 8005022:	617b      	str	r3, [r7, #20]
 8005024:	e01b      	b.n	800505e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005026:	4b10      	ldr	r3, [pc, #64]	@ (8005068 <prvInsertTimerInActiveList+0x7c>)
 8005028:	681a      	ldr	r2, [r3, #0]
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	3304      	adds	r3, #4
 800502e:	4619      	mov	r1, r3
 8005030:	4610      	mov	r0, r2
 8005032:	f7fe f9e6 	bl	8003402 <vListInsert>
 8005036:	e012      	b.n	800505e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	429a      	cmp	r2, r3
 800503e:	d206      	bcs.n	800504e <prvInsertTimerInActiveList+0x62>
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	683b      	ldr	r3, [r7, #0]
 8005044:	429a      	cmp	r2, r3
 8005046:	d302      	bcc.n	800504e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005048:	2301      	movs	r3, #1
 800504a:	617b      	str	r3, [r7, #20]
 800504c:	e007      	b.n	800505e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800504e:	4b07      	ldr	r3, [pc, #28]	@ (800506c <prvInsertTimerInActiveList+0x80>)
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	3304      	adds	r3, #4
 8005056:	4619      	mov	r1, r3
 8005058:	4610      	mov	r0, r2
 800505a:	f7fe f9d2 	bl	8003402 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800505e:	697b      	ldr	r3, [r7, #20]
}
 8005060:	4618      	mov	r0, r3
 8005062:	3718      	adds	r7, #24
 8005064:	46bd      	mov	sp, r7
 8005066:	bd80      	pop	{r7, pc}
 8005068:	20000e10 	.word	0x20000e10
 800506c:	20000e0c 	.word	0x20000e0c

08005070 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b08e      	sub	sp, #56	@ 0x38
 8005074:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005076:	e0ce      	b.n	8005216 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b00      	cmp	r3, #0
 800507c:	da19      	bge.n	80050b2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800507e:	1d3b      	adds	r3, r7, #4
 8005080:	3304      	adds	r3, #4
 8005082:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005084:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10b      	bne.n	80050a2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800508a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800508e:	f383 8811 	msr	BASEPRI, r3
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	61fb      	str	r3, [r7, #28]
}
 800509c:	bf00      	nop
 800509e:	bf00      	nop
 80050a0:	e7fd      	b.n	800509e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80050a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050a8:	6850      	ldr	r0, [r2, #4]
 80050aa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050ac:	6892      	ldr	r2, [r2, #8]
 80050ae:	4611      	mov	r1, r2
 80050b0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	f2c0 80ae 	blt.w	8005216 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80050be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d004      	beq.n	80050d0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80050c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c8:	3304      	adds	r3, #4
 80050ca:	4618      	mov	r0, r3
 80050cc:	f7fe f9d2 	bl	8003474 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80050d0:	463b      	mov	r3, r7
 80050d2:	4618      	mov	r0, r3
 80050d4:	f7ff ff6a 	bl	8004fac <prvSampleTimeNow>
 80050d8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2b09      	cmp	r3, #9
 80050de:	f200 8097 	bhi.w	8005210 <prvProcessReceivedCommands+0x1a0>
 80050e2:	a201      	add	r2, pc, #4	@ (adr r2, 80050e8 <prvProcessReceivedCommands+0x78>)
 80050e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050e8:	08005111 	.word	0x08005111
 80050ec:	08005111 	.word	0x08005111
 80050f0:	08005111 	.word	0x08005111
 80050f4:	08005187 	.word	0x08005187
 80050f8:	0800519b 	.word	0x0800519b
 80050fc:	080051e7 	.word	0x080051e7
 8005100:	08005111 	.word	0x08005111
 8005104:	08005111 	.word	0x08005111
 8005108:	08005187 	.word	0x08005187
 800510c:	0800519b 	.word	0x0800519b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005110:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005112:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005116:	f043 0301 	orr.w	r3, r3, #1
 800511a:	b2da      	uxtb	r2, r3
 800511c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800511e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005122:	68ba      	ldr	r2, [r7, #8]
 8005124:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005126:	699b      	ldr	r3, [r3, #24]
 8005128:	18d1      	adds	r1, r2, r3
 800512a:	68bb      	ldr	r3, [r7, #8]
 800512c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800512e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005130:	f7ff ff5c 	bl	8004fec <prvInsertTimerInActiveList>
 8005134:	4603      	mov	r3, r0
 8005136:	2b00      	cmp	r3, #0
 8005138:	d06c      	beq.n	8005214 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800513a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800513c:	6a1b      	ldr	r3, [r3, #32]
 800513e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005140:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005144:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005148:	f003 0304 	and.w	r3, r3, #4
 800514c:	2b00      	cmp	r3, #0
 800514e:	d061      	beq.n	8005214 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	441a      	add	r2, r3
 8005158:	2300      	movs	r3, #0
 800515a:	9300      	str	r3, [sp, #0]
 800515c:	2300      	movs	r3, #0
 800515e:	2100      	movs	r1, #0
 8005160:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005162:	f7ff fe01 	bl	8004d68 <xTimerGenericCommand>
 8005166:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005168:	6a3b      	ldr	r3, [r7, #32]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d152      	bne.n	8005214 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800516e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	61bb      	str	r3, [r7, #24]
}
 8005180:	bf00      	nop
 8005182:	bf00      	nop
 8005184:	e7fd      	b.n	8005182 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005188:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800518c:	f023 0301 	bic.w	r3, r3, #1
 8005190:	b2da      	uxtb	r2, r3
 8005192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005194:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005198:	e03d      	b.n	8005216 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800519a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800519c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80051a0:	f043 0301 	orr.w	r3, r3, #1
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051a8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80051ac:	68ba      	ldr	r2, [r7, #8]
 80051ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80051b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d10b      	bne.n	80051d2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80051ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051be:	f383 8811 	msr	BASEPRI, r3
 80051c2:	f3bf 8f6f 	isb	sy
 80051c6:	f3bf 8f4f 	dsb	sy
 80051ca:	617b      	str	r3, [r7, #20]
}
 80051cc:	bf00      	nop
 80051ce:	bf00      	nop
 80051d0:	e7fd      	b.n	80051ce <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80051d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051d4:	699a      	ldr	r2, [r3, #24]
 80051d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051d8:	18d1      	adds	r1, r2, r3
 80051da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051e0:	f7ff ff04 	bl	8004fec <prvInsertTimerInActiveList>
					break;
 80051e4:	e017      	b.n	8005216 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80051e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051e8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80051ec:	f003 0302 	and.w	r3, r3, #2
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d103      	bne.n	80051fc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80051f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80051f6:	f000 fbe7 	bl	80059c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80051fa:	e00c      	b.n	8005216 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80051fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80051fe:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005202:	f023 0301 	bic.w	r3, r3, #1
 8005206:	b2da      	uxtb	r2, r3
 8005208:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800520a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800520e:	e002      	b.n	8005216 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005210:	bf00      	nop
 8005212:	e000      	b.n	8005216 <prvProcessReceivedCommands+0x1a6>
					break;
 8005214:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005216:	4b08      	ldr	r3, [pc, #32]	@ (8005238 <prvProcessReceivedCommands+0x1c8>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	1d39      	adds	r1, r7, #4
 800521c:	2200      	movs	r2, #0
 800521e:	4618      	mov	r0, r3
 8005220:	f7fe fbfc 	bl	8003a1c <xQueueReceive>
 8005224:	4603      	mov	r3, r0
 8005226:	2b00      	cmp	r3, #0
 8005228:	f47f af26 	bne.w	8005078 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800522c:	bf00      	nop
 800522e:	bf00      	nop
 8005230:	3730      	adds	r7, #48	@ 0x30
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
 8005236:	bf00      	nop
 8005238:	20000e14 	.word	0x20000e14

0800523c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b088      	sub	sp, #32
 8005240:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005242:	e049      	b.n	80052d8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005244:	4b2e      	ldr	r3, [pc, #184]	@ (8005300 <prvSwitchTimerLists+0xc4>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	68db      	ldr	r3, [r3, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800524e:	4b2c      	ldr	r3, [pc, #176]	@ (8005300 <prvSwitchTimerLists+0xc4>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68db      	ldr	r3, [r3, #12]
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	3304      	adds	r3, #4
 800525c:	4618      	mov	r0, r3
 800525e:	f7fe f909 	bl	8003474 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	68f8      	ldr	r0, [r7, #12]
 8005268:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005270:	f003 0304 	and.w	r3, r3, #4
 8005274:	2b00      	cmp	r3, #0
 8005276:	d02f      	beq.n	80052d8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	699b      	ldr	r3, [r3, #24]
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	4413      	add	r3, r2
 8005280:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005282:	68ba      	ldr	r2, [r7, #8]
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	429a      	cmp	r2, r3
 8005288:	d90e      	bls.n	80052a8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	68ba      	ldr	r2, [r7, #8]
 800528e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005296:	4b1a      	ldr	r3, [pc, #104]	@ (8005300 <prvSwitchTimerLists+0xc4>)
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	3304      	adds	r3, #4
 800529e:	4619      	mov	r1, r3
 80052a0:	4610      	mov	r0, r2
 80052a2:	f7fe f8ae 	bl	8003402 <vListInsert>
 80052a6:	e017      	b.n	80052d8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80052a8:	2300      	movs	r3, #0
 80052aa:	9300      	str	r3, [sp, #0]
 80052ac:	2300      	movs	r3, #0
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	2100      	movs	r1, #0
 80052b2:	68f8      	ldr	r0, [r7, #12]
 80052b4:	f7ff fd58 	bl	8004d68 <xTimerGenericCommand>
 80052b8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10b      	bne.n	80052d8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80052c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	603b      	str	r3, [r7, #0]
}
 80052d2:	bf00      	nop
 80052d4:	bf00      	nop
 80052d6:	e7fd      	b.n	80052d4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80052d8:	4b09      	ldr	r3, [pc, #36]	@ (8005300 <prvSwitchTimerLists+0xc4>)
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d1b0      	bne.n	8005244 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80052e2:	4b07      	ldr	r3, [pc, #28]	@ (8005300 <prvSwitchTimerLists+0xc4>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80052e8:	4b06      	ldr	r3, [pc, #24]	@ (8005304 <prvSwitchTimerLists+0xc8>)
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4a04      	ldr	r2, [pc, #16]	@ (8005300 <prvSwitchTimerLists+0xc4>)
 80052ee:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80052f0:	4a04      	ldr	r2, [pc, #16]	@ (8005304 <prvSwitchTimerLists+0xc8>)
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	6013      	str	r3, [r2, #0]
}
 80052f6:	bf00      	nop
 80052f8:	3718      	adds	r7, #24
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	20000e0c 	.word	0x20000e0c
 8005304:	20000e10 	.word	0x20000e10

08005308 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b082      	sub	sp, #8
 800530c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800530e:	f000 f96b 	bl	80055e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005312:	4b15      	ldr	r3, [pc, #84]	@ (8005368 <prvCheckForValidListAndQueue+0x60>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d120      	bne.n	800535c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800531a:	4814      	ldr	r0, [pc, #80]	@ (800536c <prvCheckForValidListAndQueue+0x64>)
 800531c:	f7fe f820 	bl	8003360 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005320:	4813      	ldr	r0, [pc, #76]	@ (8005370 <prvCheckForValidListAndQueue+0x68>)
 8005322:	f7fe f81d 	bl	8003360 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005326:	4b13      	ldr	r3, [pc, #76]	@ (8005374 <prvCheckForValidListAndQueue+0x6c>)
 8005328:	4a10      	ldr	r2, [pc, #64]	@ (800536c <prvCheckForValidListAndQueue+0x64>)
 800532a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800532c:	4b12      	ldr	r3, [pc, #72]	@ (8005378 <prvCheckForValidListAndQueue+0x70>)
 800532e:	4a10      	ldr	r2, [pc, #64]	@ (8005370 <prvCheckForValidListAndQueue+0x68>)
 8005330:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005332:	2300      	movs	r3, #0
 8005334:	9300      	str	r3, [sp, #0]
 8005336:	4b11      	ldr	r3, [pc, #68]	@ (800537c <prvCheckForValidListAndQueue+0x74>)
 8005338:	4a11      	ldr	r2, [pc, #68]	@ (8005380 <prvCheckForValidListAndQueue+0x78>)
 800533a:	2110      	movs	r1, #16
 800533c:	200a      	movs	r0, #10
 800533e:	f7fe f92d 	bl	800359c <xQueueGenericCreateStatic>
 8005342:	4603      	mov	r3, r0
 8005344:	4a08      	ldr	r2, [pc, #32]	@ (8005368 <prvCheckForValidListAndQueue+0x60>)
 8005346:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005348:	4b07      	ldr	r3, [pc, #28]	@ (8005368 <prvCheckForValidListAndQueue+0x60>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d005      	beq.n	800535c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005350:	4b05      	ldr	r3, [pc, #20]	@ (8005368 <prvCheckForValidListAndQueue+0x60>)
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	490b      	ldr	r1, [pc, #44]	@ (8005384 <prvCheckForValidListAndQueue+0x7c>)
 8005356:	4618      	mov	r0, r3
 8005358:	f7fe fd52 	bl	8003e00 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800535c:	f000 f976 	bl	800564c <vPortExitCritical>
}
 8005360:	bf00      	nop
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	20000e14 	.word	0x20000e14
 800536c:	20000de4 	.word	0x20000de4
 8005370:	20000df8 	.word	0x20000df8
 8005374:	20000e0c 	.word	0x20000e0c
 8005378:	20000e10 	.word	0x20000e10
 800537c:	20000ec0 	.word	0x20000ec0
 8005380:	20000e20 	.word	0x20000e20
 8005384:	08005cb0 	.word	0x08005cb0

08005388 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	60f8      	str	r0, [r7, #12]
 8005390:	60b9      	str	r1, [r7, #8]
 8005392:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	3b04      	subs	r3, #4
 8005398:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80053a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	3b04      	subs	r3, #4
 80053a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80053a8:	68bb      	ldr	r3, [r7, #8]
 80053aa:	f023 0201 	bic.w	r2, r3, #1
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	3b04      	subs	r3, #4
 80053b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80053b8:	4a0c      	ldr	r2, [pc, #48]	@ (80053ec <pxPortInitialiseStack+0x64>)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	3b14      	subs	r3, #20
 80053c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80053c4:	687a      	ldr	r2, [r7, #4]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	3b04      	subs	r3, #4
 80053ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	f06f 0202 	mvn.w	r2, #2
 80053d6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	3b20      	subs	r3, #32
 80053dc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80053de:	68fb      	ldr	r3, [r7, #12]
}
 80053e0:	4618      	mov	r0, r3
 80053e2:	3714      	adds	r7, #20
 80053e4:	46bd      	mov	sp, r7
 80053e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ea:	4770      	bx	lr
 80053ec:	080053f1 	.word	0x080053f1

080053f0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80053f6:	2300      	movs	r3, #0
 80053f8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80053fa:	4b13      	ldr	r3, [pc, #76]	@ (8005448 <prvTaskExitError+0x58>)
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005402:	d00b      	beq.n	800541c <prvTaskExitError+0x2c>
	__asm volatile
 8005404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005408:	f383 8811 	msr	BASEPRI, r3
 800540c:	f3bf 8f6f 	isb	sy
 8005410:	f3bf 8f4f 	dsb	sy
 8005414:	60fb      	str	r3, [r7, #12]
}
 8005416:	bf00      	nop
 8005418:	bf00      	nop
 800541a:	e7fd      	b.n	8005418 <prvTaskExitError+0x28>
	__asm volatile
 800541c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005420:	f383 8811 	msr	BASEPRI, r3
 8005424:	f3bf 8f6f 	isb	sy
 8005428:	f3bf 8f4f 	dsb	sy
 800542c:	60bb      	str	r3, [r7, #8]
}
 800542e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005430:	bf00      	nop
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d0fc      	beq.n	8005432 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005438:	bf00      	nop
 800543a:	bf00      	nop
 800543c:	3714      	adds	r7, #20
 800543e:	46bd      	mov	sp, r7
 8005440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	20000024 	.word	0x20000024
 800544c:	00000000 	.word	0x00000000

08005450 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005450:	4b07      	ldr	r3, [pc, #28]	@ (8005470 <pxCurrentTCBConst2>)
 8005452:	6819      	ldr	r1, [r3, #0]
 8005454:	6808      	ldr	r0, [r1, #0]
 8005456:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800545a:	f380 8809 	msr	PSP, r0
 800545e:	f3bf 8f6f 	isb	sy
 8005462:	f04f 0000 	mov.w	r0, #0
 8005466:	f380 8811 	msr	BASEPRI, r0
 800546a:	4770      	bx	lr
 800546c:	f3af 8000 	nop.w

08005470 <pxCurrentTCBConst2>:
 8005470:	200008e4 	.word	0x200008e4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005474:	bf00      	nop
 8005476:	bf00      	nop

08005478 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005478:	4808      	ldr	r0, [pc, #32]	@ (800549c <prvPortStartFirstTask+0x24>)
 800547a:	6800      	ldr	r0, [r0, #0]
 800547c:	6800      	ldr	r0, [r0, #0]
 800547e:	f380 8808 	msr	MSP, r0
 8005482:	f04f 0000 	mov.w	r0, #0
 8005486:	f380 8814 	msr	CONTROL, r0
 800548a:	b662      	cpsie	i
 800548c:	b661      	cpsie	f
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	f3bf 8f6f 	isb	sy
 8005496:	df00      	svc	0
 8005498:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800549a:	bf00      	nop
 800549c:	e000ed08 	.word	0xe000ed08

080054a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80054a0:	b580      	push	{r7, lr}
 80054a2:	b086      	sub	sp, #24
 80054a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80054a6:	4b47      	ldr	r3, [pc, #284]	@ (80055c4 <xPortStartScheduler+0x124>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4a47      	ldr	r2, [pc, #284]	@ (80055c8 <xPortStartScheduler+0x128>)
 80054ac:	4293      	cmp	r3, r2
 80054ae:	d10b      	bne.n	80054c8 <xPortStartScheduler+0x28>
	__asm volatile
 80054b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	613b      	str	r3, [r7, #16]
}
 80054c2:	bf00      	nop
 80054c4:	bf00      	nop
 80054c6:	e7fd      	b.n	80054c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80054c8:	4b3e      	ldr	r3, [pc, #248]	@ (80055c4 <xPortStartScheduler+0x124>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a3f      	ldr	r2, [pc, #252]	@ (80055cc <xPortStartScheduler+0x12c>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d10b      	bne.n	80054ea <xPortStartScheduler+0x4a>
	__asm volatile
 80054d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	60fb      	str	r3, [r7, #12]
}
 80054e4:	bf00      	nop
 80054e6:	bf00      	nop
 80054e8:	e7fd      	b.n	80054e6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80054ea:	4b39      	ldr	r3, [pc, #228]	@ (80055d0 <xPortStartScheduler+0x130>)
 80054ec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80054ee:	697b      	ldr	r3, [r7, #20]
 80054f0:	781b      	ldrb	r3, [r3, #0]
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	22ff      	movs	r2, #255	@ 0xff
 80054fa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	b2db      	uxtb	r3, r3
 8005502:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005504:	78fb      	ldrb	r3, [r7, #3]
 8005506:	b2db      	uxtb	r3, r3
 8005508:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800550c:	b2da      	uxtb	r2, r3
 800550e:	4b31      	ldr	r3, [pc, #196]	@ (80055d4 <xPortStartScheduler+0x134>)
 8005510:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005512:	4b31      	ldr	r3, [pc, #196]	@ (80055d8 <xPortStartScheduler+0x138>)
 8005514:	2207      	movs	r2, #7
 8005516:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005518:	e009      	b.n	800552e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800551a:	4b2f      	ldr	r3, [pc, #188]	@ (80055d8 <xPortStartScheduler+0x138>)
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	3b01      	subs	r3, #1
 8005520:	4a2d      	ldr	r2, [pc, #180]	@ (80055d8 <xPortStartScheduler+0x138>)
 8005522:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005524:	78fb      	ldrb	r3, [r7, #3]
 8005526:	b2db      	uxtb	r3, r3
 8005528:	005b      	lsls	r3, r3, #1
 800552a:	b2db      	uxtb	r3, r3
 800552c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800552e:	78fb      	ldrb	r3, [r7, #3]
 8005530:	b2db      	uxtb	r3, r3
 8005532:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005536:	2b80      	cmp	r3, #128	@ 0x80
 8005538:	d0ef      	beq.n	800551a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800553a:	4b27      	ldr	r3, [pc, #156]	@ (80055d8 <xPortStartScheduler+0x138>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f1c3 0307 	rsb	r3, r3, #7
 8005542:	2b04      	cmp	r3, #4
 8005544:	d00b      	beq.n	800555e <xPortStartScheduler+0xbe>
	__asm volatile
 8005546:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800554a:	f383 8811 	msr	BASEPRI, r3
 800554e:	f3bf 8f6f 	isb	sy
 8005552:	f3bf 8f4f 	dsb	sy
 8005556:	60bb      	str	r3, [r7, #8]
}
 8005558:	bf00      	nop
 800555a:	bf00      	nop
 800555c:	e7fd      	b.n	800555a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800555e:	4b1e      	ldr	r3, [pc, #120]	@ (80055d8 <xPortStartScheduler+0x138>)
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	021b      	lsls	r3, r3, #8
 8005564:	4a1c      	ldr	r2, [pc, #112]	@ (80055d8 <xPortStartScheduler+0x138>)
 8005566:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005568:	4b1b      	ldr	r3, [pc, #108]	@ (80055d8 <xPortStartScheduler+0x138>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005570:	4a19      	ldr	r2, [pc, #100]	@ (80055d8 <xPortStartScheduler+0x138>)
 8005572:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	b2da      	uxtb	r2, r3
 8005578:	697b      	ldr	r3, [r7, #20]
 800557a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800557c:	4b17      	ldr	r3, [pc, #92]	@ (80055dc <xPortStartScheduler+0x13c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a16      	ldr	r2, [pc, #88]	@ (80055dc <xPortStartScheduler+0x13c>)
 8005582:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005586:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005588:	4b14      	ldr	r3, [pc, #80]	@ (80055dc <xPortStartScheduler+0x13c>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a13      	ldr	r2, [pc, #76]	@ (80055dc <xPortStartScheduler+0x13c>)
 800558e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005592:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005594:	f000 f8da 	bl	800574c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005598:	4b11      	ldr	r3, [pc, #68]	@ (80055e0 <xPortStartScheduler+0x140>)
 800559a:	2200      	movs	r2, #0
 800559c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800559e:	f000 f8f9 	bl	8005794 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80055a2:	4b10      	ldr	r3, [pc, #64]	@ (80055e4 <xPortStartScheduler+0x144>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	4a0f      	ldr	r2, [pc, #60]	@ (80055e4 <xPortStartScheduler+0x144>)
 80055a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80055ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80055ae:	f7ff ff63 	bl	8005478 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80055b2:	f7ff f83d 	bl	8004630 <vTaskSwitchContext>
	prvTaskExitError();
 80055b6:	f7ff ff1b 	bl	80053f0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3718      	adds	r7, #24
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}
 80055c4:	e000ed00 	.word	0xe000ed00
 80055c8:	410fc271 	.word	0x410fc271
 80055cc:	410fc270 	.word	0x410fc270
 80055d0:	e000e400 	.word	0xe000e400
 80055d4:	20000f10 	.word	0x20000f10
 80055d8:	20000f14 	.word	0x20000f14
 80055dc:	e000ed20 	.word	0xe000ed20
 80055e0:	20000024 	.word	0x20000024
 80055e4:	e000ef34 	.word	0xe000ef34

080055e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80055e8:	b480      	push	{r7}
 80055ea:	b083      	sub	sp, #12
 80055ec:	af00      	add	r7, sp, #0
	__asm volatile
 80055ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f2:	f383 8811 	msr	BASEPRI, r3
 80055f6:	f3bf 8f6f 	isb	sy
 80055fa:	f3bf 8f4f 	dsb	sy
 80055fe:	607b      	str	r3, [r7, #4]
}
 8005600:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005602:	4b10      	ldr	r3, [pc, #64]	@ (8005644 <vPortEnterCritical+0x5c>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	3301      	adds	r3, #1
 8005608:	4a0e      	ldr	r2, [pc, #56]	@ (8005644 <vPortEnterCritical+0x5c>)
 800560a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800560c:	4b0d      	ldr	r3, [pc, #52]	@ (8005644 <vPortEnterCritical+0x5c>)
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	2b01      	cmp	r3, #1
 8005612:	d110      	bne.n	8005636 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005614:	4b0c      	ldr	r3, [pc, #48]	@ (8005648 <vPortEnterCritical+0x60>)
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	b2db      	uxtb	r3, r3
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00b      	beq.n	8005636 <vPortEnterCritical+0x4e>
	__asm volatile
 800561e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005622:	f383 8811 	msr	BASEPRI, r3
 8005626:	f3bf 8f6f 	isb	sy
 800562a:	f3bf 8f4f 	dsb	sy
 800562e:	603b      	str	r3, [r7, #0]
}
 8005630:	bf00      	nop
 8005632:	bf00      	nop
 8005634:	e7fd      	b.n	8005632 <vPortEnterCritical+0x4a>
	}
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr
 8005642:	bf00      	nop
 8005644:	20000024 	.word	0x20000024
 8005648:	e000ed04 	.word	0xe000ed04

0800564c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005652:	4b12      	ldr	r3, [pc, #72]	@ (800569c <vPortExitCritical+0x50>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d10b      	bne.n	8005672 <vPortExitCritical+0x26>
	__asm volatile
 800565a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800565e:	f383 8811 	msr	BASEPRI, r3
 8005662:	f3bf 8f6f 	isb	sy
 8005666:	f3bf 8f4f 	dsb	sy
 800566a:	607b      	str	r3, [r7, #4]
}
 800566c:	bf00      	nop
 800566e:	bf00      	nop
 8005670:	e7fd      	b.n	800566e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005672:	4b0a      	ldr	r3, [pc, #40]	@ (800569c <vPortExitCritical+0x50>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	3b01      	subs	r3, #1
 8005678:	4a08      	ldr	r2, [pc, #32]	@ (800569c <vPortExitCritical+0x50>)
 800567a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800567c:	4b07      	ldr	r3, [pc, #28]	@ (800569c <vPortExitCritical+0x50>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d105      	bne.n	8005690 <vPortExitCritical+0x44>
 8005684:	2300      	movs	r3, #0
 8005686:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	f383 8811 	msr	BASEPRI, r3
}
 800568e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	20000024 	.word	0x20000024

080056a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80056a0:	f3ef 8009 	mrs	r0, PSP
 80056a4:	f3bf 8f6f 	isb	sy
 80056a8:	4b15      	ldr	r3, [pc, #84]	@ (8005700 <pxCurrentTCBConst>)
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	f01e 0f10 	tst.w	lr, #16
 80056b0:	bf08      	it	eq
 80056b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80056b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056ba:	6010      	str	r0, [r2, #0]
 80056bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80056c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80056c4:	f380 8811 	msr	BASEPRI, r0
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	f3bf 8f6f 	isb	sy
 80056d0:	f7fe ffae 	bl	8004630 <vTaskSwitchContext>
 80056d4:	f04f 0000 	mov.w	r0, #0
 80056d8:	f380 8811 	msr	BASEPRI, r0
 80056dc:	bc09      	pop	{r0, r3}
 80056de:	6819      	ldr	r1, [r3, #0]
 80056e0:	6808      	ldr	r0, [r1, #0]
 80056e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e6:	f01e 0f10 	tst.w	lr, #16
 80056ea:	bf08      	it	eq
 80056ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80056f0:	f380 8809 	msr	PSP, r0
 80056f4:	f3bf 8f6f 	isb	sy
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	f3af 8000 	nop.w

08005700 <pxCurrentTCBConst>:
 8005700:	200008e4 	.word	0x200008e4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005704:	bf00      	nop
 8005706:	bf00      	nop

08005708 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005708:	b580      	push	{r7, lr}
 800570a:	b082      	sub	sp, #8
 800570c:	af00      	add	r7, sp, #0
	__asm volatile
 800570e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005712:	f383 8811 	msr	BASEPRI, r3
 8005716:	f3bf 8f6f 	isb	sy
 800571a:	f3bf 8f4f 	dsb	sy
 800571e:	607b      	str	r3, [r7, #4]
}
 8005720:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005722:	f7fe fecb 	bl	80044bc <xTaskIncrementTick>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d003      	beq.n	8005734 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800572c:	4b06      	ldr	r3, [pc, #24]	@ (8005748 <xPortSysTickHandler+0x40>)
 800572e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005732:	601a      	str	r2, [r3, #0]
 8005734:	2300      	movs	r3, #0
 8005736:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	f383 8811 	msr	BASEPRI, r3
}
 800573e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005740:	bf00      	nop
 8005742:	3708      	adds	r7, #8
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}
 8005748:	e000ed04 	.word	0xe000ed04

0800574c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800574c:	b480      	push	{r7}
 800574e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005750:	4b0b      	ldr	r3, [pc, #44]	@ (8005780 <vPortSetupTimerInterrupt+0x34>)
 8005752:	2200      	movs	r2, #0
 8005754:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005756:	4b0b      	ldr	r3, [pc, #44]	@ (8005784 <vPortSetupTimerInterrupt+0x38>)
 8005758:	2200      	movs	r2, #0
 800575a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800575c:	4b0a      	ldr	r3, [pc, #40]	@ (8005788 <vPortSetupTimerInterrupt+0x3c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4a0a      	ldr	r2, [pc, #40]	@ (800578c <vPortSetupTimerInterrupt+0x40>)
 8005762:	fba2 2303 	umull	r2, r3, r2, r3
 8005766:	099b      	lsrs	r3, r3, #6
 8005768:	4a09      	ldr	r2, [pc, #36]	@ (8005790 <vPortSetupTimerInterrupt+0x44>)
 800576a:	3b01      	subs	r3, #1
 800576c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800576e:	4b04      	ldr	r3, [pc, #16]	@ (8005780 <vPortSetupTimerInterrupt+0x34>)
 8005770:	2207      	movs	r2, #7
 8005772:	601a      	str	r2, [r3, #0]
}
 8005774:	bf00      	nop
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	e000e010 	.word	0xe000e010
 8005784:	e000e018 	.word	0xe000e018
 8005788:	20000018 	.word	0x20000018
 800578c:	10624dd3 	.word	0x10624dd3
 8005790:	e000e014 	.word	0xe000e014

08005794 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005794:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80057a4 <vPortEnableVFP+0x10>
 8005798:	6801      	ldr	r1, [r0, #0]
 800579a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800579e:	6001      	str	r1, [r0, #0]
 80057a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80057a2:	bf00      	nop
 80057a4:	e000ed88 	.word	0xe000ed88

080057a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80057a8:	b480      	push	{r7}
 80057aa:	b085      	sub	sp, #20
 80057ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80057ae:	f3ef 8305 	mrs	r3, IPSR
 80057b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2b0f      	cmp	r3, #15
 80057b8:	d915      	bls.n	80057e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80057ba:	4a18      	ldr	r2, [pc, #96]	@ (800581c <vPortValidateInterruptPriority+0x74>)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	4413      	add	r3, r2
 80057c0:	781b      	ldrb	r3, [r3, #0]
 80057c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80057c4:	4b16      	ldr	r3, [pc, #88]	@ (8005820 <vPortValidateInterruptPriority+0x78>)
 80057c6:	781b      	ldrb	r3, [r3, #0]
 80057c8:	7afa      	ldrb	r2, [r7, #11]
 80057ca:	429a      	cmp	r2, r3
 80057cc:	d20b      	bcs.n	80057e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80057ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057d2:	f383 8811 	msr	BASEPRI, r3
 80057d6:	f3bf 8f6f 	isb	sy
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	607b      	str	r3, [r7, #4]
}
 80057e0:	bf00      	nop
 80057e2:	bf00      	nop
 80057e4:	e7fd      	b.n	80057e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80057e6:	4b0f      	ldr	r3, [pc, #60]	@ (8005824 <vPortValidateInterruptPriority+0x7c>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80057ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005828 <vPortValidateInterruptPriority+0x80>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	429a      	cmp	r2, r3
 80057f4:	d90b      	bls.n	800580e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80057f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057fa:	f383 8811 	msr	BASEPRI, r3
 80057fe:	f3bf 8f6f 	isb	sy
 8005802:	f3bf 8f4f 	dsb	sy
 8005806:	603b      	str	r3, [r7, #0]
}
 8005808:	bf00      	nop
 800580a:	bf00      	nop
 800580c:	e7fd      	b.n	800580a <vPortValidateInterruptPriority+0x62>
	}
 800580e:	bf00      	nop
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	e000e3f0 	.word	0xe000e3f0
 8005820:	20000f10 	.word	0x20000f10
 8005824:	e000ed0c 	.word	0xe000ed0c
 8005828:	20000f14 	.word	0x20000f14

0800582c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b08a      	sub	sp, #40	@ 0x28
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005834:	2300      	movs	r3, #0
 8005836:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005838:	f7fe fd84 	bl	8004344 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800583c:	4b5c      	ldr	r3, [pc, #368]	@ (80059b0 <pvPortMalloc+0x184>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d101      	bne.n	8005848 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005844:	f000 f924 	bl	8005a90 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005848:	4b5a      	ldr	r3, [pc, #360]	@ (80059b4 <pvPortMalloc+0x188>)
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4013      	ands	r3, r2
 8005850:	2b00      	cmp	r3, #0
 8005852:	f040 8095 	bne.w	8005980 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d01e      	beq.n	800589a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800585c:	2208      	movs	r2, #8
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	4413      	add	r3, r2
 8005862:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f003 0307 	and.w	r3, r3, #7
 800586a:	2b00      	cmp	r3, #0
 800586c:	d015      	beq.n	800589a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	f023 0307 	bic.w	r3, r3, #7
 8005874:	3308      	adds	r3, #8
 8005876:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	f003 0307 	and.w	r3, r3, #7
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00b      	beq.n	800589a <pvPortMalloc+0x6e>
	__asm volatile
 8005882:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005886:	f383 8811 	msr	BASEPRI, r3
 800588a:	f3bf 8f6f 	isb	sy
 800588e:	f3bf 8f4f 	dsb	sy
 8005892:	617b      	str	r3, [r7, #20]
}
 8005894:	bf00      	nop
 8005896:	bf00      	nop
 8005898:	e7fd      	b.n	8005896 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d06f      	beq.n	8005980 <pvPortMalloc+0x154>
 80058a0:	4b45      	ldr	r3, [pc, #276]	@ (80059b8 <pvPortMalloc+0x18c>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	687a      	ldr	r2, [r7, #4]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d86a      	bhi.n	8005980 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80058aa:	4b44      	ldr	r3, [pc, #272]	@ (80059bc <pvPortMalloc+0x190>)
 80058ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80058ae:	4b43      	ldr	r3, [pc, #268]	@ (80059bc <pvPortMalloc+0x190>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058b4:	e004      	b.n	80058c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80058b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80058ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80058c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	687a      	ldr	r2, [r7, #4]
 80058c6:	429a      	cmp	r2, r3
 80058c8:	d903      	bls.n	80058d2 <pvPortMalloc+0xa6>
 80058ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d1f1      	bne.n	80058b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80058d2:	4b37      	ldr	r3, [pc, #220]	@ (80059b0 <pvPortMalloc+0x184>)
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058d8:	429a      	cmp	r2, r3
 80058da:	d051      	beq.n	8005980 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80058dc:	6a3b      	ldr	r3, [r7, #32]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	2208      	movs	r2, #8
 80058e2:	4413      	add	r3, r2
 80058e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80058e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e8:	681a      	ldr	r2, [r3, #0]
 80058ea:	6a3b      	ldr	r3, [r7, #32]
 80058ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80058ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	1ad2      	subs	r2, r2, r3
 80058f6:	2308      	movs	r3, #8
 80058f8:	005b      	lsls	r3, r3, #1
 80058fa:	429a      	cmp	r2, r3
 80058fc:	d920      	bls.n	8005940 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80058fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4413      	add	r3, r2
 8005904:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005906:	69bb      	ldr	r3, [r7, #24]
 8005908:	f003 0307 	and.w	r3, r3, #7
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00b      	beq.n	8005928 <pvPortMalloc+0xfc>
	__asm volatile
 8005910:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005914:	f383 8811 	msr	BASEPRI, r3
 8005918:	f3bf 8f6f 	isb	sy
 800591c:	f3bf 8f4f 	dsb	sy
 8005920:	613b      	str	r3, [r7, #16]
}
 8005922:	bf00      	nop
 8005924:	bf00      	nop
 8005926:	e7fd      	b.n	8005924 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005928:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800592a:	685a      	ldr	r2, [r3, #4]
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	1ad2      	subs	r2, r2, r3
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005934:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005936:	687a      	ldr	r2, [r7, #4]
 8005938:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800593a:	69b8      	ldr	r0, [r7, #24]
 800593c:	f000 f90a 	bl	8005b54 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005940:	4b1d      	ldr	r3, [pc, #116]	@ (80059b8 <pvPortMalloc+0x18c>)
 8005942:	681a      	ldr	r2, [r3, #0]
 8005944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	4a1b      	ldr	r2, [pc, #108]	@ (80059b8 <pvPortMalloc+0x18c>)
 800594c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800594e:	4b1a      	ldr	r3, [pc, #104]	@ (80059b8 <pvPortMalloc+0x18c>)
 8005950:	681a      	ldr	r2, [r3, #0]
 8005952:	4b1b      	ldr	r3, [pc, #108]	@ (80059c0 <pvPortMalloc+0x194>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	429a      	cmp	r2, r3
 8005958:	d203      	bcs.n	8005962 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800595a:	4b17      	ldr	r3, [pc, #92]	@ (80059b8 <pvPortMalloc+0x18c>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	4a18      	ldr	r2, [pc, #96]	@ (80059c0 <pvPortMalloc+0x194>)
 8005960:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005962:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005964:	685a      	ldr	r2, [r3, #4]
 8005966:	4b13      	ldr	r3, [pc, #76]	@ (80059b4 <pvPortMalloc+0x188>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	431a      	orrs	r2, r3
 800596c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800596e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005972:	2200      	movs	r2, #0
 8005974:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005976:	4b13      	ldr	r3, [pc, #76]	@ (80059c4 <pvPortMalloc+0x198>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	3301      	adds	r3, #1
 800597c:	4a11      	ldr	r2, [pc, #68]	@ (80059c4 <pvPortMalloc+0x198>)
 800597e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005980:	f7fe fcee 	bl	8004360 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	f003 0307 	and.w	r3, r3, #7
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00b      	beq.n	80059a6 <pvPortMalloc+0x17a>
	__asm volatile
 800598e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005992:	f383 8811 	msr	BASEPRI, r3
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	f3bf 8f4f 	dsb	sy
 800599e:	60fb      	str	r3, [r7, #12]
}
 80059a0:	bf00      	nop
 80059a2:	bf00      	nop
 80059a4:	e7fd      	b.n	80059a2 <pvPortMalloc+0x176>
	return pvReturn;
 80059a6:	69fb      	ldr	r3, [r7, #28]
}
 80059a8:	4618      	mov	r0, r3
 80059aa:	3728      	adds	r7, #40	@ 0x28
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	20004b20 	.word	0x20004b20
 80059b4:	20004b34 	.word	0x20004b34
 80059b8:	20004b24 	.word	0x20004b24
 80059bc:	20004b18 	.word	0x20004b18
 80059c0:	20004b28 	.word	0x20004b28
 80059c4:	20004b2c 	.word	0x20004b2c

080059c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b086      	sub	sp, #24
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d04f      	beq.n	8005a7a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80059da:	2308      	movs	r3, #8
 80059dc:	425b      	negs	r3, r3
 80059de:	697a      	ldr	r2, [r7, #20]
 80059e0:	4413      	add	r3, r2
 80059e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	685a      	ldr	r2, [r3, #4]
 80059ec:	4b25      	ldr	r3, [pc, #148]	@ (8005a84 <vPortFree+0xbc>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4013      	ands	r3, r2
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10b      	bne.n	8005a0e <vPortFree+0x46>
	__asm volatile
 80059f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059fa:	f383 8811 	msr	BASEPRI, r3
 80059fe:	f3bf 8f6f 	isb	sy
 8005a02:	f3bf 8f4f 	dsb	sy
 8005a06:	60fb      	str	r3, [r7, #12]
}
 8005a08:	bf00      	nop
 8005a0a:	bf00      	nop
 8005a0c:	e7fd      	b.n	8005a0a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00b      	beq.n	8005a2e <vPortFree+0x66>
	__asm volatile
 8005a16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a1a:	f383 8811 	msr	BASEPRI, r3
 8005a1e:	f3bf 8f6f 	isb	sy
 8005a22:	f3bf 8f4f 	dsb	sy
 8005a26:	60bb      	str	r3, [r7, #8]
}
 8005a28:	bf00      	nop
 8005a2a:	bf00      	nop
 8005a2c:	e7fd      	b.n	8005a2a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005a2e:	693b      	ldr	r3, [r7, #16]
 8005a30:	685a      	ldr	r2, [r3, #4]
 8005a32:	4b14      	ldr	r3, [pc, #80]	@ (8005a84 <vPortFree+0xbc>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	4013      	ands	r3, r2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d01e      	beq.n	8005a7a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d11a      	bne.n	8005a7a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	685a      	ldr	r2, [r3, #4]
 8005a48:	4b0e      	ldr	r3, [pc, #56]	@ (8005a84 <vPortFree+0xbc>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	43db      	mvns	r3, r3
 8005a4e:	401a      	ands	r2, r3
 8005a50:	693b      	ldr	r3, [r7, #16]
 8005a52:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005a54:	f7fe fc76 	bl	8004344 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	685a      	ldr	r2, [r3, #4]
 8005a5c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a88 <vPortFree+0xc0>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4413      	add	r3, r2
 8005a62:	4a09      	ldr	r2, [pc, #36]	@ (8005a88 <vPortFree+0xc0>)
 8005a64:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005a66:	6938      	ldr	r0, [r7, #16]
 8005a68:	f000 f874 	bl	8005b54 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005a6c:	4b07      	ldr	r3, [pc, #28]	@ (8005a8c <vPortFree+0xc4>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	3301      	adds	r3, #1
 8005a72:	4a06      	ldr	r2, [pc, #24]	@ (8005a8c <vPortFree+0xc4>)
 8005a74:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005a76:	f7fe fc73 	bl	8004360 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005a7a:	bf00      	nop
 8005a7c:	3718      	adds	r7, #24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	20004b34 	.word	0x20004b34
 8005a88:	20004b24 	.word	0x20004b24
 8005a8c:	20004b30 	.word	0x20004b30

08005a90 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a96:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8005a9a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a9c:	4b27      	ldr	r3, [pc, #156]	@ (8005b3c <prvHeapInit+0xac>)
 8005a9e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	f003 0307 	and.w	r3, r3, #7
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00c      	beq.n	8005ac4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	3307      	adds	r3, #7
 8005aae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f023 0307 	bic.w	r3, r3, #7
 8005ab6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005ab8:	68ba      	ldr	r2, [r7, #8]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	1ad3      	subs	r3, r2, r3
 8005abe:	4a1f      	ldr	r2, [pc, #124]	@ (8005b3c <prvHeapInit+0xac>)
 8005ac0:	4413      	add	r3, r2
 8005ac2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005ac8:	4a1d      	ldr	r2, [pc, #116]	@ (8005b40 <prvHeapInit+0xb0>)
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005ace:	4b1c      	ldr	r3, [pc, #112]	@ (8005b40 <prvHeapInit+0xb0>)
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	68ba      	ldr	r2, [r7, #8]
 8005ad8:	4413      	add	r3, r2
 8005ada:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005adc:	2208      	movs	r2, #8
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	1a9b      	subs	r3, r3, r2
 8005ae2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f023 0307 	bic.w	r3, r3, #7
 8005aea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	4a15      	ldr	r2, [pc, #84]	@ (8005b44 <prvHeapInit+0xb4>)
 8005af0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005af2:	4b14      	ldr	r3, [pc, #80]	@ (8005b44 <prvHeapInit+0xb4>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2200      	movs	r2, #0
 8005af8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005afa:	4b12      	ldr	r3, [pc, #72]	@ (8005b44 <prvHeapInit+0xb4>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	2200      	movs	r2, #0
 8005b00:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	1ad2      	subs	r2, r2, r3
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005b10:	4b0c      	ldr	r3, [pc, #48]	@ (8005b44 <prvHeapInit+0xb4>)
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b18:	683b      	ldr	r3, [r7, #0]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	4a0a      	ldr	r2, [pc, #40]	@ (8005b48 <prvHeapInit+0xb8>)
 8005b1e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	4a09      	ldr	r2, [pc, #36]	@ (8005b4c <prvHeapInit+0xbc>)
 8005b26:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005b28:	4b09      	ldr	r3, [pc, #36]	@ (8005b50 <prvHeapInit+0xc0>)
 8005b2a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8005b2e:	601a      	str	r2, [r3, #0]
}
 8005b30:	bf00      	nop
 8005b32:	3714      	adds	r7, #20
 8005b34:	46bd      	mov	sp, r7
 8005b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3a:	4770      	bx	lr
 8005b3c:	20000f18 	.word	0x20000f18
 8005b40:	20004b18 	.word	0x20004b18
 8005b44:	20004b20 	.word	0x20004b20
 8005b48:	20004b28 	.word	0x20004b28
 8005b4c:	20004b24 	.word	0x20004b24
 8005b50:	20004b34 	.word	0x20004b34

08005b54 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005b5c:	4b28      	ldr	r3, [pc, #160]	@ (8005c00 <prvInsertBlockIntoFreeList+0xac>)
 8005b5e:	60fb      	str	r3, [r7, #12]
 8005b60:	e002      	b.n	8005b68 <prvInsertBlockIntoFreeList+0x14>
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	60fb      	str	r3, [r7, #12]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d8f7      	bhi.n	8005b62 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	68ba      	ldr	r2, [r7, #8]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	687a      	ldr	r2, [r7, #4]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d108      	bne.n	8005b96 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	685a      	ldr	r2, [r3, #4]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	441a      	add	r2, r3
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	685b      	ldr	r3, [r3, #4]
 8005b9e:	68ba      	ldr	r2, [r7, #8]
 8005ba0:	441a      	add	r2, r3
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	429a      	cmp	r2, r3
 8005ba8:	d118      	bne.n	8005bdc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	4b15      	ldr	r3, [pc, #84]	@ (8005c04 <prvInsertBlockIntoFreeList+0xb0>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	429a      	cmp	r2, r3
 8005bb4:	d00d      	beq.n	8005bd2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	685a      	ldr	r2, [r3, #4]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	441a      	add	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	601a      	str	r2, [r3, #0]
 8005bd0:	e008      	b.n	8005be4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8005c04 <prvInsertBlockIntoFreeList+0xb0>)
 8005bd4:	681a      	ldr	r2, [r3, #0]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	601a      	str	r2, [r3, #0]
 8005bda:	e003      	b.n	8005be4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005be4:	68fa      	ldr	r2, [r7, #12]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	429a      	cmp	r2, r3
 8005bea:	d002      	beq.n	8005bf2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bf2:	bf00      	nop
 8005bf4:	3714      	adds	r7, #20
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	20004b18 	.word	0x20004b18
 8005c04:	20004b20 	.word	0x20004b20

08005c08 <memset>:
 8005c08:	4402      	add	r2, r0
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d100      	bne.n	8005c12 <memset+0xa>
 8005c10:	4770      	bx	lr
 8005c12:	f803 1b01 	strb.w	r1, [r3], #1
 8005c16:	e7f9      	b.n	8005c0c <memset+0x4>

08005c18 <__libc_init_array>:
 8005c18:	b570      	push	{r4, r5, r6, lr}
 8005c1a:	4d0d      	ldr	r5, [pc, #52]	@ (8005c50 <__libc_init_array+0x38>)
 8005c1c:	4c0d      	ldr	r4, [pc, #52]	@ (8005c54 <__libc_init_array+0x3c>)
 8005c1e:	1b64      	subs	r4, r4, r5
 8005c20:	10a4      	asrs	r4, r4, #2
 8005c22:	2600      	movs	r6, #0
 8005c24:	42a6      	cmp	r6, r4
 8005c26:	d109      	bne.n	8005c3c <__libc_init_array+0x24>
 8005c28:	4d0b      	ldr	r5, [pc, #44]	@ (8005c58 <__libc_init_array+0x40>)
 8005c2a:	4c0c      	ldr	r4, [pc, #48]	@ (8005c5c <__libc_init_array+0x44>)
 8005c2c:	f000 f826 	bl	8005c7c <_init>
 8005c30:	1b64      	subs	r4, r4, r5
 8005c32:	10a4      	asrs	r4, r4, #2
 8005c34:	2600      	movs	r6, #0
 8005c36:	42a6      	cmp	r6, r4
 8005c38:	d105      	bne.n	8005c46 <__libc_init_array+0x2e>
 8005c3a:	bd70      	pop	{r4, r5, r6, pc}
 8005c3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c40:	4798      	blx	r3
 8005c42:	3601      	adds	r6, #1
 8005c44:	e7ee      	b.n	8005c24 <__libc_init_array+0xc>
 8005c46:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c4a:	4798      	blx	r3
 8005c4c:	3601      	adds	r6, #1
 8005c4e:	e7f2      	b.n	8005c36 <__libc_init_array+0x1e>
 8005c50:	08005cfc 	.word	0x08005cfc
 8005c54:	08005cfc 	.word	0x08005cfc
 8005c58:	08005cfc 	.word	0x08005cfc
 8005c5c:	08005d00 	.word	0x08005d00

08005c60 <memcpy>:
 8005c60:	440a      	add	r2, r1
 8005c62:	4291      	cmp	r1, r2
 8005c64:	f100 33ff 	add.w	r3, r0, #4294967295
 8005c68:	d100      	bne.n	8005c6c <memcpy+0xc>
 8005c6a:	4770      	bx	lr
 8005c6c:	b510      	push	{r4, lr}
 8005c6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005c72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005c76:	4291      	cmp	r1, r2
 8005c78:	d1f9      	bne.n	8005c6e <memcpy+0xe>
 8005c7a:	bd10      	pop	{r4, pc}

08005c7c <_init>:
 8005c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7e:	bf00      	nop
 8005c80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c82:	bc08      	pop	{r3}
 8005c84:	469e      	mov	lr, r3
 8005c86:	4770      	bx	lr

08005c88 <_fini>:
 8005c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8a:	bf00      	nop
 8005c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c8e:	bc08      	pop	{r3}
 8005c90:	469e      	mov	lr, r3
 8005c92:	4770      	bx	lr
